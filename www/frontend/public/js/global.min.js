"use strict";define("global:collection:dictionary",[],function(){var e=Backbone.Collection.extend({model:Backbone.Model.extend({idAttribute:"ID",defaults:{DicCode:"",DicType:0,ID:null,Importance:null,Title:""}}),url:"/api/sources/types"}),t=new e,i={done:function(e,n){this.callback=e,n&&(this.context=n),t.models.length?this.callback.call(i.context,t):t.fetch({reset:!0,success:function(e){i.callback.call(i.context,e)}})}};return i}),define("storage",["i18n!nls/resources.min"],function(e){return new(Backbone.Model.extend({defaults:{Trees:{},Players:[],ConnectUrl:""},initialize:function(){this.Current=null,Backbone.on("storage:addTree",this.addTree,this),Backbone.on("storage:addPlayer",this.addPlayer,this),Backbone.on("storage:clearPlayers",this.clearPlayers,this),Backbone.on("storage:check-add",this.addChecking,this),Backbone.on("storage:check-clear",this.clearChecking,this),Backbone.on("storage:temp-object",this.setCurrent,this)},setCurrent:function(e){this.Current=e},clearChecking:function(e){var t=this.checkCollection.get(e);this.checkCollection.remove(t)},addChecking:function(e){this.checkCollection||(this.checkCollection=new Backbone.Collection),this.checkCollection.add(e)},getTree:function(e,t,i,n){return new Promise(function(o,s){var l=this.get("Trees");if(!l[e]||t){var a=this.getModelForTree(e);require(["g/tree/TreeView"],function(t){var s=n||{};s.model=a,s.api=function(){return"/api/"+e+(i||"")},s.markCurrent=!0,l[e]=new t(s),this.set("Trees",l),o(l[e])}.bind(this))}else l[e].operation=this.getModelForTree(e).get("present").operation,o(l[e])}.bind(this))},getModelForTree:function(e){if($.trim(e))return this.buts||this.getButs(),new Backbone.Model(_.findWhere(this.buts,{id:e}))},getButs:function(){var t=e.QueryButtonsData,i=[];return _.each(t,function(e){i.push(e);var t=e.addButtons;t&&(i=_.union(i,t))},this),this.buts=i,i},addPlayer:function(e,t){this.get("Players").push(e)},clearPlayers:function(){var e=this.get("Players");_.each(e,function(e){e.pause(),e.src="",e.load(),e={}},this)}}))}),define("global.behaviors.input",[],function(){return Mn.Behavior.extend({ui:{input:"input[type=text].g-form--input",clear:"i.clear",switchEdit:"#switch-edit",help:"i.help"},events:{"click .g-tip kbd":function(e){$(e.target).closest(".g-tip").hide()},"click @ui.help":function(e){$(e.target).next(".g-tip").show().delay(3e3).fadeOut()},"click @ui.clear":function(e){$(event.target).prevAll("input").val("").removeClass("filled")},'focus @ui.input:not(".disabled")':"filled",'blur @ui.input:not(".disabled")':"filled","click @ui.switchEdit":function(e){var t=$(e.target),i="off"===t.attr("mode");t.attr("mode",i?"on":"off"),this.$form.toggleClass("readonly"),i?this.$form.find(".inquiry-form--controls .row div:last").show():this.$form.find(".inquiry-form--controls .row div:last").hide(),_.each(this.ui.input,function(e){var t=$(e);this.$form.hasClass("readonly")?t.prop("disabled",!0):t.prop("disabled",!1)},this)}},filled:function(e){var t=$(e.target);$.trim(t.val())?(t.addClass("filled"),this.ui.clear.show()):t.removeClass("filled")},onRender:function(){this.$form=null,_.each(this.ui.input,function(e){var t=$(e);$.trim(t.val())&&t.addClass("filled"),t.closest(".readonly").get(0)&&!this.$form&&(this.$form=t.closest(".readonly").eq(0)),this.$form&&t.prop("disabled",!0)},this),_.each(this.ui.help,function(e){$.trim($(e).next(".g-tip").text())||$(e).hide()}),this.$form||(this.ui.switchEdit.hide(),this.ui.switchEdit.siblings("label").hide())}})}),define("global.radio.dialog",["i18n!nls/resources.min","global.model.dialog","global.view.dialog"],function(e,t,i){return new(Mn.Object.extend({channelName:"Notify",radioRequests:{"show:overlay":function(){var e=$("body").find(".g-dialog--overlay");e.get(0)||(e=$('<div class="g-dialog--overlay"></div>'),$("body").append(e)),e.show()},"hide:overlay":function(){$("body").find(".g-dialog--overlay").hide()},"uniq:dialog":function(e){throw"uniq:dialog, - see to callstack"},"once:dialog":function(e){var t=this.initDialog(e);return this.dialog=new i({model:t}),this.getChannel().request("add:dialog",this.dialog),this.listenTo(this.dialog,"toolbar:item:click",this.callToolsDialog),this.listenTo(this.dialog,"toolbar:input:keyup",this.callFilterDialog),this.listenTo(this.dialog,"container:select:item",this.treeSelectItem),this.dialog}},initDialog:function(e){var i=new t;return _.each(e,function(e,t){switch(t){case"tools":case"toolbar":i.get("toolbar").set(e);break;case"controls":case"footer":i.get("footer").set(e);break;default:i.set(t,e)}}),i},treeSelectItem:function(e){if(!this.dialog.getChildView("toolbar"))return this;this.editableView=e;var t=this.dialog.getChildView("toolbar");if(t.collection.length){var i=t.collection.get("add"),n=t.collection.get("rename"),o=t.collection.get("clear");t.children.findByModel(i).$("span").removeClass("disabled"),"-1"!==e.model.id?(t.children.findByModel(n).$("span").removeClass("disabled"),t.children.findByModel(o).$("span").removeClass("disabled")):(t.children.findByModel(n).$("span").addClass("disabled"),t.children.findByModel(o).$("span").addClass("disabled"))}},callToolsDialog:function(t){if(this.editableView)switch(t.model.id){case"add":this.editableView.showAddTemplate();break;case"rename":this.editableView.model.set("isEdit",!0);break;case"clear":if("-1"===this.editableView.model)return;Backbone.trigger("message:confirm",{title:e.askyousure,message:$.Format(e.deltext,"",this.editableView.model.get("title")),fx:function(){this.editableView.model.destroy()},ctx:this})}},callFilterDialog:function(e){var t=e.$("input").val().toLowerCase(),i=this.dialog.model.get("content").children?this.dialog.model.get("content"):this.dialog.model.get("content").getChildView("tree");!function e(i){i.children.each(function(i){var n=i.model;-1!==parseInt(n.id)&&(-1!==n.get("title").toLowerCase().indexOf(t)||n.has("nodes")?i.$el.show():i.$el.hide()),n.has("nodes")&&e(i.getChildView("tree"))})}(i)}}))}),define("global.radio.sideBar",[],function(){var e=Backbone.Model.extend({defaults:{view:null,nameView:"",title:""}}),t=Mn.CollectionView.extend({tagName:"ul",childView:Mn.View.extend({tagName:"li",template:_.template('<span class="<%- icon %>" title="<%- title %>"><%- title %></span>'),triggers:{click:"menu:item"}}),childViewTriggers:{"menu:item":"menu:item"}}),i=Mn.View.extend({el:".sidebar",template:!1,ui:{title:".current-title",name:".title"},regions:{list:{el:".list",replaceElement:!0}},events:{"click .control":function(){this.$el.toggleClass("expanded",function(e){this.isHide=!$(e).hasClass("expanded")}.bind(this))}},initialize:function(){this.model=new e,this.collection=new Backbone.Collection},modelEvents:{change:function(e){this.ui.name.text(this.model.get("title")),this.ui.title.text(this.model.get("nameView"))}},childViewEvents:{"menu:item":function(e){this.model.has("view")&&this.model.get("view").sideBarTrigger(e.model)}},collectionEvents:{reset:function(){}},onRender:function(){this.showChildView("list",new t({collection:this.collection}))}}),n=void 0;new(Mn.Object.extend({channelName:"sidebar",radioRequests:{open:function(e,t){return n.model.set(e),n.collection.reset(t),n}},radioEvents:{show:function(){n||(n=(new i).render()),n.$el.show()},reset:function(){n.model.set(n.model.defaults),n.collection.reset()},hide:function(){n||(n=(new i).render()),n.$el.hide()},close:function(){n.$el.removeClass("expanded")}}}))}),define("global.radio.loader",[],function(){var e=$('<i class="loading" size="xl" speed="medium"></i>'),t=$('<div class="g-dialog--overlay" style="display:block"></div>');return new(Mn.Object.extend({channelName:"loader",radioEvents:{show:function(i,n){var o=this;this.$el=i,this.$el.find(".loading").get(0)||(e.css("display","block"),n&&(_.has(n,"size")&&e.attr("size",n.size),_.has(n,"speed")&&e.attr("speed",n.speed),n.overlay&&i.append(t)),i.append(e),this.timeout=setTimeout(function(){var e=o.$el;e&&(e.find(".loading").remove(),e.find(".g-dialog--overlay").remove())},12e4))},hide:function(){var e=this.$el;e&&(e.find(".loading").remove(),e.find(".g-dialog--overlay").remove()),clearTimeout(this.timeout)}}}))}),define("app",["i18n!nls/resources.min"],function(e){return{Select:new(Backbone.Model.extend({defaults:function(){return{present:"3",query:null,list:null,page:1,detail:null,tab:0,sub:0,params:{id:-1}}},data:["query","list","page","detail","tab","sub"],initialize:function(){this.on("change:query",this.query,this),this.on("change:list",this.list,this),this.on("change:detail",this.detail,this),this.on("change:tab",this.detail,this),this.on("change:sub",this.detail,this),Backbone.on("balance:start",function(e){this.tickBalance=e},this),this.on("change",this.change,this)},fill:function(e){if(e)for(var t=e.split("/"),i=0;i<this.data.length;i++)this.set(this.data[i],t[i]||this.get(this.data[i]))},fullpath:function(){return this.get("present")+"|"+this.getpath()},getpath:function(){for(var e=[],t=0;t<this.data.length;t++){var i=this.get(this.data[t]);if(!$.trim(i))break;e.push(i)}return e.join("/")},query:function(){this.set("list",null)},list:function(){this.get("list")&&-1!==this.get("list").indexOf("=")?this.set("params",this.getObjectByParam(this.get("list"))):this.set("params",null),this.set({page:1})},detail:function(){this.checkMonitoring(),this.tickBalance&&(clearTimeout(this.tickBalance),this.tickBalance=null)},monitoring:{o:-1,f:null},checkMonitoring:function(){var e=parseInt(this.get("detail")),t=this.monitoring,i=(4===parseInt(this.get("tab"))||2===parseInt(this.get("tab")))&&0===parseInt(this.get("sub")),n=t.f!==i;t.o!==e&&(t.o=e,n=!0),n&&(t.f=i,require(["signalR"],function(){require(["/signalr/hubs"],function(){require(["/scripts/IWC-SignalR-master/signalr-patch.js","/scripts/IWC-SignalR-master/iwc-signalr.js"],function(){var t=SJ.iwc.SignalR.getHubProxy("Ticker",{client:{}});e&&setTimeout(function(){i?t.server.startMonitoringTasks($.ajaxSettings.url,e):t.server.stopMonitoringTasks($.ajaxSettings.url,e)},1e3)})})}))},change:function(){},getObjectByParam:function(e){if(!$.trim(e))return null;for(var t={},i=e.split("&"),n=0;n<i.length;n++){var o=i[n],s=o.split("=");t.hasOwnProperty(s[0])||(t[s[0]]=s[1])}return t}})),link:function(){var e=arguments[0],t=arguments[1]||"details",i=e.id;return location.pathname+"/files/"+t+"/"+i},prepare:function(e,t,i){var n=[],o=t||"systemName";return e.href,$.isArray(e)||(e=[e]),Array.from(e,function(e){var t={propType:{}};Array.from(e.data,function(e){t[e[o]]=e.value,t.propType[e[o]]=e.propType},this),t.href=e.href,n.push(t)},this),n},parse:function(t,i,n){var o=t;switch(i){case 2:o=n?new Date(t).toLocaleString():new Date(t).toLocaleDateString(e.Lang)}return o},Get:function(e){var t=e.items,i=t.length,n=new Backbone.Collection({data:[{name:"Display_Name",value:"Not found"}]});return i&&(n=new Backbone.Collection(t)),n},_param:function(e){var t="",i=[];for(var n in e)n&&(t=n+"="+e[n],i.push(t));return i.join("&")},check:function(e,t,i){if(this.access){var n="string"===$.type(e)?e:e.attr("data-id");if(!n)return!1;var o=-1!==this.access.indexOf(n);if(!t||!o)return o;$.cookie("hia")?t.call(i,$.cookie("hia")):$.ajax({url:"/api/common/0/"+n}).done(function(e){e&&(parseInt(e.data[0].value)&&t.call(i,e.data[1].value),$.cookie("hia",e.data[1].value,{expires:30,path:"/"}))}).fail(function(){$.Error(arguments[0])})}},show:function(e){var t=this;e.each(function(e,i){t.check($(i).attr("data-id"))?$(i).show():$(i).hide()})},navigate:function(e,t){var i=this.router||new Backbone.Router,n=!!t;i.navigate(e,{trigger:n})},get:function(){var e=location.hash,t=e.split("|"),i=t[1].split("?"),n=i[0],o=n.split("/");return this.fill(o)},collectUrl:function(e,t){var i=this.addParams(e,t,!0);if(-1===i[0].indexOf("?")&&-1===i[0].indexOf("=")){var n=i[1];i.splice(1,1),i[0]=i[0]+"?"+n}return i.join("&")},getContext:function(){return{key:$.ajaxSettings.url}},addParams:function(e,t){var i="";if(t&&-1!==t.indexOf("?")){var n=t.split("?");i=n[0],t=n[1]}var o=t?t.split("&"):[];for(var s in e){var l=s+"="+e[s];if(n=this.getParam(s,t)){var a=s+"="+n;o[o.indexOf(a)]=l}else o.push(l)}return(i?i+"?":"")+o.join("&")},getParams:function(e,t){var i=[e,""];if(t)for(var n=t.split("&"),o=0;o<n.length;o++){var s=n[o],l=s.split("=");if(l[0]===e)return l}return i},getParam:function(e,t){return this.getParams(e,t)[1]},parseHash:function(){var e={};if(location.hash){var t=location.hash,i=t.split("?");if(i.length>=2)for(var n=i[1].split("&"),o=0;o<n.length;o++){var s=n[o],l=s.split("=");e[l[0]]=l[1]}}return e}}}),define(["i18n!nls/resources.min"],function(e){function t(){new Date-n<s?setTimeout(t,s):(o=!1,Backbone.trigger("window:resizeend"))}function i(e){var t="ui-icon-info";switch(e){case"unknown":t="ui-icon-info";break;case"stopped":t="ui-icon-lightbulb";break;case"complited":t="ui-icon-check";break;case"created":t="ui-icon-pencil";break;case"processing":t="ui-icon-clock";break;case"invalid":t="ui-icon-trash"}return t}$.ajaxSetup({headers:{key:window.location.origin+window.location.pathname+window.location.search+encodeURIComponent(window.location.hash)},timeout:12e4,error:function(e,t){t},beforeSend:function(e,t){},complete:function(e){}}),$.xhrPool=[],$.xhrAbortAll=function(){$.xhrPool.map(function(e){e.abort()}),$.xhrPool=[]};var n=new Date(1,1,2e3,12,"00","00"),o=!1,s=200;$(window).resize(function(e,i){i&&$(i.element).hasClass("anbr-widget")||(n=new Date,!1===o&&(o=!0,setTimeout(t,s)))}),function(t){t.prepare=function(e,i){if(!e)return[];var n=[],o=i||"systemName";e.href;return t.isArray(e)||(e=[e]),Array.from(e,function(e){var t={propType:{}};Array.from(e.data,function(e){t[e[o]]=e.value,t.propType[e[o]]=e.propType},this),t.href=e.href,t.links=e.links,n.push(t)},this),n},t.Format=function(){for(var e="",t=0;t<arguments.length;t++){var i=arguments[t];if(0===t)e=i;else{var n="{"+(t-1)+"}";e=e.replace(n,i)}}return e},t.fn.showIndicator=function(){var e="_"+(new Date).getTime(),i=this.get(0)?{left:this.offset().left+this.width()/2,top:this.offset().top+this.height()/2}:{left:t(window).width()/2,top:t(window).height()/2};this.attr("loaderid")&&this.hideIndicator(),this.attr("loaderid",e),t("#Rotor").clone().attr("id",e).addClass("loader-indicator").appendTo("body").css(i).show(),setTimeout(function(){this.hideIndicator()}.bind(this),6e4)},t.fn.hideIndicator=function(e){t("#"+this.attr("loaderid")).remove(),this.removeAttr("loaderid")},t.mergeUrlParam=function(e,t){if(-1===e.indexOf("#")){var i=e.split("?"),n=[],o=i[1]?_.chain(i[1].split("&")).map(function(e){if(e)return e.split("=")}).compact().object().value():{},s=_.chain(o).extend(t).map(function(e,t){return t+"="+e}).value();return i[0]+"?"+s.join("&")}return i=e.split("#"),n=i[0].split("?"),o=n[1]?_.chain(n[1].split("&")).map(function(e){if(e&&-1!==e.indexOf("="))return e.split("=")}).compact().object().value():{},s=_.chain(o).extend(t).map(function(e,t){return t+"="+e}).value(),n[0]+"?"+s.join("&")+"#"+i[1]},t.Error=function(e){},t.GetData=function(e){var i={};return e.find("input:not(.ignore)").each(function(){if(t(this).attr("name"))if("checkbox"===t(this).attr("type"))i[t(this).attr("name")]=t(this).prop("checked");else if("radio"===t(this).attr("type"))t(this).prop("checked")&&(i[t(this).attr("name")]=t(this).val());else if(t(this).hasClass("Timepicker")||t(this).hasClass("datepicker")){var e=t(this).datetimepicker("getDate");i[t(this).attr("name")]=null!==e?e.toISOString():null}else t(this).hasClass("ejdatepicker")?i[t(this).attr("name")]=t.ToISO(t(this).data("ejDatePicker").getValue()):t(this).hasClass("ejtimepicker")?i[t(this).attr("name")]=t.ToISO(t(this).data("ejTimePicker").getValue()):i[t(this).attr("name")]=t(this).val()}),e.find("select:not(.ignore)").each(function(){t(this).is(":visible")&&(i[t(this).attr("name")]=t(this).val())}),e.find("textarea:not(.ignore)").each(function(){t(this).is(":visible")&&(i[t(this).attr("name")]=t(this).val())}),i},t.MarkErrorForm=function(e,t){this.$el.hideIndicator(),this.$("#info").text(""),this.$("input").css("border-color",""),_.each(t,function(e){e.text&&this.$("#info").text(e.text),this.$("[name='"+e.name+"']").css("border-color","red")},this)},t.GenQuery=function(e,i,n){var o={"ё":"е","и":"й","е":"ё","й":"и"},s=function(e){for(var t="",i=0;i<e.length;i++)t+=o[e.charAt(i)]||e.charAt(i);return t},l=new RegExp("^"+t.ui.autocomplete.escapeRegex(e.term),"i"),a={lit:e.term,name:n};t.ajax({url:"/api/Dictionary/ByName/",dataType:"json",data:a,error:function(e,i){t.Error(i)},success:function(e){i(t.grep(e.data,function(e){return e=e.label||e.value||e,l.test(e)||l.test(s(e))}))}})},t.addIcon=function(e,n){var o=e.closest("div").find("span.TreeElementTitle span"),s=i(n.status),l="severity"+n.severity;if(o.get(0)){if(o.attr("title")!==n.state){var a=e.closest("div").find("span.TreeElementTitle"),c="severity"+n.severity;l=a.attr("data-pc"),nicon_class=i(n.status),o.removeClass(s).addClass(nicon_class).attr("data-ic",nicon_class).attr("title",n.state),s=o.attr("data-ic"),a.removeClass(l).addClass(c)}}else o=t("<span class='ui-icon ui-corner-all "+s+"' title='"+n.state+"' data-ic='"+s+"'></span><span>"+n.state+"</span>"),e.closest("div").find("span.TreeElementTitle").addClass(l).attr("data-pc",l).append(o)},t.ToISODateOnly=function(e){function t(e){return e<10?"0"+e:e}return e.getFullYear()+"-"+t(e.getMonth()+1)+"-"+t(e.getDate())+"T00:00:00Z"},t.ToISO=function(t){if(t){if(!isNaN(Date.parse(t))&&new Date(t).toISOString()===t)return t;if(-1!==t.indexOf(":")){var i=t.split(":"),n=new Date;return n.setHours(parseInt(i[0])),n.setMinutes(parseInt(i[1])),n.toISOString()}if("ru-RU"!==e.Lang)return new Date(t).toISOString();var o=t.split("."),s=o[1]+"/"+o[0]+"/"+o[2];return isNaN(Date.parse(s))?(console.error("Дата ["+t+"] не валидна! - "+s),t):new Date(s).toISOString()}},t.parseDate=function(t){var i=t.split(" ");return Date.parse(i[0])?new Date(i[0]).toLocaleDateString(e.Lang):i[0]}}(jQuery)}),define("c/EdgeView",["includeModules","i18n!nls/resources.min"],function(e,t){function i(e){var t=location.pathname.split("/").filter(function(t){return-1!==t.indexOf(e)});if(t.length)return t[0];var i=location.search.substring(1).replace(/%2f/g,"/");return-1!==i.indexOf("returnUrl")&&(t=i.split("/").filter(function(t){return-1!==t.indexOf(e)})),t.length?t[0]:(t=i.split("&").filter(function(t){return-1!==t.indexOf(e)}),t.length?t[0].split("=")[1]:0)}function n(e){var t=i("lang")||"lang-ru-RU",n=i("db")||"db0",o=e.get("Url");if(-1===o.indexOf("http")||-1===o.indexOf("https")){var s=o.replace("{lang}",t);s=-1===o.indexOf("{db}")?s+"?db="+n:s.replace("{db}",n),e.set("Url",s)}}var o=Mn.CollectionView.extend({className:"default-start-tabs",childView:Mn.View.extend({tagName:"a",template:_.template("<%= GroupTitle %>"),triggers:{click:"change:module"},onRender:function(){this.model.has("active")&&this.$el.addClass("active"),this.$el.attr("href","#"),this.model.get("Edges")&&this.triggerMethod("add:edges",this.model.get("Edges"))}}),childViewOptions:function(e,t){t||e.set("active",!0)},childViewTriggers:{"add:edges":"add:edges","change:module":"change:module"}}),s=Mn.CollectionView.extend({tagName:"ul",childView:Mn.View.extend({tagName:"li",template:_.template('<a href="<%= Url %>" class="btn-start btn-start--<%= Code %>" target="_blank"><%= Title %></a>'),triggers:{"click a":{event:"edge:collapse",preventDefault:!1}}}),childViewOptions:function(e){n(e)},childViewTriggers:{"edge:collapse":"edge:collapse"}});return Mn.View.extend({className:"default-start-nav collapsed",template:"#edge-block-template",templateContext:{Resources:t},events:{"touchstart .default-start-nav-path":"defaultNav","click .default-start-nav-path":"defaultNav","touchstart .default-start-nav-close":"startNav","click .default-start-nav-close":"startNav"},defaultNav:function(){var e=i("lang")||"lang-ru-RU",t=i("db")||"db0";location.href="db0"===t?"/"+e+"/home/main":"/"+e+"/"+t+"/home/main"},startNav:function(){if("ABS\\Demo01"==$("#InfoUser").text())return void(location.href="/");this.$el.hasClass("collapsed")?this.$el.animate({height:376,width:570},150,function(e){this.$el.addClass("expanded").removeClass("collapsed"),$("header").prepend('<div class="overlay"></div>')}.bind(this)):this.$el.hasClass("expanded")&&this._collapse()},regions:{tabs:{el:".default-start-tabs",replaceElement:!0},modules:".default-start-tabs-inner"},onRender:function(){this.showChildView("tabs",new o({collection:this.collection}))},_collapse:function(){this.$el.animate({height:44,width:44},150,function(e){this.$el.addClass("collapsed").removeClass("expanded"),$("div.overlay").remove()}.bind(this))},childViewEvents:{"edge:collapse":function(){this._collapse()},"add:edges":function(t){var i=_.filter(t,function(t){return t.Enabled&&-1!==e.indexOf(t.Code)});this.getRegion("modules").hasView()?this.getRegion("modules").attachHtml(new s({collection:new Backbone.Collection(i)}).render()):this.showChildView("modules",new s({collection:new Backbone.Collection(i)}))},"change:module":function(e){this.$(".default-start-tabs a.active").removeClass("active"),e.$el.addClass("active");var t=492*e._index;this.$(".default-start-tabs-inner").animate({left:t?"-"+t:0},400,"easeInOutBack")}}})});var ScheduleModel=Backbone.Model.extend({idAttribute:"UID",defaults:{UID:null,Title:"",TimeStartExecution:null,PointDateForSelection:null,Periodicity:1,WhichDaysOfWeek:[],Subscribers:"",SchedulingTaskType:0,State:1,EmailTopic:"",EmailBody:""},validate:function(e){var t=[];if($.trim(e.Title)||t.push("Title"),$.trim(e.TimeStartExecution)||t.push("TimeStartExecution"),$.trim(e.Subscribers)||t.push("Subscribers"),"3"===e.Periodicity){var i=[];for(var n in e)-1!==n.indexOf("Day_")&&e[n]&&i.push(parseInt(n.split("_")[1]));this.set("WhichDaysOfWeek",i)}if(this.set("Periodicity",parseInt(e.Periodicity)),t.length)return t}}),scheduleCollection=Backbone.Collection.extend({model:ScheduleModel,url:"/api/autoexecscheduling/items"});define("schedule",["RU","i18n!nls/resources.min"],function(e,t){var i=Mn.CollectionView.extend({childView:Mn.View.extend({template:_.template('<input type="checkbox" name="Day_<%- name %>" value="<%- id %>" id="d<%- id %>" class="g-form--checkbox"><label for="d<%- id %>"><%- title %></label>'),onRender:function(){this.$el.css({float:"left",width:"120px"}),this.$("input").prop("checked",this.model.get("checked"))}}),childViewOptions:function(e){e.set({checked:-1!==this.model.get("value").indexOf(e.id)})}}),n=Mn.CollectionView.extend({childView:Mn.View.extend({template:_.template('<input type="radio" name="<%- name %>" value="<%- id %>" class="g-form--radio" id="r<%- id %>" /><label for="r<%- id %>"><%- title %></label>'),onRender:function(){this.$("input").prop("checked",this.model.id===this.model.get("value"))},events:{"click input":function(){this.triggerMethod("click:radio",this.model)}}}),childViewOptions:function(e){e.set({name:this.model.get("name"),value:parseInt(this.model.get("value"))})}});return Mn.View.extend({template:"#case-schedule-item-template",templateContext:{Resources:t},regions:{period:".period",days:".days-block"},events:{"click .cancel, .close":function(){this.$el.hide()},"click .save":function(e){var t=$.GetData(this.$(".ScheForm:not(.digest)")),i=$.GetData(this.$(".digest")),n=JSON.parse(this.model.get("Data"));this.model.set("Data",JSON.stringify(Object.assign(n,i))),$(e.target).showIndicator(),this.model.save(t,{wait:!0,success:function(){$(e.target).hideIndicator()}})}},onChildviewClickRadio:function(e){if(3===e.id){var n=t.setlocal(),o=_.map([0,1,2,3,4,5,6],function(e){return{id:e,title:n.dayNames[e]}});this.showChildView("days",new i({model:new Backbone.Model({value:this.model.get("WhichDaysOfWeek")}),collection:new Backbone.Collection(o)}))}else this.getRegion("days").empty()},onRender:function(e){this.showChildView("period",new n({model:new Backbone.Model({name:"Periodicity",value:this.model.get("Periodicity")}),collection:new Backbone.Collection([{title:t.everyhour,id:1},{title:t.everyday,id:2},{title:t.everyweek,id:3}])}));var i=this.model.get("TimeStartExecution")?new Date(this.model.get("TimeStartExecution")):new Date;this.$(".ejtimepicker").ejTimePicker({locale:t.Lang,width:"100px",interval:10,value:i})}})}),define("export",["i18n!nls/resources.min"],function(e){return Mn.View.extend({template:"#case-export-template",templateContext:{Resources:e},save:function(e){e.$el.addClass("disabled").attr("data-icon","icon-loader");var t=$.GetData(this.$el),i=_.map(this.options.selected,function(e){return e.id});t.list=i,$.post({url:"/api/Export",data:$.param(t)}).always(function(t){e.$el.removeClass("disabled").removeAttr("data-icon"),this.triggerMethod("show:message",t)}.bind(this))}})}),define("import",["i18n!nls/resources.min","global.view.dropDown"],function(e,t){return Mn.View.extend({template:"#case-import-template",templateContext:{Resources:e},regions:{dd:"#exp-items"},initialize:function(){this.collection=new Backbone.Collection,this.collection.url="/api/Export"},onRender:function(){this.showChildView("dd",new t({collection:new Backbone.Collection})),this.collection.fetch({reset:!0})},collectionEvents:{reset:function(){this.getChildView("dd").collection.reset(this.collection.map(function(e){return{title:e.get("CDate"),id:e.get("ID")}}))}},save:function(e){var t=this.getChildView("dd").current;t.has("id")&&(e.$el.removeClass("disabled").attr("data-icon","icon-loader"),$.post({url:"/api/export/transferdata",data:$.param({ID:t.id,CDate:t.get("title")})}).always(function(t){e.$el.removeClass("disabled").removeAttr("data-icon"),this.triggerMethod("show:message",t)}.bind(this)))}})}),define("factdigest",["i18n!nls/resources.min","schedule","RU"],function(e,t,i){var n=Backbone.Model.extend({defaults:{id:null,TitleTop:"",TitleMiddle:"",TitleBottom:"",PointDateForSelection:(new Date).toString()}});return Mn.View.extend({template:"#case-factdigests-template",templateContext:{Resources:e},events:{"change #show-sche":function(e){$(e.target).prop("checked")?this.showChildView("sche",new t({model:new ScheduleModel})):this.getRegion("sche").empty()},"blur input":function(){if(this.getRegion("sche").hasView()){var e=this.getChildView("sche").model;e.set($.GetData(this.$(".sche-container"))),e.isValid()&&(this.$("input").each(function(){$(this).css("border-color","")}),this.$(".next").removeClass("disabled"),this.$(".next").find("span.loader").remove())}}},regions:{sche:".sche-container"},initialize:function(){this.model=new n},onRender:function(){this.$("input[name='PointDateForSelection']").ejDatePicker({locale:e.Lang,buttonText:e.Today,value:new Date(this.model.get("PointDateForSelection")).toLocaleDateString(e.Lang)});var t=this.options.selected[0];t?this.$("#objForFactDigest").html(t.get("display_name")+"&nbsp;-&nbsp;<i>"+t.get("typename")+"</i>"):this.triggerMethod("show:message",e.noselect)},save:function(e){if(this.$("input").each(function(){$(this).css("border-color","")}),this.model.set($.GetData(this.$el)),this.getRegion("sche").hasView()){var t=this.getChildView("sche").model;if(t.set($.GetData(this.$(".sche-container"))),!t.isValid())return _.each(t.validationError,function(e){this.$("input[name='"+e+"']").css("border-color","red")},this),this;t.set("SchedulingTaskType",2),this.model.set("SchedulingTaskData",t.toJSON())}e.$el.addClass("disabled").attr("data-icon","icon-loader"),$.ajax({method:"POST",contentType:"application/json; charset=utf-8",url:"/api/export/genfactdigest/"+this.options.selected[0].id,data:JSON.stringify(this.model.toJSON())}).always(function(t){e.$el.removeClass("disabled").removeAttr("data-icon"),this.triggerMethod("show:message",t)}.bind(this))}})}),define("docdigest",["i18n!nls/resources.min","schedule","g/tree","c/searchPanel","global.view.dialog"],function(e,t,i,n,o){var s=Backbone.Model.extend({defaults:{id:null,TitleTop:"",TitleMiddle:"",TitleBottom:"",SelectedObjectsForKeyPhrases:[],Sources:[]}});return Mn.View.extend({template:"#case-docdigest-template",templateContext:{Resources:e},ui:{req:"#sel-request",keys:".selected-key-obj"},regions:{sche:".sche-container",sd:"#choose-dialog"},initialize:function(){this.model=new s({Sources:this.collection.pluck("object_id")})},onRender:function(){},events:{"change #show-sche":function(e){$(e.target).prop("checked")?this.showChildView("sche",new t({model:new ScheduleModel})):this.getRegion("sche").empty()},"click input[value=a]":function(){this.model.set("Sources",this.collection.pluck("id")),this.ui.req.html("")},"click input[value=b]":function(){var t={title:e.selectRequest,color:"blue",controls:[],tools:[],content:new i({collection:new Backbone.Collection,node:{checkbox:!1}}),zindex:1e3};t.content.collection.url="/api/request",t.content.collection.fetch({reset:!0});var n=Backbone.Radio.channel("Notify").request("once:dialog",t);this.listenTo(n,"container:select:item",function(e){e.model.get("isdoc")&&(this.model.set("Sources",[e.model.id]),this.ui.req.html(" - [ <b>"+e.model.get("title")+"</b> ]"),n.$el.hide())}.bind(this))},"blur input":function(){if(this.getRegion("sche").hasView()){var e=this.getChildView("sche").model;e.set($.GetData(this.$(".sche-container"))),e.isValid()&&(this.$("input").each(function(){$(this).css("border-color","")}),this.$(".next").removeClass("disabled"),this.$(".next").find("span.loader").remove())}},"click .choose":function(){var t={title:e.selectingObj,color:"blue",toolbar:new Backbone.Collection([{id:"searchObj",className:"search",template:'<span class="g-form--input input-data"><input type="text" name="search-name" value="" class="g-form--input" placeholder="Enter keyword"/><i class="search rtl-1" name="search"></i></span>'},{id:"filterByType",className:"filter"}]),footer:new Backbone.Collection([{id:"save",title:e.save,className:"right blue"}]),content:new n({rig:this.options.rid,collection:new Backbone.Collection}),zindex:1e3};this.showChildView("sd",new o(t)),this.listenTo(o,"footer:button:click",function(i){if("save"===i.model.id){var n=t.view.collection;n.length?(this.model.set("SelectedObjectsForKeyPhrases",n.pluck("id")),this.ui.keys.html(n.pluck("title").join("; "))):this.ui.keys.html(e.noselect)}o.close()})}},save:function(t){if(this.$("input").each(function(){$(this).css("border-color","")}),this.model.set($.GetData(this.$el)),this.getRegion("sche").hasView()){var i=this.getChildView("sche").model;if(i.set($.GetData(this.$(".sche-container"))),!i.isValid())return Array.from(i.validationError,function(e){this.$("input[name='"+e+"']").css("border-color","red")},this),null;i.set("SchedulingTaskType",1),this.model.set("SchedulingTaskData",i.toJSON())}if(!this.model.get("Sources").length)return this.triggerMethod("show:message",e.warning+": <br/><small>"+e.notselected+" "+e.source.toLowerCase()+"</small>"),this;t.$el.addClass("disabled").attr("data-icon","icon-loader"),$.ajax({method:"post",contentType:"application/json; charset=utf-8",url:"/api/export/gendocsdigest",data:JSON.stringify(this.model.toJSON())}).always(function(i){t.$el.removeClass("disabled").removeAttr("data-icon"),this.triggerMethod("show:message",500===i.status?e.warning+": <br/><small>"+i.statusText+"</small>":i)}.bind(this))}})}),define("schetasks",["i18n!nls/resources.min","schedule","c/SimpleTableView","factdigest","docdigest"],function(e,t,i,n,o){return Mn.View.extend({template:"#case-schedules-template",templateContext:{Resources:e},regions:{list:".list-tasks",schedule:".item-sche",digest:".item-digest"},start:function(t){$.get("/api/autoexecscheduling/items/"+t.id+"/execute").done(function(){this.triggerMethod("show:message",e.success)}.bind(this))},clear:function(t){this.triggerMethod("show:message:confirm",{text:e.askyousure+"<br/><small>"+$.Format(e.deltext,e.scheTasks,t.get("Title"))+"</small>",fx:function(){t.destroy({wait:!0})},ctx:this})},enable:function(e){var t=e.collection.url+"/"+e.id+"/activate";e.set("State",1),$.ajax({method:"PUT",url:t,data:$.param({State:1})})},disable:function(e){var t=e.collection.url+"/"+e.id+"/deactivate";e.set("State",0),$.ajax({method:"PUT",url:t,data:$.param({State:0})})},
digest:function(e){this.curent!==e.id&&this.getRegion("schedule").empty(),1===e.get("SchedulingTaskType")?this.showChildView("digest",new o({model:new Backbone.Model(JSON.parse(e.get("Data"))),collection:this.collection})):this.showChildView("digest",new n({model:new Backbone.Model(JSON.parse(e.get("Data"))),collection:this.collection}))},schedule:function(e){this.curent!==e.id&&this.getRegion("digest").empty(),this.showChildView("schedule",new t({model:e}))},onChildviewTableRowCmd:function(e){this[$(event.target).attr("data-cmd")].call(this,e.model),this.curent=e.model.id},initialize:function(){this.collection=new scheduleCollection},onRender:function(){var t=new Backbone.Collection([{id:0,title:""},{id:1,title:e.title,width:"30%"},{id:2,title:e.type},{id:3,title:e.send},{id:4,title:e.tosend},{id:5,title:e.status},{id:7,title:""}]);this.showChildView("list",new i({collection:this.collection,rowTemplate:'<td><span data-cmd="start" data-icon="icon-next" title="<%= Resources.run %>"></span></td><td><span class="link" data-cmd="digest"><%= Title %></span>&nbsp;&nbsp;<span data-icon="icon-clock" data-cmd="schedule"></span></td><td><%= SchedulingTaskType==1?Resources.typeTask1:Resources.typeTask2 %></td><td><%= LastStartDateTime?new Date(LastStartDateTime).toLocaleString():"" %></td><td><%= NextStartDateTime?new Date(NextStartDateTime).toLocaleString():"" %></td><td><%= State?Resources.state1:Resources.state2 %>&nbsp;<% if(State){ %><span data-icon="icon-status--green" data-cmd="disable" title="<%= Resources.tostate1 %>"></span><% } else { %><span data-icon="icon-status--grey" data-cmd="enable" title="<%= Resources.tostate2 %>"></span><% } %></td><td><span data-cmd="clear" data-icon="icon-trash"></span></td>',head:t})),this.collection.fetch({reset:!0})}})}),define("c/BasketView",["i18n!nls/resources.min","global.model.dialog","global.view.dialog","global.grid.dataItemsView"],function(e,t,i,n){return i.extend({initialize:function(){Backbone.on("basket:add",this.add,this),this.collection=new Backbone.Collection,this.collection.url="/api/Cart/",this.model=new t({size:"full",header:{icon:"icon-case",manage:[{id:"close"}]},autoOpen:!1,title:e.basket,toolbar:new Backbone.Collection([{id:"export",className:"export",title:e.export},{id:"import",className:"import",title:e.import},{id:"factdigest",className:"fact",title:e.wizarddigest+" : "+e.factDigest},{id:"docdigest",className:"doc",title:e.wizarddigest+" : "+e.docDigest},{id:"schetasks",className:"task",title:e.scheTasks},{id:"clear",className:"clear",title:e.clearSelected},{id:"erase",className:"erase right",title:e.clearBasket}]),content:new n({collection:this.collection,hideButton:!0})})},onBeforeRender:function(){this.collection.fetch({reset:!0})},onChildviewAfterLoad:function(t){this.model.set("title",e.basket+" ("+t+")"),this.triggerMethod("update:case",t)},onChildviewToolbarItemClick:function(t){var n=t.model.id,o=this.getChildView("content").getChildView("table");_.isFunction(this[n])?this[n]():o.modelsSelected||"export"!==n&&"factdigest"!==n?require([n],function(n){var s=new i({title:t.model.get("title"),content:new n({collection:o.getChildView("body").collection,selected:o.modelsSelected}),toolbar:new Backbone.Collection,footer:new Backbone.Collection([{title:e.next,id:"save",className:"right next"}])});this.hasRegion("action")||(this.ui.content.append('<div class="action-container"></div>'),this.addRegion("action",".action-container")),this.showChildView("action",s)}.bind(this)):this.getChildView("notify").showNotify(e.selectobj)},onChildviewFooterButtonClick:function(e){var t=this.getChildView("action").model.get("content"),i=t[e.model.id];i&&"function"==typeof i&&i.call(t,e)},erase:function(){var t=this.getChildView("content").getChildView("table").getChildView("body").collection,i=this.getChildView("notify");t.length?i.showConfirm(e.sure+"<br/><small>"+e.clearall+"?</small>",function(){this.getRegion("action").empty(),$.get("/api/Cart/Clear/0").done(function(){this.collection.fetch({reset:!0})}.bind(this))}.bind(this)):i.showNotify(e.selectobj)},clear:function(){var t=this.getChildView("content").getChildView("table").modelsSelected,i=this.getChildView("notify");t&&t.length?i.showConfirm(e.sure+"<br/><small>"+e.confirmObjDelete.replace("{0}",t.length)+"</small>",function(){this.getRegion("action").empty();var e=_.map(t,function(e){return e.id});$.ajax({method:"DELETE",url:"/api/Cart",contentType:"application/json; charset=utf-8",data:JSON.stringify({IDs:e})}).done(function(){this.collection.fetch({reset:!0})}.bind(this))}.bind(this)):i.showNotify(e.selectobj)},add:function(e){var t=this.getChildView("content").getChildView("table").getChildView("body").collection,i=_.filter(e,function(e){return!t.get(e.toString())},this),n=new Backbone.Model({id:null,IDs:[]});n.url="/api/Cart",i.length&&n.save({IDs:i},{success:function(){this.collection.fetch({reset:!0})}.bind(this)})}})}),define("MessageView",["app","i18n!nls/resources.min"],function(e,t){var i="<b><%= title %></b><div><%= message %></div>",n=["86056534-0DCB-48CF-B06D-3E8D23FD5001"];return new(Backbone.View.extend({el:$("#message-area"),events:{"click .icon-close":"close","click .btn-exec":"_execConfirm","click .btn-cancel":"close"},initialize:function(){Backbone.on("message:hide",this.hide,this),Backbone.on("message:modal",this.modal,this),Backbone.on("message:warning",this.warning,this),Backbone.on("message:success",this.success,this),Backbone.on("message:exec",this.exec,this),Backbone.on("message:confirm",this.confirm,this),this.render()},render:function(){return this.$el.html('<div id="info"></div><div id="sho"><div class="container"></div></div>'),$("body").on("click",function(){this.$("#info").hide()}.bind(this)),this},close:function(){this.$("#sho").hide()},exec:function(e){if(-1!==n.indexOf(e.sid)){var i=t.confirmObjDelete.replace("{0}",e.amount);this.confirm({title:t.warning,message:i,fx:e.fx,ctx:e.ctx})}else{var o=e.fx.call(e.ctx);o&&this.success({title:o.title,message:o.message})}return this},show:function(e,t){switch(e){case"modal":t.cancelBtn||(t.cancelBtn=!1),this.$(".container").html(_.template('<div class="message"><% if(cancelBtn) { %><span class="dropdown-menu_close"><svg class="icon icon-close"><use xlink: href="#icon-close"></use></svg></span><% } %><b><%= title %></b><p class="message-text"><%= message %></p><div class="sk-cube-grid"><div class="sk-cube sk-cube1"></div><div class="sk-cube sk-cube2"></div><div class="sk-cube sk-cube3"></div><div class="sk-cube sk-cube4"></div><div class ="sk-cube sk-cube5"></div><div class="sk-cube sk-cube6"></div><div class ="sk-cube sk-cube7"></div><div class="sk-cube sk-cube8"></div><div class ="sk-cube sk-cube9"></div></div></div>')(t)),this.$("#sho").removeClass("nobg"),this.$("#sho").show();break;case"confirm":this.confirm(t);break;case"success":this.success(t);break;case"warning":this.warning(t)}return this},modal:function(e){e||(e={title:t.wait2,message:t.message}),this.show("modal",e)},warning:function(e){this.success(e),this.$("#info b").addClass("state-error")},success:function(e){e.title||(e.title=t.alert);var n=this.storage!==e.message;n&&(this.storage=e.message),this.$("#info").is(":hidden")?(n&&this.$("#info").html(_.template(i)(e)),this.$("#info").show("slide",{direction:"right"}),this.$("#info").delay(7e3).hide("slide",{direction:"right"})):n&&this.$("#info").append(_.template(i)(e))},_execConfirm:function(){this.execConfirm.call(this.contextConfirm),this.hide()},confirm:function(e){var i=$("body").children().last();return this.$el.insertAfter(i),this.$(".container").html(_.template('<div class="message"><span class="dropdown-menu_close"><svg class="icon icon-close"><use xlink:href="#icon-close"></use></svg></span><b><%= title %></b><div class="message-text"><%= message %></div><div><button class="btn-exec"><%= textBtnExec %></button>&nbsp;<button class="btn-cancel"><%= Resources.cancel %></button></div></div>')({Resources:t,title:e.title,message:e.message,textBtnExec:e.titleExec||t.deleteItem})),this.$("#sho").addClass("nobg").show(),this.execConfirm=e.fx,this.contextConfirm=e.ctx,!1},hide:function(){return this.$("#sho").hide(),this}}))}),define("ModeInfoView",["i18n!nls/resources.min","access"],function(e,t){t.data.Points;return Mn.View.extend({template:!1,onRender:function(){}})}),define("global.view.headerView",["access","i18n!nls/resources.min","MessageView","c/AlertsView","c/EdgeView","c/BasketView","global.radio.dialog"],function(e,t,i,n,o,s){var l=Mn.Object.extend({initialize:function(){this.collection=new Backbone.Collection,this.collection.url="/api/common/0/"+this.options.guid}});return Mn.View.extend({template:!1,el:"header",ui:{casebtn:".case-block",casenum:".badge",logo:".logo",info:".info-block"},regions:{edge:{el:"#edge",replaceElement:!0},alert:{el:".alert-block",replaceElement:!0},case:"#case-window"},events:{"click #InfoDB":"show","click #InfoUser":"show",mouseleave:"hide","click @ui.casebtn":function(){this.getChildView("case").$el.show()},"click @ui.logo":function(){Backbone.history.navigate("",{trigger:!0})},"click @ui.info":function(){this.showDemoInfo()}},initialize:function(e){this.storage=[],this.currentid=""},onRender:function(){this.ui.casebtn.get(0)&&this.showChildView("case",new s),this.showChildView("alert",new n),this.options.isDemo?this.ui.casebtn.hide():this.showChildView("edge",new o({collection:new Backbone.Collection(e.data.Edges)}));var t="FE195E4A-CAAD-4987-A1E8-2788F1796F95",i=new l({guid:t});e.data.Points&&-1!==e.data.Points.indexOf(t)&&i.collection.fetch({reset:!0,success:function(e,t){this.demoInfoContent=t.data[1].value,this.demoTs=t.data[2].value,t&&parseInt(t.data[0].value)&&!$.cookie("DemoMode_"+this.demoTs)&&$.trim(this.demoInfoContent)&&this.showDemoInfo()}.bind(this)})},showDemoInfo:function(){var e=_.template('<input type="checkbox" <% if(checked){ %>checked="checked"<% } %> class="g-form--checkbox" name="dontshow" id="hidemenow"><label for="hidemenow"><%- Resources.noMoreView %></label>')({Resources:t,checked:$.cookie("DemoMode_"+this.demoTs)}),i=Backbone.Radio.channel("Notify").request("once:dialog",{title:t.information,content:$.trim(this.demoInfoContent)?this.demoInfoContent:t.N,footer:[{id:"cbx",template:e}]});this.listenTo(i,"dialog:closed",function(){i.getChildView("footer").children.findByIndex(0).$("input[name='dontshow']").prop("checked")?$.cookie("DemoMode_"+this.demoTs,"nomore",{expires:30}):$.cookie("DemoMode_"+this.demoTs,"")})},onChildviewUpdateCase:function(e){this.ui.casenum.text(e),e&&(this.ui.casebtn.addClass("action--blink"),setTimeout(function(){this.ui.casebtn.removeClass("action--blink")}.bind(this),2e3))},hide:function(){this.currentid&&this.$("#"+this.currentid).next("div").removeClass("active")},show:function(e){var t=$(e.target).closest("span");this.currentid=t.attr("id"),this.close(),-1===this.storage.indexOf(this.currentid)&&this.storage.push(this.currentid),t.next("div").addClass("active")},close:function(){_.each(this.storage,function(e){e!==this.currentid&&this.$("#"+e).next("div").removeClass("active")},this)}})}),define("Feedback",["i18n!nls/resources.min"],function(e){return Mn.View.extend({className:"g-dialog--wrapper",el:"#feedback-alerts-panel",template:_.template('<div class="g-dialog--header">\n        <div class ="g-dialog--title" data-icon="icon-attention"><%-Resources.alert %></div>\n        <div class="g-dialog--manage">\n            <i class="close"></i>\n        </div>\n    </div>\n    <div class="g-dialog--container">\n        <div class ="g-dialog--content"><%= html %></div>\n        <div class="g-dialog--sidebar"></div>\n    </div>'),templateContext:{Resources:e},events:{"click .close":function(){this.$el.hide()}},onRender:function(){window.sendresult=this.send.bind(this),window.SetResult=this.send.bind(this),window.SetSubResult=this.send.bind(this),window.captcha=function(){var e=$.trim(this.$("input[type=text]").val());e&&this.send(e)},this.$el.show()},send:function(e){var t={result:e},i={modelid:this.model.id,modeltypeid:this.model.get("typeid")};SJ.iwc.SignalR.getHubProxy("Ticker",{client:{}}).server.sendMessage(t,i.modelid,i.modeltypeid),this.model.collection&&this.model.collection.remove(this.model),this.$el.hide()}})}),define("c/AlertsView",["i18n!nls/resources.min","Feedback"],function(e,t){new(Mn.Object.extend({channelName:"Ale"}));var i=Mn.View.extend({tagName:"li",template:_.template('<span><%- title %></span><i class="erase"></i>'),triggers:{"click span":"click:message"},events:{"click .erase":function(e){e.stopPropagation(),this.model.collection.remove(this.model),SJ.iwc.SignalR.getHubProxy("Ticker",{client:{}}).server.sendMessage({result:null},this.model.id,1)}},onRender:function(){"red"===this.model.get("Status")&&this.$el.addClass("alert-red"),"blue"===this.model.get("Status")&&this.$el.addClass("alert-blue");var e=Backbone.Radio.channel("oM").request("get:app");e&&-1!==e.Tasks.indexOf(this.model.get("taskUID"))&&this.triggerMethod("click:message",this)}}),n=Mn.CollectionView.extend({tagName:"ul",childView:i,emptyView:Mn.View.extend({tagName:"li",template:_.template("<span><%- Resources.N %></span>"),templateContext:{Resources:e}}),childViewOptions:function(e){e.has("kind")&&e.get("kind"),e.has("state")&&e.get("state");switch(e.get("typeid")){case-1:e.set({Status:"none"});break;case 1:case 2:e.set({Status:"red"});break;case 3:e.set({Status:"blue"});break;default:e.set({Status:"none"})}},childViewTriggers:{"click:message":"click:message"}});return Mn.View.extend({tagName:"li",className:"tray--item alert-block",template:_.template('<span class="alert"></span><div class="alert--container"><div class="alert--header"><i class="close"></i><div><%= Resources.serverMessage %></div></div><div class="alert--list"></div></div>'),templateContext:{Resources:e},ui:{btn:".alert",header:".alert--header>div",container:".alert--container"},regions:{list:".alert--list"},events:{"click i.close":function(){this.ui.container.removeClass("active")},"click @ui.btn":function(){this.ui.container.toggleClass("active")}},initialize:function(){this.collection=new Backbone.Collection},onRender:function(){this.showChildView("list",new n({collection:this.collection}))},onAttach:function(){this.monitoring()},onChildviewClickMessage:function(e){e.model.get("html")?(this.feedback?this.feedback.model=e.model:this.feedback=new t({model:e.model}),this.feedback.render()):e.model.collection.remove(e.model)},collectionEvents:{reset:function(e){this.status()},update:function(e,t){this.status(),t.add&&(console.log("Ticker :: new message"),this.returnMessage()),this.sharedCollection.change(function(){return this.collection.models}.bind(this))}},status:function(){this.collection.length?(this.ui.btn.addClass("active"),this.ui.container.addClass("active"),this.ui.header.html(e.alertMessage)):(this.ui.btn.removeClass("active"),this.ui.container.removeClass("active"),this.ui.header.html(e.serverMessage))},returnMessage:function(){var e=SJ.iwc.SignalR.getHubProxy("Ticker",{client:{}});this.collection.each(function(t){e.server.returnValueSet("alertDelivery",t.get("eqID"),"1")})},monitoring:function(){SJ.iwc.SignalR.getHubProxy("Ticker",{client:{showAlerts:function(e){e.length&&this.collection.add(e)}.bind(this),acitiveAlerts:function(e){this.collection.each(function(t){t&&-1===e.indexOf(t.id)&&-1!==t.get("typeid")&&this.collection.remove(t)},this)}.bind(this),hideAlerts:function(e){var t=this.collection.get(e);this.collection.remove(t)}.bind(this),transferData:function(e,t,i){Backbone.Radio.channel("Ale").request("get:transfer:data",{data:e,kind:t})},ping:function(e){console.log("Ticker :: ping >> ",e)}}});this.sharedCollection=new SJ.iwc.SharedData("AlertMessages"),this.sharedCollection.onChanged(function(e){this.collection.set(e)},this);var e=this.sharedCollection.get();null!==e&&e.length?e.length&&this.collection.set(e):this.sharedCollection.set(this.collection.models)}})}),define("global.view.connect",["i18n!nls/resources.min","access"],function(e,t){var i=Backbone.Model.extend({defaults:function(){return{id:null,title:""}}}),n=Backbone.Collection.extend({model:i}),o=Backbone.View.extend({tagName:"option",render:function(){return this.$el.attr("value",this.model.id),this.$el.html(_.template("<%= title %>")(this.model.toJSON())),this}}),s={Internet:{Start:{cmd:"works",to:"WorkGroups"},WorkGroups:{cmd:"projects",to:"Projects"},Projects:{cmd:"datas",to:"Connects"},Connects:{cmd:"connect"}},Intranet:{Start:{cmd:"works",to:"WorkGroups"},WorkGroups:{cmd:"datas",to:"Connects"},Connects:{cmd:"connect"}}},l={};return Mn.View.extend({className:"authorisation-block",template:"#connect-template",templateContext:{Resources:e},ui:{},events:{"change select":"getData","click @ui.btn:not([data-icon=icon-loader])":"connect"},initialize:function(){this.collection=new n},onRender:function(){this.NetVersion=t.data.NetVersion||"Internet","Intranet"===this.NetVersion&&(this.$("label:eq(1)").hide(),this.$("#Projects").hide()),this.fetch("Start")},collectionEvents:{reset:function(e){var t=s[this.NetVersion][this.name].to,i=this.$("#"+t),n=$.cookie(t)||l[t];t?(Array.from(e.models,function(e){i.append(new o({model:e}).render().el)},this),i.val(n),this.fetch(t,n)):e.length&&this.triggerMethod("connect:made")},error:function(){}},getData:function(e){var t=$(e.target).val(),i=$(e.target).attr("id");$.ajaxSetup({timeout:3e4}),$.trim(t)?(this.fetch(i,t),$.cookie(i,t,{expires:30,path:"/"}),l[i]=t):this.reset(i)},reset:function(e){this.$("#"+e).nextAll("select").each(function(e,t){$(t).find(":not(option[value=''])").remove()})},fetch:function(e,t){var i=s[this.NetVersion][e];t&&(i.itemid=t),this.$("#Info").text(""),"Connects"===e&&(i.wgtitle=this.$("#WorkGroups option:selected").text(),i.wgid=this.$("#WorkGroups").val(),i.prgtitle=this.$("#Projects option:selected").text(),i.prgid=this.$("#Projects").val(),i.dbtitle=this.$("#Connects option:selected").text(),i.dbid=this.$("#Connects").val()),this.collection.url="/api/Authorise?"+$.param(i),this.reset(e),this.collection.fetch({reset:!0}),this.name=e},connect:function(){if(this.collection.length){var e=this.collection.at(0).get("title")||"/";this.triggerMethod("authorize:end",e)}}})}),define("c/ContextMenuView",[],function(){var e=Mn.CollectionView.extend({childView:Mn.View.extend({template:_.template('<%- title %><div class="_container"></div>'),className:"item",regions:{container:{el:"._container",replaceElement:!0}},events:{mouseover:function(e){if(this.model.get("child")&&this.model.get("child").length){var t=this.$(".g-context--container");$(window).width()-t.offset().left<t.width()&&this.$(".g-context--container").addClass("revert")}}},triggers:{click:"click:item"},onRender:function(){this.model.get("icon")&&this.$el.attr("data-icon","icon-"+this.model.get("icon")),this.model.get("status")&&this.$el.addClass(this.model.get("status")),this.model.get("cmd")&&("string"==typeof this.model.get("cmd")&&this.$el.attr("data-cmd",this.model.get("cmd")),"function"==typeof this.model.get("cmd")&&(this.cmd=this.model.get("cmd"))),this.model.get("child")?(this.$el.addClass("haskids"),this.showChildView("container",new e({collection:new Backbone.Collection(this.model.get("child"))}))):this.$("._container").remove()},childViewTriggers:{"click:item":"click:item"}}),className:"g-context--container",childViewTriggers:{"click:item":"click:item"}});return Mn.View.extend({className:"g-context--menu",template:_.template('<div class="g-context--container"></div>'),regions:{container:{el:".g-context--container",replaceElement:!0}},onRender:function(){this.showChildView("container",new e({collection:this.collection}))},childViewTriggers:{"click:item":"menu:click:item"}})}),define("c/EditPanelView",["i18n!nls/resources.min"],function(e){return Mn.View.extend({className:"edit-panel",template:"#edit-panel-template",templateContext:{Resources:e},events:{"click span:not(.search)":function(e){e.stopPropagation(),this.trigger("edit-panel:action",$(e.target).closest("li"))},"keyup input[name='rubric-name']":function(e){e.stopPropagation(),13!==e.keyCode&&$.trim(this.$("input[name='rubric-name']").val())||this.trigger("edit-panel:action",this.$("i[name=search]"))},"click i.search":function(e){e.stopPropagation(),this.trigger("edit-panel:action",this.$("i[name=search]"))}},rere:function(){this.$("li:not([name='add'])").attr("disabled","disabled")},setCurrent:function(e){this.selectmodel=e,"-1"!==this.selectmodel.id?this.$("li").removeAttr("disabled"):this.$("li:not([name='add'])").attr("disabled","disabled"),this.selectmodel.has("isdoc")&&this.selectmodel.get("isdoc")&&this.$("li[name='add']").attr("disabled","disabled")},onRender:function(){var e=this.options.unvisible?this.options.unvisible.split(","):[];return _.each(e,function(e){$.trim(e)&&this.$("."+$.trim(e)).hide()},this),this}})}),define("g/files/UploadFileView",["i18n!nls/resources.min"],function(e){var t=Backbone.Model.extend({idAttribute:"FileUID",defaults:{FileUID:null,FilePath:"",CDate:(new Date).toISOString(),FileName:"",FileUrl:""}});return Mn.View.extend({className:"image-path",template:"#file-upload-template",templateContext:{Resources:e},ui:{form:"form",file:"input[name = fileToUpload]",pro:".progress",bar:".bar",per:".percent"},events:{"change @ui.file":function(e){var t=this.ui.file.val();if(this.ui.file.prev(".input").text(t),$.trim(t)){var i=this.ui.file.val().split("\\"),n=i[i.length-1];n.split(".");this.collection.find(function(e){return-1!==e.get("OriginalFileName").indexOf(n)})?this.$(".anbr-tooltip").show().delay(5e3).fadeOut():this.ui.form.submit()}}},initialize:function(){this.formAction=this.options.formAction||"/api/common/upload/"},indicator:function(e){this.ui.pro.show(),this.ui.bar.width(e),this.ui.per.html(e).show()},onRender:function(){this.ui.form.attr("action",this.formAction),this.ui.bar.width(0),this.ui.per.html("0%"),this.ui.file.val(""),this.ui.form.ajaxForm({beforeSend:function(){this.indicator("0%")}.bind(this),uploadProgress:function(e,t,i,n){this.indicator(n+"%")}.bind(this),success:function(){this.indicator("100%")}.bind(this),error:function(){this.$(".anbr-tooltip").html('<span position="bottom"></span>'+e.error+" Server errror.").show().delay(5e3).fadeOut(),this.onFinal()}.bind(this),complete:function(i){_.map(i.responseJSON,function(e){if(-1!==e.indexOf("error"))return this.$(".anbr-tooltip").html('<span position="bottom"></span>'+e.replace("error","")).show().delay(5e3).fadeOut(),void this.onFinal();if(e.Message)return this.$(".anbr-tooltip").html('<span position="bottom"></span>'+e.Message).show().delay(5e3).fadeOut(),void this.onFinal();var i=e.split("/"),n=i[i.length-1],o=n.substr(n.indexOf("_")+1),s=n.split("_")[0],l=new t({FileUID:s,FilePath:e,FileUrl:e,FileName:o,OriginalFileName:o});this.collection.add(l)},this),this.ui.file.val(""),this.$(".input").text(e.selFile),this.onFinal()}.bind(this)})},onFinal:function(){setTimeout(function(){this.ui.bar.width(0),this.ui.per.html("0%"),this.ui.pro.hide()}.bind(this),1e3)}})}),define("g/ImageGalleryView",["i18n!nls/resources.min","g/files/UploadFileView"],function(e,t){var i=Backbone.Model.extend({idAttribute:"FileUID"}),n=Mn.CollectionView.extend({className:"image-gallery",childView:Mn.View.extend({tagName:"span",template:_.template('<i data-icon="icon-trash"></i><img src="<%- FileUrl %>" alt="" title="<%- OriginalFileName %>"  />'),events:{'click i[data-icon="icon-trash"]':function(){Backbone.trigger("message:confirm",{title:e.askyousure,message:e.confirmDeleteImg,fx:function(){this.model.destroy()},ctx:this})},"click img":function(){var e=this.model.collection.findWhere({select:!0});e&&e.set("select",!1),this.model.set("select",!0),this.triggerMethod("change:item",this.model)}},modelEvents:{"change:select":function(e,t){t?this.$el.addClass("selected"):this.$el.removeClass("selected")}},onRender:function(){this.model.get("select")&&this.$el.addClass("selected")}}),childViewOptions:function(e){e.set("select",e.get("FileUrl")===this.options.select)},childViewTriggers:{"change:item":"change:item"}});return Mn.View.extend({className:"image-gallery-wrapper",template:_.template('<div class="image-path"></div><div class="image-gallery"></div>'),regions:{list:{el:".image-gallery",replaceElement:!0},path:{el:".image-path",replaceElement:!0}},initialize:function(){this.collection=new Backbone.Collection([],{model:i,comparator:function(e){return-new Date(e.get("CDate"))}}),this.collection.url="/api/common/files/"},onBeforeRender:function(){this.collection.fetch({reset:!0})},onRender:function(){this.showChildView("path",new t({collection:this.collection})),this.showChildView("list",new n({collection:this.collection,select:this.options.selectedImgPath}))},childViewTriggers:{"change:item":"change:item"}})}),define("c/SimpleTableView",["i18n!nls/resources.min","c/ContextMenuView"],function(e,t){var i=Mn.CollectionView.extend({tagName:"tr",childView:Mn.View.extend({tagName:"th",getTemplate:function(){return this.model.has("subTemplate")?_.template(this.model.get("subTemplate")):_.template("<%- title %>")},onRender:function(){this.model.get("width")&&this.$el.width(this.model.get("width"))}}),triggers:{"click input[type=checkbox] ~ label:not(.disabled)":"click:head:input"}}),n=Mn.View.extend({tagName:"tr",template:_.template('<td colspan="<%- colspan %>"><div class="paging-box"><div class="paginator"></div><div class="paginator_pages"><%- titlePages %>: <span><%- totalPages %></span></div></div><div class="context-menu" style="position:absolute;display:none;z-index:100;"></div></td>'),templateContext:{titlePages:e.Pages2},ui:{menu:".context-menu",box:".paging-box"},regions:{menu:"@ui.menu"},events:{"mouseenter @ui.menu":function(e){this.ui.menu.clearQueue()},"mouseleave @ui.menu":function(e){this.ui.menu.delay(300).hide(100)},"click @ui.box a":function(e){e.preventDefault(),this.triggerMethod("page:select",$(e.target).text())}},childViewTriggers:{"menu:click:item":"menu:click:item"},modelEvents:{"change:currentPage":function(e,t){},"change:totalPages":function(e,t){parseInt(t)<=1?this.ui.box.hide():this.ui.box.show()}},onRender:function(){this.ui.box.hide(),this.showChildView("menu",new t({collection:this.collection}));var e=this.model;if(parseInt(e.get("totalPages"))>1){this.ui.box.show(),this.$(".paginator_pages>span").text(e.get("totalPages"));var i="paginator_"+this.cid;this.$(".paginator").attr("id",i),new Paginator(i,e.get("totalPages"),e.get("pageSize"),e.get("currentPage"))}else this.ui.box.hide()}}),o=Mn.CollectionView.extend({tagName:"tbody",emptyView:Mn.View.extend({tagName:"tr",template:_.template('<td colspan="<%- colspan %>"><%- title %></td>')}),childView:Mn.View.extend({tagName:"tr",getTemplate:function(){return _.template(this.options.rowTemplate)},templateContext:function(){var t={Resources:e};return Object.assign(t,this.options.rowOptions),t},events:{mouseleave:function(){this.triggerMethod("hide:menu")},"click button.menu":function(e){this.$el.addClass("ui-selected"),this.triggerMethod("menu:show",this.model,$(e.target).closest("button"))},"click a":function(e){e.stopPropagation()}},triggers:{"change input":"change:input:row","click *[data-cmd]":"click:row:cmd:item"},modelEvents:{change:function(e){this.render(),this.triggerMethod("model:changed",e)}},onRender:function(){this.model.has("checked")&&this.$("input[type=checkbox]").prop("checked",this.model.get("checked"))}}),emptyViewOptions:function(t){t.set({colspan:this.options.colspan,title:e.N})},childViewOptions:function(){return{rowTemplate:this.options.rowTemplate,rowOptions:this.options.rowOptions,colspan:this.options.colspan}},childViewTriggers:{"change:input:row":"change:input:row","click:row:cmd:item":"click:row:cmd:item","model:changed":"model:changed","menu:show":"menu:show","hide:menu":"hide:menu","check:rows:for:head":"check:rows:for:head"}});return Mn.View.extend({tagName:"table",className:"table table-hover",template:_.template("<thead><tr></tr></thead><tbody></tbody><tfoot></tfoot>"),regions:{head:{el:"thead tr",replaceElement:!0},body:{el:"tbody",replaceElement:!0},foot:"tfoot"},initialize:function(){this.currentPage=1},onRender:function(){this.options.head&&this.showChildView("head",new i({collection:this.options.head}));var e=$(this.options.rowTemplate).size();this.showChildView("body",new o({collection:this.collection,rowTemplate:this.options.rowTemplate,rowOptions:this.options.rowOptions,colspan:e})),this.showChildView("foot",new n({collection:this.options.menuCollection||new Backbone.Collection,model:new Backbone.Model({currentPage:0,pageSize:30,totalPages:0,colspan:e,collection:this.collection})}))},collectionEvents:{update:function(e,t){this.triggerMethod("table:collection:update",e,t)},reset:function(){if(this.triggerMethod("table:collection:reset",this.collection),this.getRegion("head").hasView()){var e=this.getChildView("head").$('input[type="checkbox"]').prop("checked");e&&this.collection.each(function(t){t.set("checked",e)})}var t=this.collection.get(0);if(t){this.collection.remove(t);var i=t.get("pageSize")||30,n=t.get("page")||parseInt(this.currentPage),o=Math.ceil(t.get("num")/i)}else o=0;this.getChildView("foot").model.set({currentPage:n,pageSize:i,totalPages:o}),this.getChildView("foot").render()},error:function(){}},childViewTriggers:{"change:input:row":"change:input:row","click:row:cmd:item":"table:row:cmd","model:changed":"table:row:model:changed"},onChildviewPageSelect:function(e){this.triggerMethod("page:select",e,this.collection)},childViewEvents:{"click:head:input":function(e){var t=e.$("input[type=checkbox]");t.prop("checked",!t.prop("checked")),this.collection.each(function(e){e.set("checked",t.prop("checked"))})},"check:rows:for:head":function(){this.getRegion("head").hasView()&&(this.collection.where({checked:!0}).length===this.collection.length?this.getChildView("head").$('input[type="checkbox"]').prop("checked",!0):this.getChildView("head").$('input[type="checkbox"]').prop("checked",!1))},"menu:click:item":function(e){this.getChildView("foot").getChildView("menu").$el.parent("div").hide(),e.cmd&&e.cmd.call(this,this.modelsSelected,e.model)},"hide:menu":function(){var e=this.getChildView("foot").getChildView("menu").$el.parent("div");e.is(":visible")&&e.delay(300).hide(100)},"menu:show":function(e,t){var i=this.getChildView("foot").getChildView("menu"),n=this.modelsSelected||[];if(_.findWhere(n,{id:e.id})||(this.modelsSelected=[e],this.$("tr.ui-selected").removeClass("ui-selected")),i.collection&&i.collection.length){var o=i.$el.parent("div"),s=t.position(),l=s.top,a=s.left,c=$(window).width()-o.width();o.clearQueue(),s.left+o.width()>c&&(a=c-o.width()-($("body").hasClass("ls-on")?120:5)),o.css({top:l,left:a}).slideDown()}}}})}),define("global.grid.dataItemsView",["app","i18n!nls/resources.min","c/ContextMenuView"],function(e,t,i){var n=Backbone.Model.extend({idAttribute:"object_id"}),o=Backbone.Collection.extend({model:n}),s=Mn.View.extend({className:"paging-box",template:_.template('<div class="paginator"></div><div class="paginator_pages"><%- Resources.Pages2 %>: <span><%- totalPages %></span></div>'),templateContext:{Resources:t},events:{"click a":function(e){e.preventDefault(),this.triggerMethod("page:select",$(e.target).text())}},onAttach:function(){var e="paginator_"+this.cid;this.$(".paginator").attr("id",e),new Paginator(e,this.model.get("totalPages"),this.model.get("paging").pageSize,this.model.get("paging").currentPage)}}),l=Mn.View.extend({tagName:"th",template:_.template("<%- displayName %>")}),a=Mn.View.extend({tagName:"tr",template:_.template('<td colspan="<%- numCols %>"><div class="context-menu" style="position:absolute;display:none;z-index:100;"></div></td>'),regions:{menu:".context-menu"},ui:{menu:".context-menu"},onRender:function(){this.showChildView("menu",new i({collection:this.collection}))},events:{"mouseenter .context-menu":function(e){this.ui.menu.clearQueue()},"mouseleave .context-menu":function(e){this.ui.menu.delay(300).hide(100)}},childViewTriggers:{
"hide:menu":"hide:menu","menu:click:item":"menu:click:item"}}),c=Mn.CollectionView.extend({tagName:"tr",childView:l,onRender:function(){this.addChildView(new l({model:new Backbone.Model({displayName:"№"})}),0),this.addChildView(new l({model:new Backbone.Model({displayName:""})}))}}),r=Mn.View.extend({tagName:"tr",getTemplate:function(){return _.template(this.options.bodyTemplate)},templateContext:{Resources:t},triggers:{mouseleave:"hide:menu","contextmenu td":"menu:show","click button.btn-link":"menu:show","click td":"row:col:trigger","click a":{event:"click:link",preventDefault:!1}},onRender:function(){this.$el.data("id",this.model.id)},modelEvents:{"change:State":function(e,t){this.$("td[data-name='state']").text(t)}}}),d=Mn.CollectionView.extend({tagName:"tbody",childView:r,emptyView:Mn.View.extend({tagName:"tr",className:"info",template:_.template('<td colspan="120">'+t.nodata+"</td>")}),collectionEvents:{remove:function(){this.triggerMethod("change:collection",this.collection)}},childViewOptions:function(e,i){if(!this.isEmpty()){var n=["","green","yellow","red","grey"],o=["",t.working,t.ff,t.tm,t.ar],s=parseInt(this.options.pagination.currentPage)*this.options.pagination.pageSize-this.options.pagination.pageSize+1;e.set({Num:i+s,StatusIcon:n[e.get("status")],state:o[e.get("state")]})}return{bodyTemplate:this.options.bodyTemplate}},onAttach:function(){this.$el.selectable({cancel:"a, button.btn-link, span",stop:function(){var e=[];this.$el.find("tr.ui-selected").each(function(t,i){e.push(this.collection.get($(i).data("id")))}.bind(this)),this.triggerMethod("stop:selectable",e)}.bind(this)})},childViewTriggers:{"menu:show":"menu:show","row:col:trigger":"row:col:trigger","click:link":"click:link"}}),h=Mn.View.extend({tagName:"table",className:"table inquiry table-hover list",template:_.template("<thead></thead><tbody></tbody><tfoot></tfoot>"),regions:{head:"thead",body:{el:"tbody",replaceElement:!0},footer:"tfoot"},collectionEvents:{reset:function(e){if(e.length){var t="<td><%- Num %></td>",i=e.at(0),n=i.has("feed")?new Backbone.Model(i.get("feed")):i,s=n.get("pagination"),l=_.filter(n.get("head"),function(e){if(e.isVisible){var i=e.systemName,n=this.options.path||Backbone.history.fragment||"";t+="display_name"===i||"title"===i?"<td data-name='"+i+"'><% if(href){ %><a href='#"+n+"/<%- object_id %>'><%- "+i+" %></a><% }else{ %><%- "+i+" %><% } %></td>":"status"===i?"<td data-name='"+i+"'><span class='status-icon <%- StatusIcon %>'></span><% if(dossier){ %><span data-icon='icon-note'></span><% } %></td>":"createddate"===i||"cdate"===i||"jobcdate"===i?"<td data-name='"+i+"'><%- Date.parse("+i+")? new Date("+i+").toLocaleString(Resources.Lang) : ''  %></td>":"<td data-name='"+i+"'><%- "+i+" %></td>"}return e.isVisible},this);this.options.hideButton?t+="<td class='controls'></td>":t+="<td class='controls'><button type='button' class='btn-link g-form--context'><svg><use xlink:href='#icon-burger-menu'></use></svg></button></td>",this.showChildView("head",new c({collection:new Backbone.Collection(l)})),this.showChildView("body",new d({collection:new o($.prepare(n.get("items"))),pagination:s,bodyTemplate:t})),this.showChildView("footer",new a({model:new Backbone.Model({numCols:l.length+2}),collection:this.options.menuCollection})),this.triggerMethod("list:init",s)}}},childViewTriggers:{"row:col:trigger":"row:col:trigger","change:collection":"change:collection","click:link":"click:link"},childViewEvents:{"menu:click:item":function(e){this.getChildView("footer").getChildView("menu").$el.parent("div").hide(),e.cmd&&e.cmd.call(this,this.modelsSelected,e.model)},"hide:menu":function(){var e=this.getChildView("footer").getChildView("menu").$el.parent("div");e.is(":visible")&&e.delay(300).hide(100)},"menu:show":function(e){var t=e.model,i=this.getChildView("footer").getChildView("menu"),n=this.modelsSelected||[];if(_.findWhere(n,{id:t.id})||(this.modelsSelected=[t],this.$("tr.ui-selected").removeClass("ui-selected")),e.$el.addClass("ui-selected"),i.collection&&i.collection.length){var o=i.$el.parent("div"),s=$(event.target).closest("td").position(),l=s.top+event.offsetY+$(".workbench--content").scrollTop(),a=s.left+event.offsetX,c=$(window).width()-o.width();o.clearQueue(),s.left+o.width()>c&&(a=c-o.width()-60),o.css({top:l,left:a}).slideDown()}},"stop:selectable":function(e){var t=_.compact(e);t.length&&(this.modelsSelected=t)}}});return Mn.View.extend({template:_.template('<table></table><div class="paging-box"></div>'),regions:{table:{el:"table",replaceElement:!0},paging:{el:".paging-box",replaceElement:!0}},onRender:function(){this.showChildView("table",new h(this.options))},onChildviewListInit:function(e){var t=Math.ceil(e.totalItems/e.pageSize);t>1?this.showChildView("paging",new s({model:new Backbone.Model({totalPages:t,paging:e})})):this.getRegion("paging").empty(),this.triggerMethod("after:load",e.totalItems)},onChildviewPageSelect:function(e){this.collection.url=$.mergeUrlParam(this.collection.url,{page:e}),this.collection.fetch({reset:!0})},childViewTriggers:{"row:col:trigger":"row:col:trigger","click:link":"click:link","change:collection":"change:collection","action:from:menu":"action:from:menu"}})});var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};define("global.view.dropDown",["i18n!nls/resources.min"],function(e){var t=Mn.View.extend({className:"item",template:_.template('<%- title %><div class="manage"></div>'),triggers:{click:"click:item","click .manage span":"click:cmd"},onRender:function(){this.model.has("icon")?this.$el.attr("data-icon",this.model.get("icon")):this.$el.attr("data-icon","icon-blank"),this.model.has("cmd")&&(this.$el.attr("tools",this.model.get("cmd").length),_.each(this.model.get("cmd"),function(e){this.$(".manage").append('<span class="'+e+'"></span>')},this))}}),i=Mn.CollectionView.extend({className:"g-dropdown--container",childView:t,events:{mouseenter:function(){this.$el.clearQueue()},mouseleave:function(){this.$el.delay(1e3).slideUp(150,function(){this.triggerMethod("container:mouseleave")}.bind(this))}},childViewTriggers:{"click:cmd":"click:cmd","click:item":"click:item"}});return Mn.View.extend({className:"g-dropdown--menu",template:_.template('<div class="g-dropdown--placeholder"></div><div class="g-dropdown--container"></div>'),ui:{placeholder:".g-dropdown--placeholder"},regions:{container:{el:".g-dropdown--container",replaceElement:!0},current:"@ui.placeholder"},initialize:function(){this.current=new Backbone.Model},collectionEvents:{update:function(){if(this.collection.length){var e=new t({model:this.collection.at(0)});this.showChildView("current",e),this.setCurrent(e)}else this.showChildView("current",new t({model:new Backbone.Model({title:"...",id:null})}))}},onRender:function(){if(this.options.hasOwnProperty("addClass")&&this.$el.addClass(this.options.addClass),this.showChildView("container",new i({collection:this.collection})),this.options.placeholder)this.ui.placeholder.html(this.options.placeholder);else if(this.collection&&this.collection.length){var e=new t({model:this.collection.at(0)});this.showChildView("current",e)}else this.showChildView("current",new t({model:new Backbone.Model({title:"...",id:null})}))},onAttach:function(){this.collection&&this.collection.length&&this.setCurrent(this.options.current)},events:{"click .g-dropdown--placeholder":"expand"},childViewTriggers:{"click:cmd":"dropdown:click:cmd"},childViewEvents:{"container:mouseleave":function(){this.$(".g-dropdown--placeholder").removeClass("expanded")},"click:item":function(e){e.model.id!==this.current.id?(e.model.has("fn")&&e.model.get("fn").call(),this.setCurrent(e),this.getChildView("container")&&this.getChildView("container").$el.slideUp(150,function(){this.$(".g-dropdown--placeholder").removeClass("expanded")}.bind(this))):this.expand()}},expand:function(){this.collection.length&&!this.$el.hasClass("disabled")&&this.$(".g-dropdown--placeholder").toggleClass("expanded").next(".g-dropdown--container").clearQueue().slideToggle(150)},setCurrent:function(e){if(void 0===e)return this;var t=this.getChildView("container"),i=this.getChildView("current");if(t&&(t.children.each(function(e){e.$el.removeClass("selected")}),"object"!==(void 0===e?"undefined":_typeof(e)))){var n=t.collection.get(e);if(!n)return this;e=t.children.findByModel(n)}return this.options.placeholder||(this.current=e.model,e.$el.addClass("selected"),i.model.id!==e.model.id&&(i.model=e.model,i.render())),this.triggerMethod("dropdown:select",e.model,this.options.name),this}})}),define("global.model.dialog",[],function(){return Backbone.Model.extend({defaults:function(){return{title:"",autoOpen:!0,modal:!1,view:null,size:"def",color:"default",icon:"folder",zindex:0,header:{move:!1,manage:[{id:"close"},{id:"size"}]},sidebar:null,content:null,toolbar:new Backbone.Collection,context:new Backbone.Collection,showContext:!1,footer:new Backbone.Collection,width:"auto",height:"auto",top:0,left:0}}})}),define("global.view.dialog",["i18n!nls/resources.min","global.model.dialog"],function(e,t){var i=Mn.CollectionView.extend({className:"g-dialog--footer",childView:Mn.View.extend({tagName:"span",getTemplate:function(){return this.model.has("template")?_.template(this.model.get("template")):_.template('<button name="<%- id %>" class="g-form--button flat <%- className %>"><%- title %></button>')},events:{"click input[type=checkbox]":function(e){this.model.set("selected",$(e.target).prop("checked"))}},triggers:{"click button:not(.disabled)":"footer:button:click"},modelEvents:{"change:selected":function(e,t){this.$("input[type=checkbox]").prop("checked",t)}},onRender:function(){this.model.has("selected")&&this.$("input[type = checkbox]").prop("checked",this.model.get("selected"))},templateContext:function(){return{viewid:this.cid}}}),childViewOptions:function(e){e.has("className")||e.set("className","")},onFooterButtonClick:function(e){this.triggerMethod("content:reflect",e)},childViewTriggers:{"footer:button:click":"footer:button:click"}}),n=Mn.CollectionView.extend({tagName:"ul",childView:Mn.View.extend({tagName:"li",getTemplate:function(){return this.model.has("template")?_.template(this.model.get("template")):_.template('<span name="<%- id %>" title="<%- caption %>" toolbar-icon="<%- icon %>" class="<%- className %>"><i><%- title %></i></span>')},triggers:{"click :not(.disabled)":"toolbar:item:click","input input":"toolbar:input:keyup"},onBeforeRender:function(){this.model.has("className")||this.model.set("className",this.model.id),this.model.has("icon")||this.model.set("icon",this.model.get("className")),this.model.has("title")||this.model.set("title",""),this.model.has("caption")||this.model.set("caption",this.model.get("title"))},onRender:function(){this.model.get("disabled")&&this.$el.attr("disabled","disabled")}}),onToolbarItemClick:function(e){this.triggerMethod("content:reflect",e)},onToolbarInputKeyup:function(e){this.triggerMethod("content:reflect",e)},childViewTriggers:{"toolbar:item:click":"toolbar:item:click","toolbar:input:keyup":"toolbar:input:keyup"},collectionEvents:{reset:function(e){this.triggerMethod("toolbar:update",e)},update:function(){}}}),o=Mn.CollectionView.extend({className:"row",childView:Mn.View.extend({className:"g-form--button",tagName:"button",template:_.template("<%- title %>"),onRender:function(){this.model.get("className")&&this.$el.addClass(this.model.get("className"))},triggers:{click:"click:button"}}),childViewTriggers:{"click:button":"click:button"}}),s=Mn.View.extend({className:"g-dialog--promt",template:_.template("<span></span><div></div>"),regions:{buttons:{el:"div",replaceElement:!0}},onRender:function(){this.showChildView("buttons",new o({collection:new Backbone.Collection}))},onChildviewClickButton:function(e){"delete"===e.model.id&&this.callback&&(this.callback.call(this.context),this.callback=null),this.$el.slideUp()},showNotify:function(e){this.getChildView("buttons").collection.reset([{id:"ok",title:"Ok",className:"blue small flat"}]),this.$("span").html(e),this.$el.slideDown(150),this.triggerMethod("notice:show:message")},showConfirm:function(t,i,n){this.getChildView("buttons").collection.reset([{id:"delete",title:e.del,className:"rightsmall flat blue"},{id:"cancel",title:e.cancel,className:"left small flat"}]),this.$("span").html(t),this.callback=i,this.context=n,this.$el.slideDown(150),this.triggerMethod("notice:show:message")},childViewTriggers:{"click:button":"notice:click:button"}}),l=Mn.CollectionView.extend({className:"g-dialog--manage",childView:Mn.View.extend({tagName:"i",template:_.template(""),triggers:{click:"manage:item:click"},onRender:function(){this.$el.addClass(this.model.id)}}),childViewTriggers:{"manage:item:click":"manage:item:click"}});return Mn.View.extend({className:"g-dialog--wrapper",template:"#dialog-window-template",ui:{header:".g-dialog--header",title:".g-dialog--title",content:".g-dialog--content",blocker:".g-dialog--blocker"},regions:{notify:{el:".g-dialog--promt",replaceElement:!0},toolbar:".g-toolbar",content:"@ui.content",sidebar:".g-dialog--sidebar",footer:{el:".g-dialog--footer",replaceElement:!0},manage:{el:".g-dialog--manage",replaceElement:!0}},initialize:function(){this.options.model||(this.model=new t(this.options))},modelEvents:{"change:content":function(e,t){this.getRegion("content").show(t)},"change:title":function(e,t){this.ui.title.html(t)},"change:icon":function(e,t){this.ui.title.attr("data-icon","icon-"+t)},"change:showContext":function(e,t){this.$el.attr("context",t)},"change:size":function(e,t){if(this.model.set({top:this.$el.position().top,left:this.$el.position().left,width:this.$el.width(),height:this.$el.height()}),this.$el.attr("size",t),"max"===t)this.$el.css({left:0,top:45,width:"",height:"",transform:"initial"}).draggable().draggable("destroy").resizable().resizable("destroy");else{var i=this.model.previousAttributes();this.$el.css({left:i.left,top:i.top,width:i.width,height:i.height}),this._initDragAndResize()}}},onRender:function(){this.$el.attr("size",this.model.get("size")),this.$el.attr("footer",!!this.model.get("footer").length),this.$el.attr("toolbar",!!this.model.get("toolbar").length),this.$el.attr("modal",!!this.model.get("modal")),this.$el.attr("context",this.model.get("showContext")),this.$el.attr("header",this.model.get("color")),this.model.get("zindex")&&this.$el.css("zIndex",9e3+this.model.get("zindex")),"full"!==this.model.get("size")?this._initDragAndResize():this.model.get("header").manage=[{id:"close"}],this.showChildView("manage",new l({collection:new Backbone.Collection(this.model.get("header").manage)})),this.showChildView("notify",new s),this.showChildView("toolbar",new n({collection:this.model.get("toolbar")})),this.showChildView("footer",new i({collection:this.model.get("footer")})),this.model.has("content")&&this.showChildView("content",this.model.get("content")),this.model.has("sidebar")?(this.$el.attr("sidebar",!0),this.showChildView("sidebar",this.model.get("sidebar"))):this.$el.attr("sidebar",!1)},onAttach:function(){if("full"!==this.model.get("size")){var e=$("main"),t=this.$el,i=e.height()/2-t.height()/2;t.css({top:i<44?44:i,left:e.width()/2-t.width()/2})}this.model.get("autoOpen")?this.$el.show():this.$el.hide()},childViewEvents:{"show:message":function(e){this.getChildView("notify").showNotify(e)},"show:message:confirm":function(e){this.getChildView("notify").showConfirm(e.text,e.fx,e.ctx)},"notice:show:message":function(){this.ui.blocker.show()},"notice:click:button":function(){this.ui.blocker.hide()},"manage:item:click":function(e){this[e.model.id]()},"content:reflect":function(e){var t=this.getChildView("content"),i=t[e.model.id];i&&"function"==typeof i&&i.call(t,e)},"toolbar:update":function(e){this.$el.attr("toolbar",!!e.length)}},childViewTriggers:{"toolbar:item:click":"toolbar:item:click","toolbar:input:keyup":"toolbar:input:keyup","container:select:item":"container:select:item","footer:button:click":"footer:button:click","after:load":"after:load"},close:function(){this.$el.hide(),this.triggerMethod("dialog:closed"),Backbone.Radio.channel("Notify").request("hide:overlay")},size:function(){this.model.set("size","max"===this.model.get("size")?"def":"max")},menu:function(){this.model.set("showContext",!this.model.get("showContext"))},_initDragAndResize:function(){this.$el.resizable({stop:function(e,t){try{this.model.has("content")&&_.isFunction(this.model.get("content"))&&this.model.get("content").triggerMethod("container:resize:stop",this.getRegion("content").$el)}catch(e){console.error(e.message)}}.bind(this)}).draggable({handle:this.ui.header,helper:"original",containment:"main"}),this.$el.css("position","fixed")}})}),define("c/InputFormView",["i18n!nls/resources.min","global.behaviors.input"],function(e,t){return Mn.View.extend({behaviors:[t],tagName:"span",className:"g-form--input",template:_.template('<input type="text" id="input" name="" value="" class="g-form--input" placeholder="<%= Resources.nameVidget %>"><label for="input"><%= Resources.nameVidget %></label><i class="add rtl-1"></i><i class="clear rtl-2"></i>'),templateContext:{Resources:e},events:{"click .clear":function(){this.$("input").val("")}},triggers:{"click .add":"input:click:add"}})}),define("c/EditListView",[],function(){var e="<span><%= title %></span><span class='cmd'><button type='button' class='view' data-icon='icon-eye'></button><% if(!IsSystem){ %><button type='button' class='edit' data-icon='icon-pen'></button><button type='button' class='clear' data-icon='icon-close-l'></button><% } %></span>",t=Mn.CollectionView.extend({className:"list-cmd-panel",childView:Mn.View.extend({className:"item",template:_.template(e),triggers:{click:"click:item","click .view":"list:item:view","click .clear":"list:item:clear","click .save":"list:item:save"},events:{"click .edit":function(e){e.stopPropagation(),this.template=_.template("<input type='text' value='<%- title %>' /><span class='cmd edit-view'><button type='button' class='cancel' data-icon='icon-round-del'></button><button type='button' class='save' data-icon='icon-round-check'></button></span>"),this.render()},"click .cancel":function(t){t.stopPropagation(),this.template=_.template(e),this.render()},"click input":function(e){e.stopPropagation()}},onListItemSave:function(){if($.trim(this.$("input").val())){var t={title:this.$("input").val()};t[this.options.titleAttribute]=this.$("input").val(),this.model.set(t),this.template=_.template(e),this.render()}else this.$("input").val(this.model.get("title"))}}),childViewOptions:function(e){return e.has("IsSystem")||e.set("IsSystem",!1),this.options.titleAttribute&&(e.set("title",e.get(this.options.titleAttribute)),e.on("change:"+this.options.titleAttribute,function(){e.set("title",e.get(this.options.titleAttribute))},this)),{titleAttribute:this.options.titleAttribute}},childViewTriggers:{"click:item":"click:item","list:item:view":"list:item:view","list:item:clear":"list:item:clear","list:item:save":"list:item:save"}});return Mn.View.extend({template:_.template("<div></div>"),regions:{list:{el:"div",replaceElement:!0}},childViewTriggers:{"click:item":"click:item","list:item:view":"list:item:view","list:item:clear":"list:item:clear","list:item:save":"list:item:save"},events:{"click .add-btn":function(e){e.stopPropagation(),this.$("#add-collection").css({"border-color":""});var t=$.trim(this.$("#add-collection").val());t?(this.$("#add-collection").val(""),this.triggerMethod("list:add",t)):this.$("#add-collection").css({"border-color":"red"})}},onRender:function(){this.getRegion("list").show(new t({collection:this.collection,titleAttribute:this.options.titleAttribute}))}})}),define("c/TabsView",[],function(){var e=Mn.CollectionView.extend({tagName:"ul",className:"nav nav-tabs",childView:Mn.View.extend({tagName:"li",template:_.template('<a href="#<%- id %>"><%- title %>&nbsp;<span style="display: inline-block; min-width: 22px;"><%- total?"("+total+")":"" %></span></a>'),triggers:{click:"click:item"},onRender:function(){this.model.has("active")&&this.model.get("active")?this.$el.addClass("active"):this.$el.removeClass("active")},modelEvents:{"change:active":function(){this.render()}}}),childViewOptions:function(e){e.has("total")||e.set("total",null)}});return Mn.View.extend({template:_.template("<ul></ul><div></div>"),regions:{tabs:{el:"ul",replaceElement:!0},content:{el:"div",replaceElement:!0}},onChildviewClickItem:function(e){var t=e.model.collection.findWhere({active:!0});t&&t.set("active",!1),e.model.has("active")&&e.model.get("acitve")||(e.model.set("active",!0),this.showContent(e.model))},showContent:function(e){var t=e.get("view");this.showChildView("content",new t(e.get("options"))),this.finishLoadContent()},finishLoadContent:function(){},onRender:function(){this.showChildView("tabs",new e({collection:this.collection}));var t=this.collection.findWhere({active:!0});t&&this.showContent(t)}})}),define("global.request.param",["i18n!nls/resources.min","global.behaviors.input","global.view.dropDown","global.view.dialog","c/searchPanel","g/tree","RU"],function(e,t,i,n,o,s){var l=Backbone.Model.extend({defaults:function(){return{Name:"",DisplayValue:"",ParametrType:"",Caption:"",Description:"",Value:[],MetaEntity:"",IsMultiValues:!1,StickUrl:"",NoCash:!1}},validate:function(e){var t=[];if("int"!==this.get("ParametrType").toLowerCase()||function(e,t){return""===e||new RegExp(t).test(e)}(e.Value[0],"^[\\d]+$")||t.push(e),t.length)return t;this.trigger("valid")}});return Mn.View.extend({behaviors:{input:t},tagName:"span",className:"g-form--input",getTemplate:function(){var e=this.model.get("ParametrType")?this.model.get("ParametrType").toLowerCase():"";return-1!==["idlist","type","rubric","object"].indexOf(e)?_.template('<div class="dialog"></div><input type="text" class="g-form--input <%- DisplayValue?\'filled\':\'\' %>" placeholder="<%- Caption %>" value="<%- DisplayValue?DisplayValue:Value.join(",") %>" name="<%- Name %>" disabled="disabled" /><label><%- Caption %></label><i class="rtl-2 more add"></i><i class="rtl-3 clear"></i><i class="help rtl-1"></i><span class="g-tip bottom"><kbd></kbd><span><%- Description %></span></span>'):"bool"===e?_.template('<input type="checkbox" id="id<%- Name %>" class="g-form--checkbox" name="<%- Name %>" <% if(Value[0]==="True"){ %>checked="checked"<% } %> /><label for="id<%- Name %>" class="bool-type-label"><%- Caption %></label><i class="help rtl-1"></i><span class="g-tip bottom"><kbd></kbd><span><%- Description %></span></span>'):"text"===e?_.template('<label><%- Caption %></label><i class="help rtl-1 textarea"></i><span class="g-tip bottom textarea"><kbd></kbd><span><%- Description %></span></span><textarea class="g-form--textarea <%- DisplayValue?\'filled\':\'\' %>" name="<%- Name %>" placeholder="<%- Caption %>"><%- DisplayValue?DisplayValue:Value.join(",") %></textarea>'):"datetime"===e?_.template('<input type="text" value="" name="<%- Name %>" /><label><%- Caption %></label><svg class="svg-icon--big"><use xlink:href="#calendar-icon"></use></svg><i class="help rtl-1"></i><span class="g-tip bottom"><kbd></kbd><span><%- Description %></span></span>'):"dictionary"===e?_.template('<label><%- Caption %></label><i class="help rtl-1"></i><span class="g-tip bottom"><kbd></kbd><span><%- Description %></span></span><div></div>'):_.template('<input type="text" class="g-form--input <%- DisplayValue?\'filled\':\'\' %>" placeholder="<%- Caption %>" value="<%- DisplayValue?DisplayValue:Value.join(",") %>" name="<%- Name %>" /><label><%- Caption %></label><i class="help rtl-1"></i><span class="g-tip bottom"><kbd></kbd><span><%- Description %></span></span>')},ui:{text:"textarea",input:"input",clear:"i.clear"},collectionEvents:{update:function(e,t){if(t.add){var i=e.pluck("id");i.length||(i=this.model.get("Value")),this.model.set({DisplayValue:e.pluck("title").join("; "),Value:i})}}},modelEvents:{invalid:function(){this.ui.text.addClass("error"),this.ui.input.addClass("error")},valid:function(){this.ui.text.removeClass("error"),this.ui.input.removeClass("error")},"change:DisplayValue":function(e,t){this.ui.input.val(t)},"change:Value":function(e,t){this.ui.clear.show()}},events:{"click label.bool-type-label":function(){this.$("input").is(":checked")?this.model.set("Value",["False"]):this.model.set("Value",["True"])},"keyup input[type=text], textarea, input[class!=ejdatepicker]":function(e){this.model.set("Value",[$.trim($(e.target).val())],{validate:!0})},"click .more":function(){if(this._setKeyHeader(),-1===["Object","IdList"].indexOf(this.model.get("ParametrType"))){var t={RequestSelected:e.selectRequest,Request:e.selectRequest,Rubric:e.selectRubric,RubricTools:[{id:"add",caption:e.add},{id:"rename",caption:e.rename},{id:"clear",caption:e.deleteItem},{id:"searchObj",className:"search",template:'<span class="g-form--input input-data"><input type="text" name="search-name" value="" class="g-form--input" placeholder="Enter keyword"/><i class="search rtl-1" name="search"></i></span>'}],Type:e.selectTree},i=new s({collection:new Backbone.Collection,selected:this.model.get("Value"),node:{checkbox:!1}}),l=new n({title:t[this.model.get("ParametrType")],header:{manage:[{id:"close"}]},color:"blue",controls:[],tools:t[this.model.get("ParametrType")+"Tools"],content:i});i.collection.url=this.model.get("url")||"/api/"+this.model.get("ParametrType"),i.collection.fetch({reset:!0}),this.listenTo(i,"container:select:item",function(e){parseInt(e.model.id)>=0&&(this.model.get("IsMultiValues")?this.collection.add(e.model):(this.collection.reset(),this.collection.add(e.model),l.close()))})}else l=new n({title:e.selObj,icon:"gear",color:"blue",size:"med",header:{manage:[{id:"close"}]},toolbar:new Backbone.Collection([{id:"filterByType",className:"filter"},{id:"searchObj",className:"search",template:'<span class="g-form--input input-data"><input type="text" name="search-name" value="" class="g-form--input" placeholder="Enter keyword"/><i class="search rtl-1" name="search"></i></span>'}]),content:new o({rid:this.options.rid,collection:this.collection,IsMultiValues:"IdList"===this.model.get("ParametrType")}),footer:new Backbone.Collection([{id:"close",title:e.apply,className:"blue right"}])}),this.listenTo(l,"footer:button:click",function(e){l.close()});this.hasRegion()||this.addRegion("dialog",".dialog"),this.getRegion("dialog").show(l)},"click @ui.clear":function(e){e.stopPropagation(),this.collection.reset(),this.model.set({DisplayValue:"",Value:[]})}},initialize:function(){this.collection||(this.collection=new Backbone.Collection),this.model||(this.model=new l(this.options.attributes))},onBeforeRender:function(){-1!==this.model.get("Name").indexOf("#")&&this.model.set("Name",this.model.get("Name").replace(/#/g,"")),this.model.has("ParametrType")||this.model.set("ParametrType","")},onRender:function(){this._setKeyHeader();var e=this.model.get("ParametrType").toLowerCase();this["_"+e]&&this["_"+e]()},onChildviewDropdownSelect:function(e,t){this.model.set("Value",[e.id])},_setKeyHeader:function(){if(this.options.rid||this.options.dbase){var e={};this.options.rid?e.RID=this.options.rid:e.db="db"+this.options.dbase,$.ajaxSettings.headers.key=$.mergeUrlParam($.ajaxSettings.headers.key,e)}else require(["bdid"],function(e){e&&($.ajaxSettings.headers.key=$.mergeUrlParam($.ajaxSettings.headers.key,{db:"db"+e}))})},_dictionary:function(){this.addRegion("ddm","div");var e=new Backbone.Collection;this.showChildView("ddm",new i({collection:e})),e.url="/api/ModelDicItems?dic="+this.model.get("MetaEntity"),e.fetch({reset:!0,success:function(){this.getChildView("ddm").setCurrent(this.model.get("Value")[0])}.bind(this)}),this.listenTo(this.getChildView("ddm"),"dropdown:select",function(e){this.model.set({Value:[e.id]})})},_datetime:function(){this.$el.addClass("date-position");this.$("input").ejDatePicker({width:"100%",height:"36px",value:new Date(this.model.get("Value")[0]),locale:e.Lang,buttonText:e.Today,showPopupButton:!1,watermarkText:this.model.get("Caption"),focusOut:function(e){this.$("input").data("ejDatePicker").hide()}.bind(this),select:function(e){var t=e.date;this.model.set({Value:[$.ToISODateOnly(t)]})}.bind(this)});this.$("input").addClass("ejdatepicker"),this.$(".svg-icon--big").on("click",function(){this.$("input").ejDatePicker("show")}.bind(this))}})}),define("c/searchPanel",["i18n!nls/resources.min","c/SimpleTableView","g/tree"],function(e,t,i){var n=Mn.CollectionView.extend({childView:Mn.View.extend({className:"item",template:_.template('<%- title %><span data-icon="icon-trash"></span>'),triggers:{'click span[data-icon="icon-trash"]':"remove:selected"}}),childViewTriggers:{"remove:selected":"remove:selected"}});return Mn.View.extend({className:"choise-panel",template:"#choise-panel-list-template",templateContext:{Resources:e},ui:{tt:"#types-tree"},regions:{result:".result-list",select:".select-list",tree:"@ui.tt"},initialize:function(){this.options.rid&&(this.treeOptions={path:"/api/Tree/ByWidgetQ/"+this.options.rid}),this.typeid=10001,this.searchVal=""},onRender:function(){var o=new Backbone.Collection;o.url="/api/List/?page=1&text=&typeid=10001",this.showChildView("result",new t({collection:o,rowTemplate:"<td><input type='checkbox' id='ch_<%- id %>' class='g-form--checkbox'><label for='ch_<%- id %>'><span><%= num %>.</span><span><%- title %></span></label></td><td><%- type %></td>",head:new Backbone.Collection([{id:0,title:e.title,width:"70%"},{id:1,title:e.type,width:"30%"}])})),this.getChildView("result").collection.on("reset",function(){this.getChildView("result").$el.hideIndicator()},this),this.getChildView("result").collection.on("error",function(){this.getChildView("result").$el.hideIndicator()},this),this.collection.reset(),this.showChildView("select",new n({collection:this.collection}));var s=new Backbone.Collection;s.url=this.treeOptions?this.treeOptions.path||"/api/Type":"/api/Type",this.showChildView("tree",new i({collection:s,node:{checkbox:!1,levelOpen:4}})),s.fetch({reset:!0})},onChildviewContainerSelectItem:function(e){this.typeid=e.model.id,this.search()},clear:function(){this.searchVal="",this.typeid=10001;var e=this.getChildView("result").collection;e.url=$.mergeUrlParam(e.url,{text:this.searchVal,page:1,typeid:this.typeid}),e.reset()},search:function(e){var t=this.getChildView("result").collection;this.getChildView("result").currentPage=1,t.url=$.mergeUrlParam(t.url,{page:1,typeid:this.typeid,text:this.searchVal}),this.triggerMethod("notice:show:message"),t.fetch({reset:!0,success:function(){this.triggerMethod("notice:click:button")}.bind(this),error:function(){this.triggerMethod("notice:click:button")}})},filterByType:function(e){this.ui.tt.toggle()},searchObj:function(e){var t=e.$("input[name='search-name']").val();(event.keyCode?13===event.keyCode&&$.trim(t):$(event.target).hasClass("search"))&&t.length>=1&&(this.searchVal=t,this.search())},childViewEvents:{"page:select":function(e){var t=this.getChildView("result"),i=this.getChildView("result").collection;t.currentPage=e,i.url=$.mergeUrlParam(i.url,{page:e}),i.fetch({reset:!0})},"change:input:row":function(e){var t=e.$("input");this.ui.tt.hide(),t.prop("checked")?this.options.IsMultiValues?this.collection.add(e.model):(this.getChildView("result").getChildView("body").children.each(function(t){e.model.id!==t.model.id&&t.$("input").prop("checked",!1)}),this.collection.reset(),this.collection.add(e.model)):this.collection.remove(e.model)},"remove:selected":function(e){this.getChildView("result").getChildView("body").children.findByModel(e.model).$("input").prop("checked",!1),this.collection.remove(e.model)}}})}),define("g/tree",["i18n!nls/resources.min"],function(e){var t=(Backbone.Collection.extend({model:Backbone.Model.extend({defaults:{id:null,parentid:"",title:"",parents:[],children:0,cdate:0}})}),Mn.View.extend({tagName:"li",
template:_.template('<div><i class="expander" <%- nodes?"":"disabled" %>></i><input type="checkbox" id="node_<%- id %>"><label for="node_<%- id %>"></label><span tree-icon="<%- nodes?(id==="-1"?"root":"folder"):"file" %>"><% if(iconurl){ %><img src="<%- iconurl %>" alt="" />&nbsp;<% } %><%- title %></span><button data-value="ok"></button><button data-value="cancel"></button></div><ul></ul>'),ui:{span:"span",cancel:'button[data-value="cancel"]',save:'button[data-value="ok"]',expander:"i.expander",chbox:"input[type=checkbox]",label:"input[type=checkbox]+label"},regions:{tree:{el:"ul",replaceElement:!0}},triggers:{"click @ui.span":"container:select:item"},events:{"click @ui.chbox":function(e){e.stopPropagation(),this.model.set("selected",this.ui.chbox.prop("checked")),this.triggerMethod("click:select:input",this)},"click @ui.cancel":function(){this.model.set("isEdit",!1),this.model.id||this.model.collection.remove(this.model)},"click @ui.save":function(e){e.stopPropagation(),$.trim(this.ui.span.text())&&this.model.save({title:this.ui.span.text()}),this.model.set("isEdit",!1)},"click .expander":function(e){e.stopPropagation(),$(e.target).closest("div").toggleClass("expanded")}},modelEvents:{"change:nodes":function(e,t){t&&t.length?(this.ui.expander.attr("disabled",!1),this.ui.span.attr("tree-icon","folder")):(this.ui.expander.attr("disabled",!0),this.ui.span.attr("tree-icon","file"))},"change:isEdit":function(e,t){t?this.ui.span.attr("contenteditable",!0):this.ui.span.removeAttr("contenteditable")}},onBeforeRender:function(){if(this.options.parent&&this.options.parent.id===this.model.get("parentid")){var e=this.options.parent.get("parents")||[];e.push(parseInt(this.options.parent.id)),this.model.set("parents",_.uniq(e))}},onRender:function(){if(this.options.node||(this.options.node={checkbox:!0}),this.model.has("selected")&&this.$("input[type=checkbox]").prop("checked",this.model.get("selected")),this.model.has("nodes")){this.options.node.levelOpen?this.model.get("level")<this.options.node.levelOpen&&this.$("div").addClass("expanded"):this.$("div").addClass("expanded");var e=new i({parent:this.model,collection:this.model.get("nodes"),url:this.options.url,node:this.options.node});this.showChildView("tree",e)}this.options.node.checkbox||this.$("input[type=checkbox] ~ label").hide(),this.model.has("isEdit")||this.model.set("isEdit",!1)},showAddTemplate:function(){this.model.set("isEdit",!1);var t=new Backbone.Model({id:null,title:e.title,parentid:this.model.id,cdate:0,nodes:null,iconurl:null});if(this.model.has("nodes"))this.model.get("nodes").add(t);else{var i=new Backbone.Collection([t]);i.url=this.model.collection.url,this.model.set({nodes:i,children:1})}this.model.trigger("change:nodes"),this.render(),t.set("isEdit",!0)},childViewTriggers:{"click:select:input":"click:select:input","container:select:item":"container:select:item"}})),i=Mn.CollectionView.extend({tagName:"ul",className:"g-tree",childView:t,childViewOptions:function(){return{parent:this.options.parent,url:this.options.url,node:this.options.node}},initialize:function(){this.collection.comparator="cdate",this.branch=this.options.branch||{pid:0}},collectionEvents:{update:function(){this.options.parent&&(this.options.parent.set({children:this.collection.length}),this.collection.length||this.options.parent.set({nodes:null}))},reset:function(){this.$el.hideIndicator();var e=new Backbone.Collection;this.collection.each(function(t){0===parseInt(t.get("parentid"))&&t.set("level",1),this.options.selected&&t.set("selected",-1!==this.options.selected.indexOf(parseInt(t.id)));var i=this.collection.where({parentid:t.id}),n=new Backbone.Collection;n.url=this.collection.url,n.add(_.map(i,function(e){return e.set("level",t.get("level")+1),e.collection=n,e})),t.set("nodes",n.length?n:t.has("isdoc")?null:[]),e.add(i)},this),this.collection.remove(e.models)}},onChildviewContainerSelectItem:function(e){this.$("div.active").removeClass("active"),e.$("div:first").addClass("active")},childViewTriggers:{"click:select:input":"click:select:input","container:select:item":"container:select:item"}});return i}),define("g/ejRTEView",["i18n!nls/resources.min","g/ImageGalleryView","RU","syncfusion"],function(e,t){return Mn.View.extend({tagName:"textarea",template:!1,onAttach:function(){this.ejRTE=this.$el.ejRTE({enableRTL:!!this.options.enableRTL,value:this.options.value,maxLength:Number.MAX_VALUE,locale:e.Lang,width:this.options.width||"100%",height:this.options.height||"450px",minHeight:"200px",showFooter:!0,showHtmlSource:!0,autoFocus:!0,toolsList:["font","style","alignment","customTools","links","clipboard","doAction","lists","media","tables","casing","clear"],tools:{font:["fontSize","fontColor","backgroundColor"],style:["bold","italic","underline","strikethrough"],alignment:["justifyLeft","justifyCenter","justifyRight","justifyFull"],lists:["unorderedList","orderedList"],clipboard:["cut","copy","paste"],doAction:["undo","redo"],clear:["clearFormat","clearAll"],links:["createLink","removeLink"],media:["video"],tables:["createTable","addRowAbove","addRowBelow","addColumnLeft","addColumnRight","deleteRow","deleteColumn","deleteTable"],casing:["upperCase","lowerCase"],customTools:[{name:"galleryWindow",tooltip:e.gallery,text:"",css:"e-rte-toolbar-icon image",action:function(){var i={id:"gallery-window",icon:"icon-source",title:e.gallery,toolbar:[],footer:[],content:new t};Backbone.Radio.channel("Notify").request("once:dialog",i),this.listenTo(i.content,"change:item",function(e){var t='<img src="'+e.get("FileUrl")+'" alt="'+e.get("OriginalFileName")+'" />';this.ejRTE.executeCommand("inserthtml",t)}.bind(this))}.bind(this)}]}}).data("ejRTE")},fix:function(){return $(window).trigger("resize"),this}})});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
