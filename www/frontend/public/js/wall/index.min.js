'use strict';

define('PDFJS', ['/js/dist/pdf/shared/util.js'], function () {
    return PDFJS;
});

require.config({
    paths: {
        '@': "@wall",
        async: 'dist/requirejs-plugins/src/async'
    }
});

define(['app', 'access', 'global.view.headerView', 'mainView', 'global.radio.loader'], function (App, acc, Header, mainView) {

    var init = function init() {

        $.ajaxSetup({

            headers: {
                'key': $.ajaxSettings.url
            }
        });

        App.access = acc.data.Points;

        function handler() {
            Backbone.history.navigate('', { trigger: true });
        }

        $("header .logo").on("click", handler);
        $("header .logo").on("touchstart", handler);

        var appRouter = Mn.AppRouter.extend({
            routes: {

                '': function _() {
                    dashboards.getView().showFirst('my');
                    $('head meta[name=viewport]').attr('content', 'width=device-width, initial-scale=1.0');
                },

                'demo': function demo() {
                    dashboards.getView().showFirst('shared');
                    $('head meta[name=viewport]').attr('content', 'width=device-width, initial-scale=1.0');
                },

                'new': function _new() {
                    dashboards.getView().options.uid = null;
                    dashboards.getView().onShow();
                    $('head meta[name=viewport]').attr('content', 'width=device-width, initial-scale=1.0');
                },

                ':uid': function uid(_uid) {
                    dashboards.getView().options.uid = _uid;
                    dashboards.getView().onShow();
                }

            }
        });

        var app = Mn.Application.extend({

            region: 'main',

            onStart: function onStart() {

                this.showView(new mainView());

                new Header().render();

                Backbone.history.start();
            }

        });

        new appRouter();
        var dashboards = new app();
        dashboards.start();
    };

    return {
        init: init
    };
});
'use strict';

define('sendModel', [], function () {

    return Backbone.Model.extend({

        defaults: {
            id: null,
            page: 1,
            pagesize: 30,
            pars: [],
            ts: '',
            useDefParams: true,
            action: 'send'
        },

        url: function url() {
            return '/api/extsrv/' + this.get('action');
        },

        sync: function sync(method, model, options) {

            //Backbone.Model.prototype.sync.apply(this, ['create', model, options]);

            $.ajax({ url: model.url(), method: 'POST', data: JSON.stringify(model.toJSON()), contentType: 'application/json; charset=utf-8' }).done(function () {

                options.success.apply(this, arguments);
            }).fail(function () {

                options.error.apply(this, arguments);
            });
        }
    });
});
'use strict';

define('WidgetModel', [], function () {

    return Backbone.Model.extend({

        defaults: function defaults() {
            return {
                id: null,
                title: "",

                update: false,

                timeUpdate: 360000,

                // метка времени для получения новых данных после момента загрузки
                // конфликт при создании цепочек - sendModel не должна содержать св-во ts
                timeStampForUpdate: '',

                Characteristics: [],
                width: 400,
                height: 460,
                top: 100,
                left: 100,
                zIndex: 1,
                typeName: "",
                requestParameters: {},
                publishers: [],
                Decoration: {
                    CaptionBackground: 'rgba(200, 188, 162, 1)',
                    CaptionForeground: 'rgba(51, 51, 51, 1)',
                    ContainerBackground: 'rgba(255, 255, 255, 1)',
                    ContainerForeground: 'rgba(51, 51, 51, 1)',
                    LinkBackground: 'rgba(255, 255, 255, 1)',
                    LinkForeground: 'rgba(55,141,218,1)',
                    CaptionIsVisible: true,
                    BorderIsVisible: true,
                    ContainerIsTransparent: false
                },
                Visualization: null,
                Legend: null,
                isMarkSelectedItem: false,

                // int?
                SNLevel: null,
                SNLayout: null,
                SNStruct: null,
                SNX: 0,
                SNY: 0,
                SNZoom: 0
            };
        },

        url: function url() {
            return this.collection.url() + "/widget/" + (this.id || "");
        },

        validate: function validate(attr) {

            var output = [],
                dp = '^[\\d]+$';

            function test(s, p) {
                return s === "" || new RegExp(p).test(s);
            }

            if (!attr.title) {
                output.push({ name: "title" });
            }

            if (!attr.typeName) {
                output.push({ name: "typeName" });
            }

            // TODO: убрать костыли
            var types = ["WidgetSource", "WidgetHtml", "WidgetReporting", "WidgetSemNet"];

            if (types.indexOf(this.get("typeName")) === -1 && !attr.requestParameters.requestid) output.push({ name: "requestParameters" });

            if (!test(attr.timeUpdate, dp)) {
                output.push({ name: "timeUpdate" });
            }

            if (!test(attr.width, dp)) {
                output.push({ name: "width" });
            }

            if (!test(attr.height, dp)) {
                output.push({ name: "height" });
            }

            if (output.length) return output;
        }
    });
});
'use strict';

define('radio.characteristic', [], function () {

    var paramModel = Backbone.Model.extend({
        idAttribute: 'WidgetParamUID',
        defaults: {
            WidgetParamUID: null,
            WidgetParamName: '',
            WidgetParamValue: null
        }
    });

    var collectionsParams = Backbone.Collection.extend({

        model: paramModel,

        sync: function sync(method, model, options) {

            Backbone.Model.prototype.sync.apply(this, ['create', model, options]);
        }
    });

    var chW = Mn.Object.extend({

        channelName: 'chW',

        radioRequests: {

            'get:param:model': function getParamModel(a, n) {

                var p = _.findWhere(a, { WidgetParamName: n });

                var m = new paramModel({ WidgetParamName: n });

                if (p) m.set(p);

                return m;
            },

            'get:params:collection': function getParamsCollection(uid) {

                var c = new collectionsParams();
                c.url = '/api/widget/' + uid + '/params';

                return c;
            }

        }

    });

    return new chW();
});
'use strict';

define('sett0', ['i18n!nls/resources.min', 'global.behaviors.input'], function (Resources, InputBehavior) {

    return Mn.View.extend({

        behaviors: {
            input: InputBehavior
        },

        className: 'g-form--input',
        template: '#dashboard-settings0',
        templateContext: { Resources: Resources },

        ui: {
            title: 'input[name="title"]'
        },

        onSave: function onSave() {
            this.model.save({ 'title': this.ui.title.val() });
        },

        onCancel: function onCancel() {},

        modelEvents: {

            invalid: function invalid() {
                this.ui.title.addClass('error');
                setTimeout(function () {
                    this.ui.title.removeClass('error');
                }.bind(this), 3000);
            }
        }

    });
});

define('sett1', ['i18n!nls/resources.min', 'g/ImageGalleryView', 'RU', 'syncfusion'], function (Resources, Gallery) {

    return Mn.View.extend({

        template: '#dashboard-settings1',
        templateContext: { Resources: Resources },

        ui: {
            bgColor: 'input[name=BackgroundColor]',
            position: 'input[name="BackgroundPosition"]',
            link: 'input[name="BackgroundImageLink"]'
        },

        events: {

            "click @ui.position": function clickUiPosition() {
                this.sender.set('BackgroundPosition', parseInt(this.$('input[name=BackgroundPosition]:checked').val()));
            }
        },

        regions: {
            gallery: { el: '.image-gallery', replaceElement: true }
        },

        initialize: function initialize() {

            this.sender = new Backbone.Model(this.model.get('Decoration') || {
                BackgroundColor: 'rgba(255, 255, 255, 1)',
                BackgroundImageLink: 'none',
                BackgroundPosition: 3
            });

            this.sender.on('change', function (m, v) {

                this.ui.position.filter("[value='" + v + "']").prop("checked", true);

                if (v === 3) {
                    this.sender.set('BackgroundImageLink', 'none');
                    var mo = this.getChildView('gallery').collection.findWhere({ select: true });
                    if (mo) mo.set('select', false);
                }

                this.model.trigger('change:Decoration', this.model, this.sender.toJSON());
            }, this);
        },

        onRender: function onRender() {

            this.showChildView('gallery', new Gallery({ selectedImgPath: this.sender.get('BackgroundImageLink') }));

            var rgb = {},
                val = this.sender.get('BackgroundColor') || 'rgba(255, 255, 255, 1)',
                arr = val.substr(val.indexOf('('), val.indexOf(')')).replace('(', '').replace(')', '').split(',');

            _.each(['r', 'g', 'b'], function (l, i) {
                rgb[l] = parseInt(arr[i]);
            });

            this.ui.bgColor.ejColorPicker({
                cssClass: 'g-cp',
                locale: Resources.Lang
            });

            this.ui.bgColor.ejColorPicker({

                value: this.ui.bgColor.data('ejColorPicker').RGBToHEX(rgb),
                opacityValue: arr[3] ? parseFloat(arr[3]) * 100 : 100,

                close: function (args) {

                    var c = this.ui.bgColor.data('ejColorPicker').getColor();
                    this.sender.set('BackgroundColor', 'rgba(' + c.r + ', ' + c.g + ', ' + c.b + ', ' + c.a + ')');
                    //this.model.trigger('change:Decoration', this.model, this.sender.toJSON());
                }.bind(this)

            });
        },

        onChildviewChangeItem: function onChildviewChangeItem(model) {

            this.sender.set({
                BackgroundImageLink: model.get('FileUrl'),
                BackgroundPosition: this.sender.get('BackgroundPosition') === 3 ? 1 : this.sender.get('BackgroundPosition')
            });
        },

        onSave: function onSave() {

            this.model.save({ Decoration: this.sender.toJSON() }, {
                success: function (r) {

                    this.sender.url = '/api/wall/' + r.id + '/decoration';
                    this.sender.save({ id: r.id });
                }.bind(this)
            });
        },

        onCancel: function onCancel() {

            this.sender = new Backbone.Model(this.model.get('Decoration') || {
                BackgroundColor: 'rgba(255, 255, 255, 1)',
                BackgroundImageLink: 'none',
                BackgroundPosition: 3
            });

            this.model.trigger('change:Decoration', this.model, this.sender.toJSON());
            this.render();
        }

    });
});

define('sett2', ['i18n!nls/resources.min'], function (Resources) {

    var toolsForUsers = Mn.View.extend({

        tagName: 'span',
        className: 'g-form--input',

        template: _.template('<input type="text" value="" id="uniname" class="g-form--input" placeholder="<%= Resources.alias %>" /><label for="uniname"><%= Resources.alias %></label><i class="add rtl-1"></i>'),

        templateContext: {
            Resources: Resources
        },

        triggers: {
            'click .add': 'user:check'
        }
    });

    var userCollection = Mn.CollectionView.extend({

        tagName: 'tbody',

        emptyView: Mn.View.extend({
            tagName: 'tr',
            template: _.template('<td colspan="4">' + Resources.N + '</td>')
        }),

        childView: Mn.View.extend({

            tagName: 'tr',

            template: _.template('<td><%- UserTitle %></td><td><%= UserUID %></td><td><%- Access? Resources.rw : Resources.ro %></td><td><span class="clear" data-icon="icon-trash"></span></td>'),
            templateContext: { Resources: Resources },

            triggers: {
                'click .clear': 'clear:item'
            }
        }),

        childViewTriggers: {
            'clear:item': 'clear:item'
        }

    });

    var listUsers = Mn.View.extend({

        tagName: 'table',
        template: _.template('<thead><tr><th><%- Resources.dname %></th><th><%- Resources.login %></th><th><%- Resources.scope %></th><th></th></tr></thead><tbody></tbody><tfoot></tfoot>'),
        templateContext: { Resources: Resources },

        regions: {
            tbody: { el: 'tbody', replaceElement: true }
        },

        onRender: function onRender() {
            this.showChildView('tbody', new userCollection({ collection: this.collection }));
        },

        childViewTriggers: {
            'clear:item': 'clear:item'
        }

    });

    var checkedUser = Mn.View.extend({
        tagName: 'tr',

        template: _.template('<td><%- UserTitle %></td><td><%= UserUID %></td><td><select name="Access"><option value="0"><%- Resources.ro %></option><option value="1"><%- Resources.rw %></option></select></td><td><span class="add" data-icon="icon-round-add"></span></td>'),
        templateContext: { Resources: Resources },

        triggers: {
            'click .add': 'user:add'
        },

        onUserAdd: function onUserAdd() {
            this.model.set('Access', parseInt(this.$('select[name=Access]').val()));
        }
    });

    return Mn.View.extend({

        template: '#dashboard-settings2',

        regions: {
            tools: { el: 'div', replaceElement: true },
            check: { el: '.checked-user', replaceElement: true },
            list: { el: '.list', replaceElement: true }
        },

        initialize: function initialize() {

            this.collection = new Backbone.Collection([], {
                model: Backbone.Model.extend({
                    idAttribute: 'UserID',
                    defaults: {
                        UserID: null,
                        UserUID: '',
                        UserTitle: '',
                        Access: 0
                    }
                })
            });

            this.collection.url = '/api/wall/' + this.model.id + '/users';
        },

        collectionEvents: {
            add: function add(m) {
                $.post('/api/wall/' + this.model.id + '/sharewith', m.toJSON());
            }
        },

        onRender: function onRender() {
            this.showChildView('tools', new toolsForUsers());
            this.showChildView('list', new listUsers({ collection: this.collection }));
            this.collection.fetch({ reset: true });
        },

        childViewEvents: {

            'user:add': function userAdd(v) {
                this.getRegion('check').reset();
                this.collection.add(v.model.toJSON());
            },

            'user:check': function userCheck() {

                var $v = this.getRegion('tools').currentView.$('input');

                if ($.trim($v.val())) {
                    var m = new Backbone.Model();
                    m.url = '/api/users/checkname?name=' + $v.val();
                    m.fetch({
                        success: function (m) {
                            if (m && m.get('UserID')) {
                                this.showChildView('check', new checkedUser({ model: m }));
                                $v.val('').removeClass('error');
                            } else {
                                $v.addClass('error').val(Resources.nf);
                                setTimeout(function () {
                                    $v.removeClass('error').val('');
                                }, 5000);
                            }
                        }.bind(this)
                    });
                } else $v.addClass('error');

                setTimeout(function () {
                    $v.removeClass('error');
                }, 5000);
            },

            'clear:item': function clearItem(v) {

                this.triggerMethod('show:message:confirm', {
                    text: Resources.askyousure,
                    fx: function fx() {
                        v.model.destroy();
                    },
                    ctx: this
                });
            }

        },

        onSave: function onSave() {},

        onCancel: function onCancel() {}

    });
});

define('sett3', ['baseurl', 'i18n!nls/resources.min', 'g/ImageGalleryView'], function (baseurl, Resources, Gallery) {

    return Mn.View.extend({

        template: '#dashboard-settings3',
        templateContext: { Resources: Resources },

        ui: {
            pre: '.thumb-image'
        },

        regions: {
            gallery: '.thumb-gallery'
        },

        events: {

            'change input[name=thumb]': function changeInputNameThumb(e) {

                this.kind = $(e.target).val();

                if (this.kind !== '3') this.hideGallery();

                switch (this.kind) {

                    case '0':
                        this.image = '';
                        this.ui.pre.css('background', 'none');
                        break;

                    case '1':

                        this.ui.pre.append($('<i class="loading" size="l" speed="slow"></i>'));

                        require(['/js/dist/html2canvas.min.js'], function () {
                            html2canvas(this.options.content).then(function (canvas) {

                                //var w = 220, h = 160;
                                //var img = new Image(w, h);
                                //img.src = canvas.toDataURL();

                                //var ca = document.createElement('canvas');
                                //ca.width = w;
                                //ca.height = h;
                                //ca.getContext("2d").drawImage(img, 0, 0, w, h);

                                this.image = canvas.toDataURL();
                                this.ui.pre.css({ 'background-image': 'url(' + this.image + ')' });

                                this.ui.pre.find('i').remove();
                            }.bind(this));
                        }.bind(this));
                        break;

                    case '2':
                        if (this.model.get('Decoration') && this.model.get('Decoration').BackgroundImageLink) {
                            this.image = this.model.get('Decoration').BackgroundImageLink;
                            this.ui.pre.css({ 'background-image': 'url(' + baseurl + '/Files/ImageTransform?path=' + this.image + '&width=220&height=160)' });
                        } else this.triggerMethod('show:message', Resources.noselect);
                        break;

                    case '3':
                        this.image = '';
                        this.getRegion('gallery').$el.show();
                        break;
                }
            }

        },

        initialize: function initialize() {
            this.kind = '0';
            this.image = '';
        },

        onRender: function onRender() {

            var flag = !!this.model.get('Screen') && this.model.get('Screen').indexOf('data:image') === -1;

            if (flag) this.ui.pre.css({ 'background-image': 'url(' + baseurl + '/Files/ImageTransform?path=' + this.model.get('Screen') + '&width=220&height=160)' });else this.ui.pre.css({ 'background-image': 'url(' + this.model.get('Screen') + ')' });

            this.showChildView('gallery', new Gallery({
                selectedImgPath: flag ? this.model.get('Screen') : ''
            }));

            if (flag && this.model.get('Screen') !== this.model.get('Decoration').BackgroundImageLink) this.getRegion('gallery').$el.show();
        },

        hideGallery: function hideGallery() {

            var m = this.getChildView('gallery').collection.findWhere({ select: true });
            if (m) m.set('select', false);

            this.getRegion('gallery').$el.hide();
        },

        onChildviewChangeItem: function onChildviewChangeItem(model) {
            this.image = model.get('FileUrl');
            this.ui.pre.css('background-image', 'url(' + baseurl + '/Files/ImageTransform?path=' + model.get('FileUrl') + '&width=220&height=160)');
        },

        onSave: function onSave(dialog) {

            if (this.kind === '3' && !this.image) this.triggerMethod('show:message', Resources.noselect);else this.model.save({ "Screen": this.image });
        },

        onCancel: function onCancel() {
            this.render();
        }

    });
});

define('@DashboardsView', ['i18n!nls/resources.min', 'WidgetModel', '@widget.WidgetView', 'global.view.dialog'], function (Resources, widgetModel, widgetView, dialog) {

    var channelSelect = Backbone.Radio.channel('selectWidget');

    var sideBarCollection = [{ id: 'sett0', title: Resources.msd0, icon: 'gear' }, { id: 'sett1', title: Resources.msd1, icon: 'appearance' }, { id: 'sett2', title: Resources.msd2, icon: 'permission' }, { id: 'sett3', title: Resources.msd3, icon: 'thumb' }];

    return Mn.CollectionView.extend({

        className: 'main-container',

        onRenderChildren: function onRenderChildren() {

            this.triggerMethod('dashboards:container:full');
        },

        childView: Mn.CollectionView.extend({

            className: 'content',

            initialize: function initialize() {

                this.collection = new Backbone.Collection([], { model: widgetModel });
                //this.collection.comparator = function (w) { return w.get("top") * 100 + w.get("left"); };
                this.collection.url = function () {
                    return '/api/wall/' + this.model.id;
                }.bind(this);
            },

            events: {
                'touchstart': 'onEmpty',
                'click': 'onEmpty'
            },

            onEmpty: function onEmpty(e) {

                if (!$(e.target).closest('.anbr-widget').get(0)) {

                    this.triggerMethod('select:one');

                    Backbone.Radio.channel('sidebar').request('open', { nameView: this.model.get('title'), view: this, title: Resources.dbs }, sideBarCollection);
                }
            },

            showSideBar: function showSideBar() {

                Backbone.Radio.channel('sidebar').trigger('show');
                Backbone.Radio.channel('sidebar').request('open', { nameView: this.model.get('title'), view: this, title: Resources.dbs }, sideBarCollection);
            },

            sideBarTrigger: function sideBarTrigger(m) {

                var controls = m.id === 'sett2' ? [] : [{ id: 'onSave', title: Resources.save, className: 'right blue nest-right' }, { id: 'onCancel', title: Resources.cancel, className: 'right' }];

                require([m.id], function (setView) {

                    var dialogOptions = {
                        icon: 'gear',
                        className: 'settings',
                        title: this.model.id ? m.get('title') : Resources.addVitrin,
                        content: new setView({ model: this.model, content: this.$el }),
                        footer: controls
                    };

                    Backbone.Radio.channel('Notify').request('show:overlay');
                    var dialog = Backbone.Radio.channel('Notify').request('once:dialog', dialogOptions);

                    this.listenTo(dialog, 'footer:button:click', function (a) {

                        if (a.model.id === 'onSave') {
                            //dialogOptions.content.onSave();

                            dialog.$el.hide();
                            Backbone.Radio.channel('Notify').request('hide:overlay');
                        }

                        if (a.model.id === 'onCancel') {
                            //dialogOptions.content.onCancel();
                            Backbone.Radio.channel('Notify').request('hide:overlay');
                            this.removeNew(dialog);
                        }
                    });

                    this.listenTo(dialog, 'dialog:closed', function () {
                        this.removeNew(dialog);
                    }, this);

                    this.listenTo(dialog, 'detach', function () {
                        Backbone.Radio.channel('Notify').request('hide:overlay');
                    });
                }.bind(this));
            },

            removeNew: function removeNew(dialog) {

                if (!this.model.id) {

                    //dialog.$el.hide();
                    //Backbone.Radio.channel('Notify').request('hide:overlay');

                    this.model.set('current', false);
                    this.model.collection.remove(this.model);

                    Backbone.history.navigate('', { trigger: true });
                }
            },

            onRenderChildren: function onRenderChildren() {

                this._loadWidgets(0);
            },

            onRender: function onRender() {

                Backbone.on("window:resizeend", function () {}, this);
            },

            _loadWidgets: function _loadWidgets(count) {

                if (this.children.length > count) {

                    var v = this.children.findByIndex(count);
                    count++;

                    this.listenToOnce(v, 'load:end', function () {
                        this._loadWidgets(count);
                    });

                    var p = v.model.get('requestParameters');

                    if (p.IsInvalid) {

                        v.ui.load.html('<p><i style="color:red;">' + Resources.irdb + '</i></p>');
                        v.trigger('load:end');
                    } else v.onLoad();
                } else Backbone.Radio.channel('Mode').request('enabled', true);
            },

            show: function show() {

                Backbone.Radio.channel('Mode').request('show', !this.model.get("IsShared"));
                Backbone.Radio.channel('Mode').request('left:init:model', this);

                this.model.trigger('change:Decoration', this.model, this.model.get('Decoration'));

                if (this.model.id) {

                    if (!this.isFetch) {

                        Backbone.Radio.channel('Mode').request('enabled', false);
                        Backbone.trigger('message:modal');
                        this.collection.fetch({ reset: true });
                        this.isFetch = true;
                    } else Backbone.Radio.channel('Mode').request('enabled', true);
                } else {
                    this.showSideBar();
                    this.sideBarTrigger(sideBarCollection[0]);
                }

                this.$el.show();

                var ratio = $(window).width() / this.$el.width();
                $('head meta[name=viewport]').attr('content', 'width=device-width, initial-scale=' + (ratio < 1 ? ratio : '1.0'));
            },

            collectionEvents: {

                update: function update(c, o) {

                    if (o.add) {

                        var m = o.changes.added[0],
                            v = this.children.findByModel(m);

                        v.switchMode(true).onLoad();
                        this.triggerMethod('select:one', m);

                        v._addSettings();

                        Backbone.Radio.channel('sidebar').request('open', { nameView: v.model.get('title'), view: v.getChildView('settings'), title: Resources.wst }, v.getChildView('settings').getMenu());
                    }
                },

                destroy: function destroy() {

                    Backbone.Radio.channel('sidebar').request('open', { nameView: this.model.get('title'), view: this, title: Resources.dbs }, sideBarCollection);
                },

                reset: function reset() {

                    Backbone.Radio.channel('Mode').request('enabled', true);
                    Backbone.trigger('message:hide');
                },

                error: function error() {
                    Backbone.trigger('message:hide');
                }
            },

            modelEvents: {

                'change:id': function changeId(m, id) {

                    if (id) {
                        Backbone.history.navigate(id, { trigger: false });
                        Backbone.Radio.channel('Mode').request('enabled', true);
                        Backbone.Radio.channel('Mode').request('turn:switch', true);
                    }
                },

                'change:current': function changeCurrent(m, v) {

                    if (v) {

                        Backbone.Radio.channel('Mode').request('turn:switch', false);
                        $(window).scrollTop(0);

                        Backbone.history.navigate(m.id || 'new', { trigger: !m.id });

                        this.show();
                    } else {
                        this.$el.removeClass('edit-mode').hide();
                    }
                },

                'change:Decoration': function changeDecoration(m, d) {

                    if (d) {
                        var css = {
                            "background-color": d.BackgroundColor,
                            "background-image": d.BackgroundImageLink ? "url('" + d.BackgroundImageLink + "')" : "none",
                            "background-attachment": "fixed",
                            "background-repeat": "no-repeat",
                            "background-position": "50% 50%",
                            "background-size": "auto"
                        };

                        if (d.BackgroundPosition === 1) css["background-size"] = "cover";else if (d.BackgroundPosition === 2) css["background-repeat"] = "repeat";else if (d.BackgroundPosition === 3) css["background-image"] = "none";

                        this.$el.css(css);
                    } else {
                        m.set('Decoration', {
                            BackgroundColor: 'rgba(255, 255, 255, 1)',
                            BackgroundImageLink: 'none',
                            BackgroundPosition: 3
                        });
                    }
                }
            },

            childView: widgetView,

            childViewEvents: {

                'widget:drag': function widgetDrag(m, left, top, isSave) {

                    this.children.each(function (v) {

                        if (v.$el.hasClass("widget-editing") && v.model.id !== m.id) {

                            var t = v.$el.position().top,
                                l = v.$el.position().left;

                            if (t < 0) t = 3;
                            if (l < 0) l = 3;

                            v.model.set({ top: t + top, left: l + left });

                            if (isSave) v.position.save();
                        }
                    }, this);
                },

                'fix:size': function fixSize(m) {

                    if (this.$el.width() < m.get('left') + m.get('width')) {

                        this.$el.width(m.get('left') + m.get('width'));

                        var ratio = $(window).width() / this.$el.width();
                        $('head meta[name=viewport]').attr('content', 'width=device-width, initial-scale=' + (ratio < 1 ? ratio : '1.0'));
                    }

                    if (this.$el.height() < m.get('top') + m.get('height')) {
                        this.$el.height(m.get('top') + m.get('height'));
                    }
                }

            },

            childViewTriggers: {
                'select:more': 'select:more',
                'select:one': 'select:one'
            }
        }),

        childViewTriggers: {
            'select:more': 'select:more:widget',
            'select:one': 'select:one:widget'
        }

    });
});
'use strict';

define('DecorationView', ['i18n!nls/resources.min', 'g/ImageGalleryView', 'spectrumColorView'], function (Resources, Gallery, SpectrumColor) {

    return Mn.View.extend({

        className: "VitrinDecoration",

        template: '#decoration-board',

        templateContext: {
            Resources: Resources
        },

        ui: {
            bgColor: 'input[name=BackgroundColor]',
            position: 'input[name="BackgroundPosition"]',
            link: 'input[name="BackgroundImageLink"]'
        },

        events: {

            "click @ui.position": function clickUiPosition() {
                this.model.set('BackgroundPosition', parseInt(this.$('input[name=BackgroundPosition]:checked').val()));
            },

            "click .icon-clear": function clickIconClear() {
                this.ui.link.val("");
            }
        },

        regions: {
            gallery: { el: '.image-gallery', replaceElement: true }
        },

        onRender: function onRender() {

            this.showChildView('gallery', new Gallery({ selectedImgPath: this.model.get('BackgroundImageLink') }));

            this.color = new SpectrumColor({ el: this.$('input.Decoration') });

            this.listenTo(this.color, "change:color", function ($elm, vrgba, a) {
                this.model.set('BackgroundColor', vrgba);
            });
        },

        onChildviewChangeItem: function onChildviewChangeItem(model) {
            this.model.set({
                BackgroundImageLink: model.get('FileUrl'),
                BackgroundPosition: this.model.get('BackgroundPosition') === 3 ? 1 : this.model.get('BackgroundPosition')
            });
        },

        modelEvents: {

            'change:BackgroundPosition': function changeBackgroundPosition(m, v) {

                this.ui.position.find("[value='" + v + "']").prop("checked", true);

                if (v === 3) {
                    this.model.set('BackgroundImageLink', 'none');
                    var m = this.getChildView('gallery').collection.findWhere({ select: true });
                    if (m) m.set('select', false);
                }
            },

            'change:BackgroundColor': function changeBackgroundColor(m, v) {
                this.color.$el.spectrum("set", v);
            }
        }
    });
});
'use strict';

define('@FirstView', ['i18n!nls/resources.min', 'baseurl'], function (Resources, baseurl) {

    var listView = Mn.CollectionView.extend({

        className: 'list',

        emptyView: Mn.View.extend({

            className: 'create',

            getTemplate: function getTemplate() {

                if (this.options.flag === 'my') return _.template('<section><span class="font-icon font-icon-add"></span><span><%- Resources.addVitrin %></span></section>');else return _.template('');
            },

            templateContext: {
                Resources: Resources
            },

            events: {

                'click': function click() {
                    Backbone.history.navigate(v.model.id || 'new', { trigger: true });
                }

            }

        }),

        childView: Mn.View.extend({

            template: '#first-item-template',
            templateContext: {
                baseurl: baseurl
            },

            triggers: {
                //'touchend': 'click:item',
                'click': 'click:item'
            },

            events: {

                'click i.remove': function clickIRemove(e) {

                    e.stopPropagation();

                    Backbone.trigger("message:confirm", {
                        title: Resources.askyousure, message: $.Format(Resources.deltext, Resources.todashboard, this.model.get("title")),
                        fx: function fx() {
                            this.model.destroy();
                        },
                        ctx: this
                    });
                }

            },

            modelEvents: {

                'change:Screen': function changeScreen(m, v) {
                    this.render();
                }
            }
        }),

        childViewTriggers: {
            'click:item': 'click:item'
        },

        childViewOptions: function childViewOptions() {
            return { flag: this.options.flag };
        },

        filter: function filter(m) {
            return this.options.flag === 'my' ? !m.get('IsShared') : m.get('IsShared');
        },

        onRenderChildren: function onRenderChildren() {

            if (this.options.flag === 'my') {

                var addView = Mn.View.extend({
                    className: 'create',
                    template: _.template('<section><span class="font-icon font-icon-add"></span><span><%- Resources.addVitrin %></span></section>'),
                    templateContext: {
                        Resources: Resources
                    }
                });

                this.addChildView(new addView({ model: new Backbone.Model({ id: 'create' }) }), 0);
            } else this.$('i.remove').hide();
        },

        onRender: function onRender() {

            this.$el.sortable({

                placeholder: "placeholder-class",
                items: "div:not(.create)",
                stop: function (e, ui) {

                    //console.log('sort:stop', args, this);

                }.bind(this)

            }).disableSelection();
        }

    });

    return Mn.View.extend({

        template: '#first-page-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            title: 'h1'
        },

        regions: {
            list: { el: '.list', replaceElement: true }
        },

        events: {

            'touchstart button': 'tabNav',
            'click button': 'tabNav',

            'click .create': function clickCreate() {
                Backbone.history.navigate('new', { trigger: true });
            }

        },

        tabNav: function tabNav(e) {

            var link = $(e.target).closest('button').attr('data-link');
            Backbone.history.navigate(link === 'shared' ? 'demo' : '', { trigger: true });
        },

        onBeforeRender: function onBeforeRender() {
            this.$el.attr('id', 'first-page');
        },

        onRender: function onRender() {

            this.showChildView('list', new listView({ collection: this.collection, flag: this.options.filter }));

            var res = {
                my: Resources.myDashboard,
                shared: Resources.shareDashboard
            };

            this.$("button[data-link='" + this.options.filter + "']").addClass("pressed");

            this.ui.title.text(res[this.options.filter]);
        },

        onChildviewClickItem: function onChildviewClickItem(v) {

            Backbone.history.navigate(v.model.id || 'new', { trigger: true });
        }

    });
});
'use strict';

define('mainView', ['i18n!nls/resources.min', '@FirstView', '@SliderView', '@DashboardsView', 'leftPanel', 'topPanel', 'global.radio.sideBar'], function (Resources, firstView, sliderView, dashboardsView, leftPanel, topPanel) {

    var modeChannel = Mn.Object.extend({
        channelName: 'Mode'
    });

    new modeChannel();

    var selectWidget = Mn.Object.extend({
        channelName: 'selectWidget'
    });

    new selectWidget();

    var boardModel = Backbone.Model.extend({
        defaults: {
            id: null,
            title: Resources.title,
            IsShared: false,
            current: false,
            isInit: false,
            Screen: '',
            Decoration: {
                BackgroundColor: 'rgba(255, 255, 255, 1)',
                BackgroundImageLink: 'none',
                BackgroundPosition: 3
            },
            CDate: new Date().toISOString()
        },
        validate: function validate(attr, o) {
            var output = [];

            if (!$.trim(attr.title)) output.push({ name: "title" });

            if (output.length) return output;
        }
    });

    var boardCollection = Backbone.Collection.extend({
        model: boardModel,
        url: function url() {
            return '/api/wall/';
        }
    });

    return Mn.View.extend({

        template: '#main-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            mode: '.mode-info',
            sw: '.g-form--switch'
        },

        regions: {
            first: { el: '#first', replaceElement: true },
            container: { el: '#container', replaceElement: true },
            top: { el: '.Shna', replaceElement: true },
            left: { el: '#left-property', replaceElement: true },
            slider: { el: '#slider', replaceElement: true },
            dialog: { el: '#dialog', replaceElement: true }
        },

        triggers: {

            'click @ui.mode:not(.disabled) button': 'click:mode'

        },

        onClickMode: function onClickMode() {
            Backbone.Radio.channel('Mode').request('turn:switch', this.ui.sw.attr("mode") !== "on");
        },

        initialize: function initialize() {

            this.collection = new boardCollection();
            this.collection.comparator = function (m) {
                return -new Date(m.get('CDate'));
            };

            var channelMode = Backbone.Radio.channel('Mode');

            channelMode.reply('show', function (flag) {
                if (flag) this.ui.mode.show();else this.ui.mode.hide();
            }.bind(this));

            channelMode.reply('enabled', function (flag) {
                if (flag) this.ui.mode.removeClass('disabled');else this.ui.mode.addClass('disabled');
            }.bind(this));

            // switch-mode
            channelMode.reply('turn:switch', this.switchMode.bind(this));

            // render dialog
            Backbone.Radio.channel('Notify').reply('add:dialog', function (dialog) {

                if (this.getRegion('dialog').hasView()) {

                    var f = this.getChildView('dialog').$el.is(':visible');

                    if (f) {

                        //

                    } else this.showChildView('dialog', dialog);
                } else this.showChildView('dialog', dialog);
            }.bind(this));
        },

        onBeforeRender: function onBeforeRender() {

            Backbone.trigger('message:modal');
            this.collection.fetch({ reset: true });
        },

        onRender: function onRender() {

            this.showChildView('top', new topPanel());
            this.showChildView('left', new leftPanel());

            this.showChildView('slider', new sliderView({ collection: this.collection }));

            this.showChildView('container', new dashboardsView({ collection: this.collection }));
        },

        childViewEvents: {

            'render:vitrin:after:clone:widget': function renderVitrinAfterCloneWidget(m) {

                var v = this.getChildView('container').children.findByModel(m);

                if (v.isFetch) v.collection.fetch({ reset: true });
            },

            'select:more:widget': function selectMoreWidget(m) {

                this.getChildView('top').getChildView('position').collection.add(m);
            },

            'select:one:widget': function selectOneWidget(m) {

                var pos = this.getChildView('top').getChildView('position');

                pos.collection.reset();
                if (m) pos.collection.add(m);
            },

            'dashboards:container:full': function dashboardsContainerFull() {

                if (this.isWaitShow) this.show();
            },

            'slider:new:dashboard': function sliderNewDashboard() {
                this.options.uid = null;
                this.show();
            },

            'show:left:panel': function showLeftPanel() {

                this.getChildView('left').onShow();
            }

        },

        showFirst: function showFirst(filter) {

            this.getRegion('dialog').empty();

            Backbone.Radio.channel('Mode').request('show', false);

            if (this.getRegion('first').hasView()) {

                if (this.getChildView('first').options.filter !== filter) {
                    this.getChildView('first').options.filter = filter;
                    this.getChildView('first').render();
                    this.getChildView('first').$el.show();
                } else this.getChildView('first').$el.slideDown();
            } else this.showChildView('first', new firstView({ collection: this.collection, filter: filter }));
        },

        onShow: function onShow() {

            if (this.getRegion('first').hasView()) this.getChildView('first').$el.slideUp();

            if (this.collection.length) this.show();else this.isWaitShow = true;
        },

        show: function show() {

            if (this.options.uid) {

                this.clearCurrent();
                var m = this.collection.get(this.options.uid);

                if (m) m.set('current', true);else {
                    Backbone.trigger('message:warning', { message: Resources.dnvu });
                    Backbone.history.navigate('', { trigger: true });
                }
            } else {

                this.getRegion('dialog').empty();
                Backbone.Radio.channel('Mode').request('enabled', false);
                this.getChildView('left').$el.removeClass('show');
                this.getChildView('top').getChildView('position').collection.reset();

                var model = this.collection.findWhere({ id: null }) || new boardModel();
                model.collection = this.collection;

                this.collection.add(model);

                this.clearCurrent();
                model.set('current', true);

                var v = this.getChildView('container').children.findByModel(model);
                this.getChildView('top').onShow(v);
            }
        },

        collectionEvents: {

            remove: function remove() {

                if (!this.collection.length) {
                    this.options.uid = null;
                    this.show();
                }
            },

            reset: function reset() {

                if (!this.collection.length) {
                    this.options.uid = null;
                    this.show();
                }

                Backbone.trigger('message:hide');
            },

            error: function error() {
                Backbone.trigger('message:hide');
            }
        },

        clearCurrent: function clearCurrent() {

            var c = this.collection.findWhere({ current: true });
            if (c) c.set('current', false);
        },

        switchMode: function switchMode(flag) {

            var m = this.collection.findWhere({ current: true }),
                v = this.getChildView('container').children.findByModel(m);

            if (flag) {

                this.ui.sw.attr("mode", "on");
                v.$el.addClass('edit-mode');

                this.getChildView('top').onShow(v);

                v.showSideBar();

                // show edit buttons
                this.getChildView('slider').getChildView('list').children.each(function (v) {
                    if (!v.model.get('IsShared')) v.$('span').css("display", "inline-block");
                });

                v.children.each(function (w) {
                    w.switchMode(true);
                });
            } else {

                this.ui.sw.attr("mode", "off");
                v.$el.removeClass('edit-mode');

                this.getChildView('top').$el.hide();
                this.getChildView('left').$el.removeClass('show');
                //this.getChildView('right').$el.removeClass('show');

                Backbone.Radio.channel('sidebar').trigger('hide');

                this.getRegion('dialog').empty();

                // hide edit buttons                    
                this.getChildView('slider').getChildView('list').children.each(function (v) {
                    if (v.model.id) v.$('span').hide();
                });

                v.children.each(function (w) {
                    w.switchMode(false);
                });
            }
        }

    });
});
'use strict';

define('@SliderView', ['baseurl', 'i18n!nls/resources.min'], function (baseurl, Resources) {

    var VITRINA_ITEM_WIDTH = 273;

    var sliderList = Mn.CollectionView.extend({

        className: 'slider',

        childView: Mn.View.extend({

            className: "vitrina",

            template: '#slider-item-template',
            templateContext: {
                baseurl: baseurl
            },

            events: {

                //'touchstart .panel-vitrin': 'setCurrent',
                'click .panel-vitrin': 'setCurrent',

                'click .delete-vitrina': function clickDeleteVitrina() {

                    Backbone.trigger("message:confirm", {
                        title: Resources.askyousure, message: $.Format(Resources.deltext, Resources.todashboard, this.model.get("title")),
                        fx: function fx() {

                            if (this.model.get('current')) this.model.set('current', false);

                            this.model.destroy();
                            Backbone.history.navigate('', { trigger: true });
                        },
                        ctx: this
                    });
                }
            },

            setCurrent: function setCurrent() {

                var c = this.model.collection.findWhere({ current: true });

                if (c) {

                    if (this.model.id !== c.id) {
                        c.set('current', false);
                        this.model.set('current', true);
                    }
                } else this.model.set('current', true);
            },

            modelEvents: {

                'change:current': function changeCurrent(m, v) {

                    if (v) {

                        this.$el.addClass('current');
                        this.triggerMethod('slider:render', this.$el.index());
                    } else this.$el.removeClass('current');
                },

                'change:Screen': function changeScreen(m, v) {

                    this.render();
                },

                'change:title': function changeTitle(m, v) {
                    this.$('.name-vitrina').text(v);
                }

            },

            onDetach: function onDetach() {
                this.triggerMethod('slider:board:detached', this);
            }

        }),

        calcStep: function calcStep() {

            var dw = this.$el.closest('.items-wrap').width(),
                sw = this.collection.length * VITRINA_ITEM_WIDTH,
                flag = sw > dw;

            if (flag) this.maxStep = Math.ceil((sw - dw) / VITRINA_ITEM_WIDTH);else this.maxStep = 0;

            if (this.step >= this.maxStep) flag = false;

            this.triggerMethod('show:more', flag);
        },

        slideLine: function slideLine(p) {

            var flag = p >= this.maxStep;
            if (flag) this.step = this.maxStep;else this.step = p;

            if (this.step !== 0) this.step -= 1;

            this.$el.animate({ "left": '-' + this.step * VITRINA_ITEM_WIDTH });
            this.triggerMethod('show:more', !flag);
        },

        initialize: function initialize() {

            this.step = 0;
            this.maxStep = 0;
            Backbone.on("window:resizeend", this.calcStep, this);
        },

        onRenderChildren: function onRenderChildren() {

            var w = this.collection.length * VITRINA_ITEM_WIDTH;
            this.$el.width(w);

            this.calcStep();

            var cm = this.collection.findWhere({ current: true });

            if (cm) {
                var v = this.children.findByModel(cm);
                v.$el.addClass('current');
                this.slideLine(v.$el.index());
            }
        },

        onChildviewSliderRender: function onChildviewSliderRender(p) {
            this.slideLine(p);
        }
    });

    return Mn.View.extend({

        template: '#slider-template',
        templateContext: {
            Resources: Resources
        },

        triggers: {
            'click .show-add-vitrin': 'slider:new:dashboard'
        },

        events: {

            'click .bolt-lug': 'top',
            "click .le": 'left',
            "click .ri": 'right',

            'touchstart .bolt-lug': 'top',
            "touchstart .le": 'left',
            "touchstart .ri": 'right'
        },

        ui: {
            more: '.continue'
        },

        regions: {
            list: '.items-wrap'
        },

        onRender: function onRender() {

            this.$el.attr('id', 'vitrin-list');
            this.showChildView('list', new sliderList({ collection: this.collection }));
        },

        collectionEvents: {

            update: function update(c, o) {

                this.getChildView('list').calcStep();
            },

            reset: function reset() {

                setTimeout(function () {
                    this.top();
                }.bind(this), 8000);
            }
        },

        top: function top() {
            this.$el.toggleClass("abs").find(".arrow").toggleClass("nord");
        },

        left: function left() {
            var list = this.getChildView('list');
            if (list.step > 0) {
                list.step--;
                list.$el.animate({ "left": "+=" + VITRINA_ITEM_WIDTH });
                this.ui.more.show();
            }
        },

        right: function right() {
            var list = this.getChildView('list');
            if (list.step < list.maxStep) {
                list.step++;
                list.$el.animate({ "left": "-=" + VITRINA_ITEM_WIDTH });
                if (list.step === list.maxStep) this.ui.more.hide();
            } else this.ui.more.hide();
        },

        onChildviewShowMore: function onChildviewShowMore(flag) {
            if (flag) this.ui.more.show();else this.ui.more.hide();
        }

    });
});
'use strict';

define('d3:histogram', ['global.charts.settingsmodel'], function (subSettings) {

    return Mn.View.extend({

        template: _.template(''),

        initialize: function initialize() {

            this.flag = false;
            this.isGrouped = false;
            this.Grops = {};
            var items = this.options.items.variations[1].flow[0].points;
            this.dx = [];
            this.collection = new Backbone.Collection();

            var name = this.model.get('typeName') + ".GhaphSubSettings";
            var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: name });

            this.subSettings = new subSettings();

            if (p) this.subSettings.set(p.WidgetParamValue);

            _.each(items, function (m) {

                var z = {
                    id: m.elId,
                    x: m.x,
                    y: parseFloat(m.y),
                    title: m.text //_.findWhere(this.model.get('feed').head, { systemName: 'yval' }).displayName
                };

                var e = this.collection.get(z.id),
                    date = new Date(z.x),
                    xout = z.x;

                if (date.toString() !== "Invalid Date") {
                    xout = date;
                    this.flag = true;
                }

                if (this.dx.indexOf(xout) === -1) this.dx.push(xout);

                if (e) {
                    var ys = e.get("y");
                    ys.push(z.y);
                    e.set("y", ys);
                } else {
                    z.y = [z.y];
                    this.collection.add(z);
                }
            }, this);
        },

        onBeforeRender: function onBeforeRender() {

            this.$el.css({ position: 'absolute', top: 0, left: 0, bottom: 0, right: 0 });
        },

        onRender: function onRender() {

            var columns = [];

            this.collection.each(function (m, i) {

                var ay = m.get("y"),
                    gid = m.get("GroupName");

                if (this.dx.indexOf("x") === -1) this.dx.unshift("x");

                if (ay.length !== 1) {
                    columns.push(this.dx);
                    ay.unshift(m.get("title"));
                } else ay.unshift(m.get("x"));

                columns.push(ay);

                if (gid) {
                    this.isGrouped = true;
                    if (!this.Grops[gid]) this.Grops[gid] = [m.get("x")];else {
                        this.Grops[gid].push(m.get("x"));
                    }
                }
            }, this);

            var data = {
                columns: columns,
                type: this.options.chart || 'bar'
            },
                axis = {
                y: {
                    label: this.subSettings.get('primaryYAxisTitle')
                }
            },
                groups = [],
                category = [];

            if (this.flag) {
                data.x = "x";
                axis.x = {
                    type: 'timeseries',
                    tick: {
                        format: '%Y-%m-%d'
                    }
                };
            }

            if (this.isGrouped) {
                for (var a in this.Grops) {
                    groups.push(this.Grops[a]);
                    category.push(a);
                    if (category.length >= 2) {
                        _.each(columns, function (a) {
                            _.each(groups, function (g, i) {
                                if (_.contains(g, a[0])) a.splice(i + 1, 0, 0);
                            });
                        });
                    }
                }

                axis.x = {
                    type: 'category',
                    categories: category
                };
                data.groups = groups;
            }

            try {

                c3.generate({

                    bindto: this.el,
                    data: data,
                    tooltip: {
                        grouped: false,
                        format: {
                            title: function title(d) {
                                return this.title;
                            }
                        }
                    },
                    axis: axis,
                    bar: {
                        width: {
                            ratio: 0.5
                        }
                    }
                });
            } catch (e) {

                console.error(e.message, data);
            }
        }
    });
});
'use strict';

define('leftPanel', ['WidgetModel', 'MasterCreateView'], function (WidgetModel, MasterCreateView) {

        return Mn.View.extend({

                className: 'side-panel',
                template: _.template('<svg class="svg-icon icon-close"><use xlink:href="#icon-close" /></svg><section id="master-create"></section>'),

                events: {
                        'click .icon-close': function clickIconClose() {
                                this.$('.step-panel').hide();
                                this.$el.removeClass('big').removeClass("show");
                        }
                },

                regions: {
                        master: "#master-create"
                },

                initialize: function initialize() {

                        this.model = new WidgetModel();

                        Backbone.Radio.channel('Mode').reply('left:init:model', function (v) {

                                this.collection = v.collection;
                        }.bind(this));
                },

                onRender: function onRender() {
                        this.$el.attr('id', 'left-property');
                },

                onShow: function onShow() {

                        this.model = new WidgetModel();
                        this.model.collection = this.collection;

                        if (!this.$el.hasClass("show")) {
                                this.$el.addClass("show");
                                this.showChildView('master', new MasterCreateView({ model: this.model }));
                        }
                },

                onChildviewCloseLeft: function onChildviewCloseLeft() {
                        this.$el.removeClass('show');
                        this.getRegion('master').empty();
                }
        });
});
'use strict';

define('topPanel', ['i18n!nls/resources.min', 'global.view.dropDown', 'global.view.dialog', 'settings.decorationWidget'], function (Resources, dropDown, dialog, decorationContent) {

    var MIN_SIZE = 150;

    var cloneDialog = Mn.View.extend({

        template: '#clone-widget-dialog-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            nd: '#newDBName'
        },

        regions: {
            dd: { el: '#dashboards-list', replaceElement: true }
        },

        events: {
            "change select.profile": "selectVitrina"
        },

        onRender: function onRender() {

            var collection = new Backbone.Collection(this.model.collection.models);
            collection.add({ id: 0, title: Resources.wall_toPanelView_newVitrina }, { at: 0 });

            var dd = new dropDown({ collection: collection, current: "0" });
            this.showChildView('dd', dd);

            this.listenTo(dd, "dropdown:select", function (model) {
                this.selectClonningVitrina(model.id);
            });

            this.getChildView('dd').getChildView('container').setFilter(function (m) {
                return !m.get('IsShared');
            }.bind(this));
        },

        //#4277 Volkov - поле редактирования для ввода имени витриы скрывается, если пользователь клонирует на существующую витрину 
        selectClonningVitrina: function selectClonningVitrina(vitrina) {
            if (vitrina) $(this.ui.nd).parent().parent().hide();else $(this.ui.nd).parent().parent().show();
        }
    });

    var positionView = Mn.View.extend({

        //tagName: 'span',
        tagName: 'div',
        className: 'position-buttons',

        template: '#position-btns-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            dx: "input[name='PositonPadding-x']",
            dy: "input[name='PositonPadding-y']",
            width: 'input[name="width"]',
            height: 'input[name="height"]'
        },

        regions: {
            mo: { el: '#multi-operation', replaceElement: true },
            dialog: { el: '#dialog', replaceElement: true }
        },

        events: {

            "click button:not([disabled])": "fixed",

            'keyup @ui.dx': function keyupUiDx(e) {
                if (e.keyCode === 13) this.fixed(e, 'dispose-x');
            },

            'keyup @ui.dy': function keyupUiDy(e) {
                if (e.keyCode === 13) this.fixed(e, 'dispose-y');
            },

            'keyup @ui.width': function keyupUiWidth(e) {

                if (e.keyCode === 13) this._setProp(parseInt(this.ui.width.val()), 'width');
            },

            'keyup @ui.height': function keyupUiHeight(e) {

                if (e.keyCode === 13) this._setProp(parseInt(this.ui.height.val()), 'height');
            }

        },

        _setProp: function _setProp(prop, name) {

            //if ( this.keyTimeout )
            //    clearTimeout( this.keyTimeout );

            //this.keyTimeout = setTimeout( function () {

            var ch = this.currentDashboard.children;

            this.collection.each(function (m) {

                if (isNaN(prop) || prop < MIN_SIZE) {
                    this.ui[name].val(m.get(name));
                } else {
                    m.set(name, prop);
                    ch.findByModel(m).position.save();
                }
            }, this);

            //}.bind( this ), 500 );
        },

        fixed: function fixed(e, name) {

            var name = $(e.target).closest("button").attr("name") || name,
                dx = parseInt(this.ui.dx.val()),
                dy = parseInt(this.ui.dy.val()),
                propname = name;

            if (name === "front") {
                this.calcPosition(true);
                return;
            }
            if (name === "back") {
                this.calcPosition(false);
                return;
            }

            if (this.collection.length > 1) {

                this.firstModel = this.collection.at(0);

                var data = [],
                    first = this.firstModel.get(propname),
                    prev = {
                    left: this.firstModel.get("left"),
                    top: this.firstModel.get("top")
                };

                this.collection.each(function (m) {

                    var o = {};

                    switch (name) {

                        case "dispose-x":
                            propname = "left";
                            first = prev.left;
                            if (isNaN(dx)) {
                                this.ui.dx.css('border-color', 'red');
                                setTimeout(function () {
                                    this.ui.dx.css('border-color', '');
                                }.bind(this), 2000);
                                return;
                            } else this.ui.dx.css('border-color', '');

                            prev.left += m.get("width") + dx;
                            break;

                        case "dispose-y":
                            propname = "top";
                            first = prev.top;
                            if (isNaN(dy)) {
                                this.ui.dy.css('border-color', 'red');
                                setTimeout(function () {
                                    this.ui.dy.css('border-color', '');
                                }.bind(this), 2000);
                                return;
                            } else this.ui.dx.css('border-color', '');
                            prev.top += m.get("height") + dy;
                            break;

                        case "size":
                            first = {};
                            first.width = this.firstModel.get("width");
                            first.height = this.firstModel.get("height");
                            propname = "size";
                            break;

                        case "middle":
                            propname = "top";
                            first = this.firstModel.get("top") + this.firstModel.get("height") / 2 - m.get("height") / 2;
                            if (first < 0) first = 5;
                            break;

                        case "bottom":
                            propname = "top";
                            first = this.firstModel.get("top") + this.firstModel.get("height") - m.get("height");
                            if (first < 0) first = 5;
                            break;

                        case "center":
                            propname = "left";
                            first = this.firstModel.get("left") + this.firstModel.get("width") / 2 - m.get("width") / 2;
                            if (first < 0) first = 5;
                            break;

                        case "right":
                            propname = "left";
                            first = this.firstModel.get("left") + this.firstModel.get("width") - m.get("width");
                            if (first < 0) first = 5;
                            break;
                    }

                    data.push({
                        WidgetUid: m.id,
                        PlacementWidth: name === "size" ? first.width : name === "width" ? first : m.get("width"),
                        PlacementHeight: name === "size" ? first.height : name === "height" ? first : m.get("height"),
                        PlacementTop: propname === "top" ? first : m.get('top'),
                        PlacementLeft: propname === "left" ? first : m.get('left'),
                        ZIndex: name === "zIndex" ? first : m.get("zIndex")
                    });

                    if (name !== "size") {
                        m.set(propname, first);
                    } else {
                        m.set({ width: first.width, height: first.height });
                    }
                }, this);

                this.onSave(data);
            }
        },

        calcPosition: function calcPosition(front) {

            var first = this.collection.at(0),
                child = this.currentDashboard.children,
                p = 1;

            if (!front) {

                var data = [];
                this.currentDashboard.collection.each(function (m) {
                    if (parseInt(m.get('zIndex')) === 1) {
                        var v = child.findByModel(m);
                        m.set("zIndex", m.get('zIndex') + 1);
                        data.push(v.position.toJSON());
                    }
                });

                this.onSave(data);
            } else {

                var max = this.currentDashboard.collection.max(function (m) {
                    return m.get("zIndex");
                });

                if (max) if (first.id !== max.id) p = parseInt(max.get("zIndex")) + 1;else return;
            }

            first.set("zIndex", p);
            var fv = child.findByModel(first);
            fv.position.save();
            fv.$el.removeClass('widget-editing');
        },

        onSave: function onSave(data) {

            $.ajax({
                method: "POST",
                contentType: 'application/json; charset=utf-8',
                url: '/api/wall/' + this.model.id + '/positions',
                data: JSON.stringify(data)
            });

            //this.collection.reset();
        },

        collectionEvents: {

            destroy: function destroy(m) {
                this.$('#count').text(this.collection.length);
            },

            add: function add(m) {

                this.currentDashboard.children.findByModel(m).$el.addClass('widget-editing');

                this.$("button[name=front], button[name=back], button[name=resize]").removeAttr("disabled", "disabled");

                if (this.collection.length > 1) {

                    this.$("button").removeAttr("disabled");
                    this.ui.width.val('');
                    this.ui.height.val('');

                    var a = [{ id: 'decoration', title: Resources.m3, icon: 'appearance' }, { id: 'clear', title: Resources.del, icon: 'trash' }];

                    Backbone.Radio.channel('sidebar').request('open', { titleView: '', view: this, name: Resources.dbs }, a);
                } else {
                    this.ui.width.val(m.get('width'));
                    this.ui.height.val(m.get('height'));
                }

                this.getChildView('mo').$el.removeClass('disabled');
                this.$('#count').text(this.collection.length);
            },

            reset: function reset(c, o) {

                if (!this.currentDashboard) return;

                this.currentDashboard.children.each(function (v) {

                    v.$el.removeClass('widget-editing');

                    if (v.getRegion('settings').hasView()) v.getChildView('settings').hide();
                });

                this.$('#count').text(this.collection.length);

                this.$("button").attr("disabled", "disabled");

                this.getChildView('mo').$el.addClass('disabled');
            }
        },

        initialize: function initialize() {

            this.collection = new Backbone.Collection();
        },

        onRender: function onRender() {

            this.$("button").attr("disabled", "disabled");

            this.showChildView('mo', new dropDown({
                placeholder: '<div class="item"><span><svg><use xlink:href="#selected-widgets" /></svg></span><span>' + Resources.selectedWidgets + '</span><span id="count">0</span></div>',
                collection: new Backbone.Collection([{ id: 'clone', title: Resources.cloneTo, icon: 'icon-clone' }, { id: 'clear', title: Resources.deleteItem, icon: 'icon-trash' }])
            }));

            this.getChildView('mo').$el.addClass('disabled');
        },

        childViewEvents: {

            'dropdown:select': function dropdownSelect(m, name) {

                switch (m.id) {

                    case 'clone':

                        var d = new dialog({
                            content: new cloneDialog({ model: this.model }),
                            title: Resources.cloneTo,
                            icon: 'clone',
                            footer: new Backbone.Collection([{ id: 'clone', title: Resources.save, className: 'blue right' }])
                        });

                        this.listenTo(d, 'footer:button:click', function (v) {

                            var did = d.model.get('content').getChildView('dd').current.id;

                            if (!did) {

                                var title = $.trim(d.model.get('content').ui.nd.val());
                                if (title) {

                                    this.model.collection.create({ title: title }, { wait: true });

                                    this.listenToOnce(this.model.collection, 'sync', function (m) {

                                        this._cloneWidgets(m.id, d);
                                        d.destroy();
                                    }.bind(this));
                                } else d.getChildView('notify').showNotify(Resources.newDBName + ' - ' + Resources.isEmpty.toLowerCase());
                            } else {
                                this._cloneWidgets(did, d);
                                d.destroy();
                            }
                        });

                        Backbone.Radio.channel('Notify').request('add:dialog', d);

                        break;

                    case 'clear':
                        this._clearWidgets();
                        break;
                }
            }
        },

        sideBarTrigger: function sideBarTrigger(m) {

            switch (m.id) {

                case 'decoration':

                    var one = this.collection.at(0);

                    var d = new dialog({
                        content: new decorationContent({ model: one }),
                        title: Resources.m3,
                        icon: 'appearance',
                        footer: new Backbone.Collection([{ id: 'decor', title: Resources.save, className: 'blue right' }])
                    });

                    this.listenTo(one, 'change', function () {
                        this.collection.each(function (m) {
                            m.set('Decoration', one.get('Decoration'));
                        });
                    });

                    this.listenTo(d, 'footer:button:click', function (v) {

                        this.collection.each(function (m) {
                            m.save();
                        });

                        d.getChildView('notify').showNotify(Resources.success);
                    });

                    Backbone.Radio.channel('Notify').request('add:dialog', d);

                    break;

                case 'clear':
                    this._clearWidgets();
                    break;
            }
        },

        _cloneWidgets: function _cloneWidgets(id, d) {

            var data = {
                widgets: this.collection.pluck('id'),
                vitrins: [id]
            };

            if (!data.widgets || !data.widgets.length) {
                this.collection.reset();
                return;
            }

            $.ajax({ url: '/api/wall/service/widgetclonning', data: data, type: "POST" }).done(function () {

                // обновить целевую витрину (если она загружена виджеты не появятся)
                var md = this.model.collection.get(data.vitrins[0]);
                this.triggerMethod('render:vitrin:after:clone:widget', md);

                // если клонирование производится в эту же витрину у виджетов пропадает выделение
                Backbone.Radio.channel('Mode').request('turn:switch', false);
                //d.getChildView('notify').showNotify(Resources.success);

                this.collection.reset();
            }.bind(this)).fail(function () {

                d.getChildView('notify').showNotify("Internal Error");
            });
        },

        _clearWidgets: function _clearWidgets() {

            Backbone.trigger("message:confirm", {

                title: Resources.askyousure, message: $.Format(Resources.deltext, Resources.widget, this.collection.pluck("title").join(', ')),

                fx: function fx() {

                    Array.from(this.collection.models).map(function (m) {

                        m.destroy();
                    });
                },

                ctx: this
            });
        }
    });

    return Mn.View.extend({

        className: 'Shna',

        template: '#top-buttons-template',
        templateContext: {
            Resources: Resources
        },

        triggers: {
            'click .show-add-widget-btn': 'show:left:panel'
            //'click .font-icon-repair': 'show:right:panel'
        },

        events: {

            "mouseenter .show-add-widget-btn": function mouseenterShowAddWidgetBtn(e) {
                $(e.target).closest("button").find(".anbr-tooltip").show();
            },

            "mouseleave .show-add-widget-btn": function mouseleaveShowAddWidgetBtn(e) {
                $(e.target).closest("button").find(".anbr-tooltip").fadeOut();
            }
        },

        regions: {
            position: { el: '#position-buttons', replaceElement: true }
        },

        onRender: function onRender() {

            this.showChildView('position', new positionView());
        },

        onShow: function onShow(v) {

            this.getChildView('position').currentDashboard = v;
            this.getChildView('position').model = v.model;

            this.$el.show();

            if (!v.collection.length) this.$(".show-add-widget-btn").find(".anbr-tooltip").show();
        },

        childViewTriggers: {
            'render:vitrin:after:clone:widget': 'render:vitrin:after:clone:widget'
        }

    });
});
'use strict';

define('requestView', ['bdid', 'i18n!nls/resources.min', 'services.library.libraryView', 'global.view.dialog', 'global.view.connect'], function (bdid, Resources, requestLibrary, dialogView, connectView) {

    var collectionRequests = Backbone.Collection.extend({
        model: Backbone.Model.extend({
            idAttribute: "rid",
            defaults: {
                rid: 0,
                domain: "",
                dbase: parseInt(bdid),
                requestid: null,
                param: [],
                page: 1,
                pagesize: 10
            }
        }),
        url: function url() {
            return '/api/interactive/getparamsforwall/';
        }
    });

    var requestView = Mn.View.extend({

        className: 'item',

        template: _.template('<input type="radio" id="<%- rid %>_<%- prefix %>" class="g-form--radio" name="radio_MasterCreate"><label for="<%- rid %>_<%- prefix %>"><%- title %></label><svg class="svg-icon icon-close"><use xlink:href="#icon-close" /></svg>'),

        triggers: {

            "click input": {
                event: 'click:item',
                stopPropagation: false,
                preventDefault: false
            },

            "click .icon-close": 'close'
        },

        onClose: function onClose() {

            Backbone.trigger("message:confirm", {
                title: Resources.askyousure, message: Resources.crn,
                fx: function fx() {
                    this.model.destroy({ wait: true });
                },
                ctx: this
            });
        }
    });

    var listRequests = Mn.CollectionView.extend({

        className: 'list-area',

        childView: requestView,

        emptyView: Mn.View.extend({ template: _.template('<div class="item">' + Resources.N + '</div>') }),

        onRenderChildren: function onRenderChildren() {

            if (this.requestAddedID) {

                var model = this.collection.findWhere({ requestid: parseInt(this.requestAddedID) });
                if (model) {
                    this.children.findByModel(model).$('input').prop('checked', true);
                    this.requestAddedID = null;
                }
            }

            if (this.model.get('requestParameters') && this.model.get('requestParameters').rid) {

                model = this.collection.get(this.model.get('requestParameters').rid);
                this.children.findByModel(model).$('input').prop('checked', true);
            }
        },

        childViewOptions: function childViewOptions(m) {
            m.set('prefix', this.model.get('widgetID'));
        },

        childViewTriggers: {
            'click:item': 'child:click:item'
        }
    });

    return Mn.View.extend({

        template: templates['requests-template'],
        templateContext: {
            Resources: Resources
        },

        ui: {
            description: '.description',
            t: '.title2'
        },

        regions: {
            list: { el: '.list-area', replaceElement: true }
        },

        events: {

            "click .refresh": function clickRefresh() {

                this.collection.fetch({ reset: true });
                this.model.set({ "requestParameters": {} });
            },

            "click .library": function clickLibrary(e) {

                var connect = new connectView();

                var d = new dialogView({
                    color: 'blue',
                    icon: 'gear',
                    modal: true,
                    size: 'full',
                    title: Resources.titleReqLib,
                    footer: new Backbone.Collection([{ id: 'cancel', title: Resources.cancel }, { id: 'connect', title: Resources.Connect, className: 'right blue disabled' }]),
                    content: connect
                });

                this.listenTo(d, 'footer:button:click', function (v) {

                    var dbase = '';

                    switch (v.model.id) {

                        case 'cancel':
                            d.close();break;

                        case 'connect':

                            dbase = connect.collection.at(0).id;

                            $.ajaxSettings.headers.key = $.mergeUrlParam($.ajaxSettings.url, { db: 'db' + dbase });

                            d.model.get('footer').set([{ id: 'cancel', title: Resources.cancel }, { id: 'add', title: Resources.add, className: 'right blue' }]);

                            d.model.set('content', new requestLibrary({ widgetType: this.model.get("typeName"), dbase: dbase }));

                            break;

                        case 'add':

                            var library = d.model.get('content');

                            if (!library.requestID) library.triggerMethod('show:message', Resources.noselect);else {

                                var data = library.getChildView('params').collection.toJSON(),
                                    requestParameters = {
                                    domain: window.location.host,
                                    dbase: dbase,
                                    requestid: library.requestID,
                                    parameters: data
                                };

                                $.ajax({ url: "/api/interactive/paramsforwall", data: $.param(requestParameters), type: "POST" }).done(function (m, n) {

                                    this.getChildView('list').requestAddedID = library.requestID;

                                    this.collection.fetch({
                                        reset: true,
                                        success: function (c) {

                                            var data = this.collection.findWhere({ requestid: parseInt(library.requestID) });

                                            if (data) {
                                                this.model.set({ "requestParameters": data.toJSON() });
                                                d.close();
                                            } else Backbone.trigger('message:warning', { message: Resources.error + ' ' + Resources.N });
                                        }.bind(this)
                                    });
                                }.bind(this));
                            }

                            break;
                    }
                });

                this.listenTo(connect, 'connect:made', function () {
                    d.getChildView('footer').children.findByIndex(1).$('button').removeClass('disabled');
                });

                Backbone.Radio.channel('Notify').request('add:dialog', d);
            }
        },

        initialize: function initialize() {

            this.collection = new collectionRequests();
        },

        onAttach: function onAttach() {

            if (["WidgetSource", "WidgetReporting", "WidgetHtml", "WidgetSemNet"].indexOf(this.model.get("typeName")) === -1) {

                this.showChildView('list', new listRequests({ collection: this.collection, model: this.model }));

                this.collection.url = '/api/interactive/getparamsforwall/' + this.model.get("typeName");

                this.collection.fetch({ reset: true });
            } else this.$el.hide();
        },

        collectionEvents: {

            request: function request() {

                Backbone.Radio.channel('loader').trigger('show', this.ui.t, { size: '', speed: 'fast' });
            },

            sync: function sync() {

                Backbone.Radio.channel('loader').trigger('hide');
            },

            update: function update(c, o) {

                if (o.changes.removed.length && this.model.get('requestParameters') && this.model.get('requestParameters').rid === o.changes.removed[0].id) this.model.set({ "requestParameters": {} });

                Backbone.Radio.channel('loader').trigger('hide');
            }

        },

        onChildviewChildClickItem: function onChildviewChildClickItem(v) {
            this.model.set({ "requestParameters": v.model.toJSON() });
        }

    });
});
'use strict';

define('settings.colorRow', ['i18n!nls/resources.min', 'RU'], function (Resources) {

    var listCollection = Mn.CollectionView.extend({

        childView: Mn.View.extend({

            template: _.template('<span style="cursor:pointer;line-height:28px;padding-left:6px;"><%- display_name %></span><span class="reload" style="float:right;display:block;margin-top:9px;" data-icon="icon-reload"></span><span class="picker" style="display:inline-block;width:40px;height:16px;margin-top:6px;float:right;cursor:pointer;background-color:<%- color %>;border:solid 1px gray;"></span>'),

            ui: {
                picker: '.picker'
            },

            triggers: {
                'click @ui.picker': 'click:item'
            },

            events: {

                'click .reload': function clickReload(e) {
                    e.stopPropagation();
                    this.model.set('color', 'none');
                }
            },

            modelEvents: {

                'change:color': function changeColor(m, c) {
                    this.ui.picker.css('background', c);
                }

            }

        }),

        childViewOptions: function childViewOptions(m) {
            if (!m.has('color')) m.set('color', 'none');
        },

        childViewTriggers: {
            'click:item': 'click:item'
        }

    });

    return Mn.View.extend({

        template: _.template('<div class="right" style="height:0px;overflow:hidden;"><input type="text" class="color-items-diagram" /></div><div class="list" style="clear:both;"></div>'),

        templateContext: {
            Resources: Resources
        },

        regions: {
            list: '.list'
        },

        onRender: function onRender() {

            this.$('.color-items-diagram').ejColorPicker({
                enableOpacity: false,
                locale: Resources.Lang
            });

            this._prepareCollection();
        },

        collectionEvents: {

            reset: function reset() {

                this._prepareCollection();
            }

        },

        _prepareCollection: function _prepareCollection() {

            var ms = this.collection,
                cc = new Backbone.Collection();

            var c = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'PaletteByChart' });

            var colorsValue = c ? c.WidgetParamValue : undefined;

            if (ms.length === 1) {
                // 

                var one = ms.at(0);

                one.set({ object_id: null, display_name: '' });

                one.get('points').map(function (m) {

                    var color = 'none';

                    if (colorsValue) {
                        var o = _.findWhere(colorsValue, { 'object_id': m.elId });
                        if (o) color = o.color;
                    }

                    cc.add(new Backbone.Model({
                        object_id: m.elId,
                        display_name: m.x,
                        color: color
                    }));
                });
            } else ms.map(function (m) {

                var n = new Backbone.Model({
                    object_id: m.get('elId'),
                    display_name: m.get('name') || _.pluck(m.get('points'), 'x').join(',')
                });

                if (colorsValue) {
                    var o = _.findWhere(colorsValue, { 'object_id': m.get('elId') });
                    if (o) n.set('color', o.color);
                }

                cc.add(n);
            });

            this.showChildView('list', new listCollection({ collection: cc }));
        },

        onChildviewClickItem: function onChildviewClickItem(v) {

            this.$('.color-items-diagram').ejColorPicker('hide');

            this.$('.color-items-diagram').ejColorPicker({

                open: function open(args) {
                    this.option('value', v.model.get('color'));
                },

                select: function select(args) {
                    v.model.set('color', args.value);
                }
            });

            this.$('.color-items-diagram').ejColorPicker('show');
        }
    });
});
'use strict';

define('settings.htmlEditor', ['requestView', 'g/ejRTEView'], function (requestsList, ejRTEView) {

        return Mn.View.extend({

                template: _.template('<div class="list" style="display:none;height:196px;margin-bottom:10px;"></div><div class="editor"></div>'),

                regions: {
                        reqArea: '.list',
                        editor: '.editor'
                },

                onAttach: function onAttach() {

                        if (!this.getRegion('editor').hasView()) this.showChildView('editor', new ejRTEView({ value: this.model.get('contentHtml') }));

                        this.getRegion('reqArea').show(new requestsList({ model: new Backbone.Model({ typeName: 'All', widgetID: this.model.id }) }));
                        this.getChildView('reqArea').ui.description.hide();

                        this.getChildView('reqArea').model.on('change:requestParameters', function (model) {

                                var data = model.get('requestParameters');

                                if (data.rid) {

                                        this.model.set({ "requestParameters": data });

                                        var text = this.getChildView('editor').ejRTE.getSelectedHtml();

                                        if (!$.trim(text)) text = '<svg style="fill:#666666; width:24px; height:24px;"><path d="M15,0.279C14.704,0.106,14.365,0,14,0h-1H4C2.9,0,2,0.9,2,2v10c-0.735,0-1.373,0.406-1.721,1C0.106,13.296,0,13.635,0,14s0.106,0.704,0.279,1C0.627,15.594,1.265,16,2,16h1h6h1h1c1.1,0,2-0.9,2-2v-1v-2V6V4h2h1V3V2 C16,1.265,15.594,0.627,15,0.279z M7.279,15H7H3H2c-0.552,0-1-0.449-1-1s0.448-1,1-1h1h4h0.279C7.106,13.296,7,13.635,7,14 S7.106,14.704,7.279,15z M12,6v5v2v1c0,0.551-0.449,1-1,1h-1H9c-0.552,0-1-0.449-1-1s0.448-1,1-1h1v-1H9H3V2c0-0.551,0.448-1,1-1 h8.279C12.106,1.296,12,1.635,12,2v1v1V6z M13,3V2c0-0.551,0.449-1,1-1s1,0.449,1,1v1H13z"></path></svg>';

                                        this.getChildView('editor').ejRTE.executeCommand("inserthtml", '<span data-oknd=\'4\' data-oid=\'' + data.rid + '\' title=\'' + data.title + '\'>' + text + '</span>');
                                } else this.model.set({ "requestParameters": {} });
                        }, this);
                },

                toolsButtonShowRequests: function toolsButtonShowRequests() {
                        //this.getRegion('reqArea').currentView.collection.fetch({ reset: true });
                        this.getRegion('reqArea').$el.toggle();
                },

                onSave: function onSave() {

                        if (this.model.get('requestParameters') && this.model.get('requestParameters').rid) $.ajaxSettings.headers.key = $.mergeUrlParam($.ajaxSettings.headers.key, { RID: this.model.get('requestParameters').rid });

                        this.model.save({ "contentHtml": this.getChildView('editor').ejRTE.getHtml() });
                },

                onReset: function onReset() {

                        if (this.getRegion('reqArea').collection) this.getRegion('reqArea').collection.fetch({ reset: true });

                        this.model.set({ "requestParameters": {} });
                }

        });
});
'use strict';

define('settings.reqparams', ['i18n!nls/resources.min', 'global.request.param'], function (Resources, ParamView) {

    var listView = Mn.CollectionView.extend({

        className: 'list',

        childView: ParamView,

        childViewOptions: function childViewOptions() {

            return {
                rid: this.options.rid,
                dbase: this.options.dbase
            };
        }
    });

    return Mn.View.extend({

        template: _.template('<span class="request-title"><%- Resources.settingsView_reqparams_requestTitle %></span><span class="request-data"><%- reqTitle %></span><br>\n            <span class="request-title"><%- Resources.settingsView_reqparams_dbTitle %></span><span class="request-data"><%- dbTitle %></span><br>\n            <span class="g-form--input">\n                <input class="g-form--checkbox" type="checkbox" name="useDefParams" id="<%- prefix %>_useDefParams" />\n                <label for="<%- prefix %>_useDefParams"><%- Resources.default %></label>\n            </span>\n            <div class="list"></div>'),

        id: "request-params-container",

        templateContext: function templateContext() {
            return {
                Resources: Resources,
                prefix: this.model.id,
                reqTitle: this.model.get('requestParameters').requestTitle,
                dbTitle: this.model.get('requestParameters').dbTitle
            };
        },

        regions: {
            area: { el: '.list', replaceElement: true }
        },

        ui: {
            use: 'input[name=useDefParams]'
        },

        events: {

            'change @ui.use': function changeUiUse(e) {
                if (this.ui.use.is(":checked")) this.getChildView('area').$el.hide();else this.getChildView('area').$el.show();
            }
        },

        onRender: function onRender() {

            this.showChildView('area', new listView({
                collection: new Backbone.Collection(this.model.get('requestParameters').parameters),
                rid: this.model.get('requestParameters').rid,
                dbase: this.model.get('requestParameters').dbase,
                use: this.model.get('requestParameters').useDefParams
            }));

            var useDefault = this.model.get('requestParameters').useDefParams;
            this.ui.use.prop('checked', useDefault);

            if (useDefault) {
                this.getChildView('area').$el.hide();
            }
        },

        onSave: function onSave() {

            var data = this.model.get('requestParameters');

            var result = [];
            this.getChildView('area').children.each(function (v) {

                result.push(v.model.toJSON());
            });

            var check = result.filter(function (a) {
                return !a.Value.length || !$.trim(a.Value[0]);
            });

            data.parameters = result;
            data.useDefParams = this.ui.use.is(":checked");

            this.model.set({ requestParameters: data });

            /*  *** проблема с сериализацией данных строка типа ISO трансформируется в дату в зависимости от локали клиента *** */

            $.ajax({ url: this.model.url(), method: 'PUT', data: JSON.stringify(this.model.toJSON()), contentType: 'application/json; charset=utf-8' }).always(function () {
                this.model.trigger('sync');
            }.bind(this));
        }

    });
});
'use strict';

define('settingsView', ['i18n!nls/resources.min', 'settings.legendMap', 'settings.reportingView', 'settings.baseOptions', 'settings.visualization.chart', 'settings.decorationWidget', 'settings.reqparams', 'settings.chain', 'settings.htmlEditor', 'settings.subscribe', 'settings.visualization.cloud', 'settings.visualization.table', 'settings.visualization.semnet', 'global.view.dialog'], function (Resources, legendView, reportingSettings, baseOptions, visualizationChart, decoration, reqparams, chain, htmlEditor, subscribe, cloudSettings, visualizationTable, semnetSettings, dialogView) {

    return Mn.View.extend({

        className: "settings",

        template: _.template('<div></div>'),

        events: {

            "mousedown": function mousedown(e) {
                e.stopPropagation();
            }

        },

        regions: {
            dialog: { el: 'div', replaceElement: true }
        },

        initialize: function initialize() {

            //var decoration = this.model.has("Decoration") ?
            //   this.model.get("Decoration") :
            //    {
            //        CaptionBackground: "rgba(200, 188, 162, 1)", CaptionForeground: "rgba(51, 51, 51, 1)",
            //        ContainerBackground: "rgba(255, 255, 255, 1)", ContainerForeground: "rgba(51, 51, 51, 1)",
            //        LinkBackground: "rgba(0, 0, 0, 0)", LinkForeground: "rgba(70, 127, 212, 1)",
            //        CaptionIsVisible: true, BorderIsVisible: true, ContainerIsTransparent: false
            //    };

            //if (!this.model.has("Decoration"))
            //    this.model.set("Decoration", decoration);

        },

        onRender: function onRender() {

            this.showChildView('dialog', new dialogView({
                autoOpen: false,
                header: { manage: [{ id: 'close' }] },
                footer: new Backbone.Collection([{ id: 'onSave', title: Resources.apply, className: 'blue right' }, { id: 'onReset', title: Resources.reset, className: 'right nest-left' }])
            }));
        },

        modelEvents: {

            invalid: function invalid(m, err) {

                this.getChildView('dialog').getChildView('notify').showNotify(Resources.error);

                _.each(err, function (o) {
                    this.currentView.$('[name=' + o.name + ']').addClass('error');
                }, this);

                setTimeout(function () {
                    this.currentView.$('.error').removeClass('error');
                }.bind(this), 3000);
            }

        },

        getMenu: function getMenu() {

            var typeName = this.model.get('typeName'),
                sm = [];

            var subscibeCollection = this.options.subscibeCollection;

            this.menu = {
                baseOptions: { id: "baseOptions", title: Resources.m1, icon: 'gear', content: baseOptions },
                visualizationTable: { id: 'visualizationTable', title: Resources.m2, icon: 'eye', content: visualizationTable },
                visualizationChart: { id: "visualizationChart", title: Resources.m2, icon: 'eye', content: visualizationChart },
                visualizationCloud: { id: 'visualizationCloud', title: Resources.m2, icon: 'eye', content: cloudSettings },
                visualizationLegendMap: { id: "visualizationLegendMap", title: Resources.m7, icon: 'legend', content: legendView },
                visualizationSemnet: { id: 'visualizationSemnet', title: Resources.m2, icon: 'eye', content: semnetSettings },
                requestParams: { id: 'requestParams', title: Resources.m12, icon: 'script-settings', content: reqparams },
                chainDependencies: { id: 'chainDependencies', title: Resources.m13, icon: 'anchor', content: chain },
                decoration: { id: "decoration", title: Resources.m3, icon: 'appearance', content: decoration },
                htmlEditor: { id: "htmlEditor", title: Resources.m6, icon: 'pen', content: htmlEditor, toolbar: [{ id: 'toolsButtonShowRequests', title: Resources.selectRequest, className: 'script-create' }] },
                subscribe: { id: "subscribe", title: Resources.m4, icon: 'new-mail', content: subscribe, args: { model: this.model, collection: subscibeCollection } },
                reportingSettings: { id: "reportingSettings", title: Resources.m10, icon: 'reports', content: reportingSettings, args: { wid: this.model.id, publishers: subscibeCollection } },
                clearWidget: { id: 'clearWidget', title: Resources.del, icon: 'trash' }
            };

            var menu = this.menu;

            switch (typeName) {

                case 'WidgetTable':
                    sm = [menu.baseOptions, menu.visualizationTable, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetRunning':
                    sm = [menu.baseOptions, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetGraph':
                    sm = [menu.baseOptions, menu.visualizationChart, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetCloud':
                    sm = [menu.baseOptions, menu.visualizationCloud, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetMap':
                    sm = [menu.baseOptions, menu.visualizationLegendMap, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetHtml':
                    sm = [menu.baseOptions, menu.htmlEditor, menu.requestParams, menu.chainDependencies, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetSource':
                    sm = [menu.baseOptions, menu.subscribe, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetReporting':
                    sm = [menu.baseOptions, menu.reportingSettings, menu.subscribe, menu.decoration, menu.clearWidget];
                    break;

                case 'WidgetSemNet':
                    sm = [menu.baseOptions, menu.visualizationSemnet, menu.subscribe, menu.decoration, menu.clearWidget];
                    break;

            }

            return sm;
        },

        hide: function hide(fx) {

            if (this.getRegion('dialog') && this.getRegion('dialog').hasView()) this.getChildView('dialog').close();

            //else if (fx)
            //    fx.call(this);
        },

        _setDialog: function _setDialog(id) {

            var dm = this.getChildView('dialog').model,
                s = this.menu[id],
                c = s.content;

            if (c) {

                if (s.toolbar) dm.get('toolbar').reset(s.toolbar);else dm.get('toolbar').reset();

                // TODO: привести все аргументы к одному виду убрать это...
                var args = { model: this.model, collection: this.collection };

                if (s.args) args = s.args;

                var view = new c(args);

                dm.set({
                    title: s.title,
                    icon: s.icon,
                    content: view
                });

                return view;
            }

            return null;
        },

        sideBarTrigger: function sideBarTrigger(m) {

            var actView = this._setDialog(m.id);

            if (actView) {

                if (actView.model.get('requestParameters') && actView.model.get('requestParameters').rid) $.ajaxSettings.headers.key = $.mergeUrlParam($.ajaxSettings.headers.key, { RID: actView.model.get('requestParameters').rid });

                if (actView.onBeforeShow) actView.onBeforeShow();

                var win = $('main'),
                    cv = this.getChildView('dialog').$el,
                    top = win.height() / 2 - cv.height() / 2;

                cv.css({
                    top: top < 90 ? 100 : top,
                    left: win.width() / 2 - cv.width() / 2
                });

                this.getChildView('dialog').$el.show(function () {

                    if (actView.onShow) actView.onShow();
                });
            } else this[m.id].call(this);
        },

        clearWidget: function clearWidget() {

            Backbone.trigger("message:confirm", {

                title: Resources.askyousure, message: $.Format(Resources.deltext, Resources.widget, this.model.get("title")),

                fx: function fx() {

                    this.model.destroy();
                },

                ctx: this
            });
        }
    });
});
'use strict';

define('@widget.WidgetCloud', ['i18n!nls/resources.min'], function (Resources) {

            return Mn.View.extend({

                        template: _.template('<div></div>'),
                        templateContext: { Resources: Resources },

                        regions: {
                                    graph: { el: 'div', replaceElement: true }
                        },

                        onAttach: function onAttach() {

                                    this.data = this.model.get('feed').variations[0].flow[0].points.map(function (a) {

                                                return {
                                                            text: a.text,
                                                            weight: parseInt(a.y),
                                                            html: { 'data-oid': this.model.id + '_' + a.elId },
                                                            handlers: {

                                                                        click: function () {

                                                                                    var m = new Backbone.Model({ object_id: a.elId });
                                                                                    m.set(a);

                                                                                    this.model.trigger('click:item', m);
                                                                        }.bind(this)
                                                            }
                                                };
                                    }, this);

                                    this.$el.height(this.$el.parent().height());

                                    this.$el.jQCloud(this.data);

                                    this._apply();
                        },

                        onChildviewClickItem: function onChildviewClickItem(v) {

                                    this.model.trigger('click:item', v.model);
                        },

                        modelEvents: {

                                    'change:width': function changeWidth() {
                                                this._fitSize();
                                    },

                                    'change:height': function changeHeight() {
                                                this._fitSize();
                                    }

                        },

                        _apply: function _apply() {

                                    var pallete = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'PaletteByChart' }),
                                        sset = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'WidgetCloud.SubSettings' });

                                    if (sset && sset.WidgetParamValue) {
                                                this.$el.css('font-size', sset.WidgetParamValue.minFontSizeCloud + 'px');
                                    }

                                    if (pallete) {
                                                var colors = pallete.WidgetParamValue;

                                                var pref = this.model.id + '_';

                                                setTimeout(function () {

                                                            _.each(colors, function (o) {

                                                                        if (o.color !== "none") this.$('[data-oid=' + pref + o.object_id + ']').css('color', o.color);
                                                            }, this);
                                                }.bind(this), 100);
                                    }
                        },

                        _fitSize: function _fitSize() {

                                    if (this.st) clearTimeout(this.st);

                                    this.st = setTimeout(function () {

                                                this.$el.css({ width: this.$el.parent().width(), height: this.$el.parent().height() });

                                                this.$el.empty().jQCloud(this.data);

                                                this._apply();
                                    }.bind(this), 500);
                        }

            });
});
'use strict';

define('@widget.WidgetGraph', ['i18n!nls/resources.min', 'ejChartView', 'd3:histogram', 'chartsRepository'], function (Resources, chartView, d3Histogram, repository) {

                return Mn.View.extend({

                                template: _.template('<div class="graph"></div>'),
                                templateContext: { Resources: Resources },

                                regions: {
                                                graph: { el: '.graph', replaceElement: true }
                                },

                                onAttach: function onAttach() {

                                                var visualization = this.model.get("Visualization") || "bar",
                                                    name = visualization.split('_');

                                                var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: "WidgetGraph.GhaphSubSettings" });

                                                if (p) p = p.WidgetParamValue;

                                                if (name.length && name[1] === 'd3') this.showChildView('graph', new d3Histogram({ items: this.model.get('feed'), model: this.model, chart: name[0] }));else if (name[0] !== 'tagCloud') {

                                                                var s = _.findWhere(repository, { type: visualization }) || { type: visualization },
                                                                    o = this.model.get('feed').variations[0],
                                                                    m = new Backbone.Model(_.extend(s, o));

                                                                m.set({
                                                                                height: this.$el.parent().height().toString(),
                                                                                width: this.$el.parent().width().toString()
                                                                });

                                                                this.showChildView('graph', new chartView({ model: m, subset: p, palette: _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'PaletteByChart' }) }));
                                                }
                                },

                                modelEvents: {

                                                'change:width': function changeWidth() {
                                                                this._fitSize();
                                                },

                                                'change:height': function changeHeight() {
                                                                this._fitSize();
                                                }

                                },

                                childViewEvents: {

                                                'chart:selected': function chartSelected(v) {}

                                },

                                _fitSize: function _fitSize() {

                                                var visualization = this.model.get("Visualization") || "bar",
                                                    name = visualization.split('_');

                                                if (name.length && name[1] === 'd3') {} else if (name[0] !== 'tagCloud') {

                                                                var m = this.getChildView('graph').model;

                                                                var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: "WidgetGraph.GhaphSubSettings" });

                                                                if (p) p = p.WidgetParamValue;

                                                                m.set({
                                                                                height: this.$el.parent().height().toString(),
                                                                                width: this.$el.parent().width().toString()
                                                                });

                                                                this.showChildView('graph', new chartView({ model: m, subset: p, palette: _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'PaletteByChart' }) }));
                                                }
                                }

                });
});
'use strict';

define('@widget.WidgetHtml', ['app'], function (App) {

            return Mn.View.extend({

                        template: _.template('<div dir="auto"><%= contentHtml %></div>'),

                        ui: {
                                    oid: 'span[data-oid]'
                        },

                        onRender: function onRender() {

                                    var output = '';

                                    if (this.collection.length === 1) {
                                                output = this.collection.at(0).get('display_name');
                                    } else {

                                                output = '<table>';

                                                this.collection.each(function (e) {

                                                            output += '<tr>';

                                                            _.each(e.attributes, function (a) {

                                                                        if (!_.isObject(a)) output += '<td>' + (a ? a : '') + '</a>';
                                                            }, this);

                                                            output += '</tr>';
                                                }, this);

                                                output += '</table>';
                                    }

                                    this.ui.oid.html(output);

                                    var Decoration = this.model.get('Decoration');
                                    this.$el.css({ color: Decoration.ContainerForeground });
                                    this.$el.find("a").css({ "background-color": Decoration.LinkBackground, "color": Decoration.LinkForeground });
                        }

            });
});
'use strict';

define('@widget.WidgetMap', ['global:maps:GeoMapGoogleView', 'widget:map:legendView'], function (GeoMap, legendView) {

    return Mn.View.extend({

        template: _.template('<div class="legend"></div><div class="map"></div>'),

        regions: {
            legend: { el: '.legend', replaceElement: true },
            map: { el: '.map', replaceElement: true }
        },

        onRender: function onRender() {

            this.showChildView('map', new GeoMap({
                model: this.model,
                collection: this.collection
            }));

            var data = this.model.get('Legend');
            if (data && data.LegendIsVisible) this.showChildView('legend', new legendView({ model: new Backbone.Model(data) }));
        }

    });
});
'use strict';

define('@widget.WidgetRunning', [], function () {

        return Mn.CollectionView.extend({

                className: 'RunningText',

                childView: Mn.View.extend({

                        tagName: 'span',

                        getTemplate: function getTemplate() {
                                return _.template(this.options.templ);
                        },

                        triggers: {
                                'click': 'table:row:handler'
                        }
                }),

                childViewOptions: function childViewOptions() {
                        return {
                                templ: this.templ
                        };
                },

                initialize: function initialize() {

                        this.templ = '';

                        var columns = this.model.get('ColumnCustomizations');
                        if (columns) _.chain(columns).filter(function (e) {
                                return e.ColumnIsVisible;
                        }).sortBy(function (e) {
                                return e.SerialNum;
                        }).map(function (e) {

                                this.templ += '&nbsp;<%= ' + e.ColumnSystemName.toLowerCase() + ' %>&nbsp;';
                        }, this);else _.chain(this.model.get('feed').head).filter(function (o) {
                                return o.isVisible;
                        }).map(function (e) {

                                this.templ += '&nbsp;<%= ' + e.systemName + ' %>&nbsp;';
                        }, this);

                        this.templ += '&nbsp;&nbsp;***&nbsp;&nbsp;';
                },

                onAttach: function onAttach() {

                        var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: "WidgetRunDirection" }),
                            direction = p ? p.WidgetParamValue.Right ? 'right' : 'left' : 'left';

                        this.$el.liMarquee({
                                direction: direction
                        });
                },

                childViewEvents: {

                        'table:row:handler': function tableRowHandler(v) {

                                this.model.trigger('click:item', v.model);
                        }
                }

        });
});
'use strict';

define('@widget.WidgetTable', ['i18n!nls/resources.min', 'widgetTableCard', 'widgetTableGrid'], function (Resources, cardView, gridView) {

        return Mn.View.extend({

                template: _.template('<div></div>'),

                regions: {
                        wrap: { el: 'div', replaceElement: true }
                },

                onRender: function onRender() {

                        var v = this.model.get('Visualization') || 'table';

                        switch (v) {

                                case 'table':
                                        this.showChildView('wrap', new gridView({
                                                model: this.model,
                                                collection: this.collection
                                        }));
                                        break;

                                case 'card':
                                case 'card2':
                                        this.showChildView('wrap', new cardView({
                                                model: this.model,
                                                collection: this.collection
                                        }));
                                        break;
                        }
                },

                modelEvents: {

                        'change:Visualization': function changeVisualization() {

                                this.render();
                        }

                },

                childViewTriggers: {
                        'table:add:rubrics:filter': 'table:add:rubrics:filter',
                        'scroll:grid': 'scroll:grid'
                }

        });
});
'use strict';

define('@widget.WidgetView', ['i18n!nls/resources.min', 'sendModel', 'settingsView', 'widget.reportView', 'widget.content.contentView', 'widget.semnet.semnetView'], function (Resources, sendModel, settingView, reportLoad, contentView, semnetView) {

                // settings.subscribe.subscribeList 
                var include = ["WidgetTable", "WidgetMap", "WidgetGraph", "WidgetRunning", "WidgetHtml", 'WidgetCloud'];

                var positionModel = Backbone.Model.extend({
                                idAttribute: 'WidgetUid',
                                defaults: {
                                                WidgetUid: null,
                                                PlacementWidth: 0,
                                                PlacementHeight: 0,
                                                PlacementTop: 0,
                                                PlacementLeft: 0,
                                                ZIndex: 0
                                },
                                url: function url() {
                                                return '/api/widget/' + this.id + '/position';
                                }
                });

                var subscibeObject = Mn.Object.extend({

                                initialize: function initialize() {

                                                this.collection = new Backbone.Collection();
                                                this.collection.url = '/api/widget/' + this.options.widgetID + '/subscribed';
                                }
                });

                return Mn.View.extend({

                                className: 'anbr-widget',

                                template: templates['widget-template'],

                                ui: {
                                                head: '.anbr_head',
                                                container: '.widget-container',
                                                title: '.widget-title',
                                                load: '.anbr_list',
                                                loader: '.anbr_head .Preloader',
                                                settings: '.settings',
                                                trash: '.icon-trash',
                                                filter: '.font-icon-filter'
                                },

                                regions: {
                                                load: '@ui.load', // { el: '@ui.load', replaceElement: true },
                                                settings: { el: '@ui.settings', replaceElement: true }
                                },

                                events: {

                                                "click .font-icon-filter": function clickFontIconFilter() {

                                                                this.getChildView('load').getChildView('wrap').getChildView('filter').$el.slideToggle();
                                                },

                                                'click .anbr_head @ui.trash': function clickAnbr_headUiTrash() {

                                                                Backbone.trigger('message:confirm', {
                                                                                title: Resources.sure,
                                                                                message: $.Format(Resources.deltext, Resources.widget, this.model.get('title')),
                                                                                fx: function fx() {
                                                                                                this.model.destroy();
                                                                                },
                                                                                ctx: this
                                                                });
                                                },

                                                "mousedown": function mousedown(e) {

                                                                if (this.Mode) {

                                                                                this._addSettings();

                                                                                Backbone.Radio.channel('sidebar').request('open', { nameView: this.model.get('title'), view: this.getChildView('settings'), title: Resources.wst }, this.getChildView('settings').getMenu());

                                                                                if (e.shiftKey || e.ctrlKey) this.triggerMethod('select:more', this.model);else this.triggerMethod('select:one', this.model);
                                                                }
                                                }
                                },

                                _addSettings: function _addSettings() {

                                                if (!this.getRegion('settings').hasView()) this.showChildView('settings', new settingView({
                                                                model: this.model,
                                                                collection: this.collection,
                                                                subscibeCollection: this.subscibeObject.collection
                                                }));
                                },

                                initialize: function initialize() {

                                                this.model.set('ReadOnly', true);

                                                this.collection = new Backbone.Collection([], { model: Backbone.Model.extend({ idAttribute: 'object_id' }) });

                                                this.subscibeObject = new subscibeObject({ widgetID: this.model.id });

                                                var pa = this.model.get('requestParameters');

                                                this.sendModel = new sendModel({
                                                                id: pa.rid,
                                                                pars: pa.parameters
                                                });

                                                this.sendModel.on('change:ts', function (m, ts) {
                                                                if (ts) this.model.set('timeStampForUpdate', ts);
                                                }, this);

                                                this.position = new positionModel({
                                                                WidgetUid: this.model.id,
                                                                PlacementTop: parseInt(this.model.get("top")) < 0 ? 5 : parseInt(this.model.get("top")),
                                                                PlacementLeft: parseInt(this.model.get("left")) < 0 ? 5 : parseInt(this.model.get("left")),
                                                                PlacementWidth: parseInt(this.model.get("width")),
                                                                PlacementHeight: parseInt(this.model.get("height")),
                                                                ZIndex: parseInt(this.model.get("zIndex"))
                                                });

                                                this.listenTo(this.position, 'request', this._sizeAndPosition.bind(this));

                                                //this.listenTo(this.model, "visual:update", this._successLoad);
                                },

                                onBeforeRender: function onBeforeRender() {

                                                if (this.model.get("Decoration") && !this.model.get("Decoration").BorderIsVisible) this.$el.addClass("noshadow");

                                                this._sizeAndPosition();
                                },

                                onRender: function onRender() {

                                                this._decoration();

                                                if (this.model.get("typeName") !== 'WidgetTable') this.ui.filter.hide();
                                },

                                onAttach: function onAttach() {

                                                var flag = this.model.get('Decoration').CaptionIsVisible;

                                                this.ui.container.css({
                                                                height: this.model.get("height") - (flag ? this.ui.head.outerHeight() : 0)
                                                });

                                                //this.ui.trash.css('fill', this.model.get('Decoration').CaptionForeground);

                                                this.ui.load.css("height", this.ui.container.height());

                                                this.triggerMethod('fix:size', this.model);
                                },

                                modelEvents: {

                                                sync: function sync() {

                                                                this.sendModel.set('ts', '');
                                                                this._decoration();
                                                                this.onLoad();
                                                },

                                                'click:item': function clickItem(itemModel) {

                                                                this.model.collection.each(function (m) {

                                                                                if (this.model.id !== m.id) {

                                                                                                m.trigger('check:subscribers', this.model.id, itemModel.get('requestID') || this.model.get('requestParameters').rid, itemModel.get('object_id'));

                                                                                                _.each(m.get('publishersSubscriberMap'), function (v, k) {

                                                                                                                if (k === this.model.id) {

                                                                                                                                _.each(v, function (p) {

                                                                                                                                                if (p.QueryID === this.model.get('requestParameters').rid) {

                                                                                                                                                                var par = _.findWhere(m.get('requestParameters').parameters, { id: p.QueryParamID });

                                                                                                                                                                _.each(itemModel.attributes, function (v, k) {

                                                                                                                                                                                if (k.toLowerCase() === p.ColumnSystemName.toLowerCase()) par.Value = [v];
                                                                                                                                                                });

                                                                                                                                                                m.trigger('load:chain');
                                                                                                                                                }
                                                                                                                                }, this);
                                                                                                                }
                                                                                                }, this);
                                                                                }
                                                                }, this);
                                                },

                                                'check:subscribers': function checkSubscribers(subscriberID, requestID, objectID) {

                                                                var c = this.subscibeObject.collection;

                                                                if (c.length) this._callSubscribers(subscriberID, objectID, requestID);else if (include.indexOf(this.model.get('typeName')) === -1 && !this.subscibeObject.isFetch) c.fetch({
                                                                                reset: true,
                                                                                success: function (coll) {
                                                                                                this.subscibeObject.isFetch = true;
                                                                                                this._callSubscribers(subscriberID, objectID, requestID);
                                                                                }.bind(this)
                                                                });
                                                },

                                                'load:chain': function loadChain() {

                                                                // цепочки не должны содержать метку времени для обновления
                                                                // значение должно бытьб в this.model.get('timeStampForUpdate')
                                                                this.sendModel.set('ts', '');

                                                                // не использовать параметры по умолчанию в данном случае - цепочка реакций
                                                                this.onLoad({ notUseDefParams: true });

                                                                // по идее это лишнее - send вернет новый ts и он сохранится в timeStampForUpdate
                                                                if (this.model.get('timeStampForUpdate')) this.sendModel.set('ts', this.model.get('timeStampForUpdate'));
                                                },

                                                //
                                                'visual:update': function visualUpdate(feed) {

                                                                this._successLoad(feed);
                                                },

                                                'change:ColumnCustomizations': function changeColumnCustomizations() {
                                                                this._successLoad();
                                                },

                                                'change:Decoration': function changeDecoration() {

                                                                this._decoration();

                                                                this.ui.container.css({
                                                                                height: this.model.get("height") - (this.model.get('Decoration').CaptionIsVisible ? this.ui.head.outerHeight() : 0)
                                                                });

                                                                this.ui.load.css("height", this.ui.container.height());
                                                },

                                                'change:title': function changeTitle(m, v) {
                                                                this.ui.title.text(v);
                                                },

                                                'change:left': function changeLeft(m, v) {
                                                                this.position.set('PlacementLeft', v);
                                                                this._sizeAndPosition();
                                                },

                                                'change:top': function changeTop(m, v) {
                                                                this.position.set('PlacementTop', v);
                                                                this._sizeAndPosition();
                                                },

                                                'change:width': function changeWidth(m, v) {
                                                                this.position.set('PlacementWidth', v);
                                                                this._sizeAndPosition();
                                                },

                                                'change:height': function changeHeight(m, v) {
                                                                this.ui.container.css({ height: v - this.ui.head.outerHeight() });
                                                                this.position.set('PlacementHeight', v);
                                                                this._sizeAndPosition();
                                                },

                                                'change:zIndex': function changeZIndex(m, v) {
                                                                this.position.set('ZIndex', v);
                                                                this._sizeAndPosition();
                                                }

                                },

                                onLoad: function onLoad(o) {

                                                this.loadOptions = o || {};

                                                var typeName = this.model.get("typeName");

                                                var pa = this.model.get('requestParameters');

                                                if (pa && pa.rid) {

                                                                if (!pa.useDefParams) this.loadOptions.notUseDefParams = true;

                                                                this.sendModel.set({
                                                                                widget: {
                                                                                                uid: this.model.id,
                                                                                                name: this.model.get('title'),
                                                                                                type: this.model.get('typeName'),
                                                                                                Visualization: this.model.get('Visualization')
                                                                                },
                                                                                id: pa.rid,
                                                                                pars: pa.parameters,
                                                                                useDefParams: !this.loadOptions.notUseDefParams
                                                                });

                                                                this.ui.loader.show();
                                                                this.sendModel.fetch({
                                                                                success: this._successLoad.bind(this),
                                                                                error: this._endload.bind(this)
                                                                });

                                                                if (this.model.get('update')) setInterval(function () {

                                                                                this.ui.loader.show();
                                                                                this.sendModel.fetch({
                                                                                                success: this._successLoad.bind(this),
                                                                                                error: this._endload.bind(this)
                                                                                });
                                                                }.bind(this), this.model.get('timeUpdate'));
                                                } else {
                                                                // виджеты не имеющие своих запросов

                                                                if (typeName === "WidgetHtml") this.ui.load.html(this.model.get("contentHtml"));

                                                                if (this.objectID && this.requestID) {

                                                                                switch (this.model.get("typeName")) {

                                                                                                case "WidgetSource":

                                                                                                                this.showChildView('load', new contentView({
                                                                                                                                model: this.model,
                                                                                                                                requestID: this.requestID,
                                                                                                                                objectID: this.objectID
                                                                                                                }));

                                                                                                                break;

                                                                                                case "WidgetSemNet":

                                                                                                                this.showChildView('load', new semnetView({
                                                                                                                                objectID: this.objectID,
                                                                                                                                RID: this.requestID,
                                                                                                                                container: this.ui.container,
                                                                                                                                widget: this.model
                                                                                                                }));

                                                                                                                break;

                                                                                                case "WidgetReporting":

                                                                                                                Backbone.Radio.channel('loader').trigger('show', this.ui.load, { speed: 'fast' });

                                                                                                                $.get('/api/widget/listen/' + this.requestID + '/reporting/' + this.model.id + '/' + this.objectID).done(function (url) {

                                                                                                                                this.showChildView('load', new reportLoad({ url: url, model: this.model }));
                                                                                                                }.bind(this)).always(function () {

                                                                                                                                Backbone.Radio.channel('loader').trigger('hide');
                                                                                                                                this.ui.loader.hide();
                                                                                                                                this.loadSourceProc = false;
                                                                                                                }.bind(this));

                                                                                                                break;

                                                                                                case "WidgetHtml":

                                                                                                                Backbone.Radio.channel('loader').trigger('show', this.ui.load, { speed: 'fast' });

                                                                                                                $.get('/api/widget/listen/' + this.requestID + '/uiwidget/' + this.model.id + '/' + this.objectID).done(function (source) {

                                                                                                                                if (source) {
                                                                                                                                                this.model.set('contentHtml', source);
                                                                                                                                                this.ui.load.html(this.model.get("contentHtml"));
                                                                                                                                }
                                                                                                                }.bind(this)).always(function () {

                                                                                                                                Backbone.Radio.channel('loader').trigger('hide');
                                                                                                                                this.ui.loader.hide();
                                                                                                                                this.loadSourceProc = false;
                                                                                                                }.bind(this));

                                                                                                                break;

                                                                                }
                                                                }

                                                                this._endload();
                                                }

                                                return this;
                                },

                                _callSubscribers: function _callSubscribers(subscriberID, objectID, requestID) {

                                                this.subscibeObject.collection.each(function (m) {

                                                                if (m.id === subscriberID) this._loadSource(objectID, requestID);
                                                }, this);
                                },

                                _loadSource: function _loadSource(oID, rID) {

                                                this.objectID = parseInt(oID);
                                                this.requestID = parseInt(rID);

                                                if (!this.loadSourceProc) {

                                                                this.ui.loader.show();
                                                                this.loadSourceProc = true;

                                                                this.onLoad();
                                                }
                                },

                                _successLoad: function _successLoad(feed) {

                                                if (this.sendModel.get('msg')) Backbone.trigger('message:warning', {
                                                                message: this.sendModel.get('msg')
                                                });

                                                this.model.set('feed', this.sendModel.get('feed') || this.sendModel.get('data'));

                                                var typeName = this.model.get("typeName");

                                                require(['@widget.' + typeName], function (typeWidget) {

                                                                this.showChildView('load', new typeWidget({
                                                                                model: this.model,
                                                                                collection: this.collection
                                                                }));

                                                                this._endload();
                                                }.bind(this));

                                                var items = this.model.get('feed') ? this.model.get('feed').items ? $.prepare(this.model.get('feed').items) : this.model.get('feed').variations[0].flow : // diagrams data
                                                [];

                                                if (this.loadOptions.add) this.collection.add(items);else this.collection.reset(items);
                                },

                                _endload: function _endload() {

                                                //this.getChildView( 'settings' ).loadProcess = false;

                                                this.ui.loader.hide();

                                                if (this.model.get('typeName') === 'WidgetTable') this.ui.filter.show();

                                                this.loadSourceProc = false;
                                                this.trigger('load:end');

                                                if (!this.model.has('feed')) this.model.set('feed', {});

                                                var Decoration = this.model.get('Decoration'),
                                                    flag = this.model.get('isMarkSelectedItem');

                                                this.$('table.widget-table td').css({
                                                                color: Decoration.ContainerForeground,
                                                                'background-color': Decoration.ContainerBackground
                                                });

                                                this.$('.rubrics').css('opacity', '0.5');

                                                this.$('table.widget-table tr').hover(function () {
                                                                $(this).find('td').css({
                                                                                color: Decoration.ContainerForegroundHover,
                                                                                'background-color': Decoration.ContainerBackgroundHover
                                                                });
                                                }, function () {

                                                                var isVisited = $(this).hasClass('viewed'),
                                                                    isActive = $(this).hasClass('current');

                                                                $(this).find('td').css({

                                                                                color: isActive ? Decoration.ContainerForegroundActive : flag && isVisited ? Decoration.ContainerForegroundVisited : Decoration.ContainerForeground,

                                                                                'background-color': isActive ? Decoration.ContainerBackgroundActive : flag && isVisited ? Decoration.ContainerBackgroundVisited : Decoration.ContainerBackground

                                                                });
                                                });

                                                this.$el.find("a").css({ "background-color": Decoration.LinkBackground, "color": Decoration.LinkForeground });
                                },

                                _sizeAndPosition: function _sizeAndPosition() {

                                                this.$el.css({
                                                                width: this.position.get("PlacementWidth"),
                                                                height: this.position.get("PlacementHeight"),
                                                                top: this.position.get("PlacementTop"),
                                                                left: this.position.get("PlacementLeft"),
                                                                "z-index": this.position.get("ZIndex")
                                                });
                                },

                                _decoration: function _decoration() {

                                                var Decoration = this.model.get('Decoration'),
                                                    defaultBg = "",
                                                    tcss = "padding:10px 10px 0;font-size: 18px;",
                                                    mtcss = "font-size:1em;cursor:default;text-decoration:none;",
                                                    lcss = 'font-size:13px;overflow:auto;clear:both;' + (this.model.get('typeName') !== "WidgetTable" ? "padding:20px;" : "");

                                                if (Decoration) {

                                                                if (Decoration.CaptionIsVisible) {

                                                                                if (Decoration.CaptionBackground) tcss += "background:" + Decoration.CaptionBackground + ";";

                                                                                if (Decoration.BorderIsVisible) tcss += 'border:solid 1px ' + Decoration.CaptionBackground + ';border-bottom:0;';

                                                                                if (Decoration.CaptionForeground) mtcss += 'color:' + Decoration.CaptionForeground + ';';
                                                                } else tcss += "display:none;";

                                                                if (Decoration.ContainerIsTransparent) {

                                                                                //defaultBg = "background:transparent;";

                                                                                this.$el.addClass('transparent');
                                                                } else if (Decoration.ContainerBackground) {

                                                                                this.$el.removeClass('transparent');

                                                                                defaultBg = 'background:' + Decoration.ContainerBackground + ';';
                                                                }

                                                                if (Decoration.ContainerForeground) lcss += 'color:' + Decoration.ContainerForeground + ';';

                                                                if (Decoration.BorderIsVisible) lcss += 'border:solid 10px ' + Decoration.CaptionBackground + ';';else tcss += "padding-bottom:10px;";
                                                }

                                                this.ui.head.attr("style", tcss);

                                                this.ui.container.attr("style", lcss + defaultBg);

                                                this.ui.title.attr("style", mtcss);

                                                this.ui.trash.css('fill', this.model.get('Decoration').CaptionForeground);
                                                this.ui.filter.css('color', this.model.get('Decoration').CaptionForeground);
                                },

                                switchMode: function switchMode(flag) {

                                                if (flag) {

                                                                this.ui.head.css({ cursor: "move" });

                                                                this.$el.draggable({
                                                                                //helper: "original",
                                                                                handle: this.ui.head,
                                                                                cancel: this.ui.settings,

                                                                                drag: function (el, ui) {

                                                                                                this.triggerMethod('widget:drag', this.model, ui.position.left - this.$el.position().left, ui.position.top - this.$el.position().top);
                                                                                }.bind(this),

                                                                                stop: function (el, ui) {

                                                                                                var top = parseInt(ui.position.top),
                                                                                                    left = parseInt(ui.position.left);

                                                                                                if (top < 0) top = 3;
                                                                                                if (left < 0) left = 3;

                                                                                                this.model.set({ top: top, left: left });

                                                                                                this.position.save();

                                                                                                this.triggerMethod('widget:drag', this.model, left - this.$el.position().left, top - this.$el.position().top, true);
                                                                                }.bind(this)
                                                                });

                                                                this.$el.resizable({

                                                                                resize: function (e, ui) {

                                                                                                this.ui.container.css({
                                                                                                                height: ui.size.height - this.ui.head.outerHeight()
                                                                                                });
                                                                                }.bind(this),

                                                                                stop: function (e, ui) {

                                                                                                this.ui.load.css("height", this.ui.container.height());

                                                                                                this.model.set({
                                                                                                                width: parseInt(ui.size.width),
                                                                                                                height: parseInt(ui.size.height)
                                                                                                });

                                                                                                this.position.save();

                                                                                                this.triggerMethod('select:one', this.model);
                                                                                }.bind(this)
                                                                });
                                                } else {

                                                                this.ui.head.css({ cursor: 'default' });

                                                                this.$el.draggable().draggable("destroy").resizable().resizable("destroy").removeClass("widget-editing");
                                                }

                                                this.Mode = flag;

                                                this.model.set('ReadOnly', !flag);

                                                return this;
                                },

                                childViewEvents: {

                                                'content:loaded': function contentLoaded() {
                                                                this._endload();
                                                },

                                                'subscribers:reflect': function subscribersReflect(m) {

                                                                this.model.trigger('click:item', m);
                                                },

                                                'scroll:grid': function scrollGrid() {

                                                                var saveTop = 0;

                                                                var pon = this.sendModel.get('feed').pagination;

                                                                if (pon.totalItems > pon.pageSize * pon.currentPage - pon.pageSize) {

                                                                                var top = this.ui.container.scrollTop(),
                                                                                    height = this.ui.container.find('.anbr_list>div').height(),
                                                                                    scr = height - this.ui.container.height(),
                                                                                    flag = false;

                                                                                flag = saveTop < top;
                                                                                saveTop = top;

                                                                                console.warn('scroll not relised');

                                                                                if (flag && scr - top <= 80) {

                                                                                                this.sendModel.set({
                                                                                                                ts: this.model.get('timeStampForUpdate'),
                                                                                                                page: pon.currentPage++
                                                                                                });

                                                                                                this.onLoad({ add: true });

                                                                                                console.log('scroll');
                                                                                }
                                                                }
                                                }

                                },

                                childViewTriggers: {

                                                'table:row:handler': 'table:row:handler'
                                }

                });
});
'use strict';

define('settings.baseOptions', ['i18n!nls/resources.min', 'global.request.param'], function (Resources, paramView) {

            return Mn.CollectionView.extend({

                        childView: Mn.View.extend({

                                    template: '#base-setting-template',

                                    regions: {
                                                params: { el: '#params', replaceElement: true }
                                    },

                                    onBeforeRender: function onBeforeRender() {

                                                if (!this.model.has('type')) this.model.set('type', '');
                                    },

                                    onRender: function onRender() {

                                                //if (this.model.get('name') === 'MainEntity')
                                                //    this.showChildView('params', new paramView({
                                                //        attributes: {
                                                //            ParametrType: 'Object',
                                                //            Name: 'MainEntity',
                                                //            DisplayValue: this.model.get('value').DisplayValue,
                                                //            Value: this.model.get('value').Value,
                                                //            Caption: this.model.get('displayName')
                                                //        }}));

                                    }

                        }),

                        initialize: function initialize() {

                                    this.collection = new Backbone.Collection([{ displayName: Resources.title, name: 'title', value: this.model.get('title'), type: 'text' }, { displayName: Resources.updatingContent, name: 'update', value: this.model.get('update'), type: 'checkbox' }, { displayName: Resources.timeoutUpdate, name: 'timeUpdate', value: this.model.get('timeUpdate'), type: 'text' }]);

                                    if (this.model.get('typeName') === 'WidgetSource') {

                                                var o = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetSource.Options");

                                                if (!o.has('WidgetParamValue')) o.set('WidgetParamValue', { hideRubrics: false });

                                                this.collection.add([{ displayName: Resources.hideRubrics, name: 'hideRubrics', value: !!o.get('WidgetParamValue').hideRubrics, type: 'checkbox' }, { displayName: Resources['contain-html'], name: 'isHtmlContent', value: !!this.model.get('isHtmlContent'), type: 'checkbox' }, { displayName: Resources.highlightMentionObj, name: 'highlightMentionObj', value: !!this.model.get('highlightMentionObj'), type: 'checkbox' }, {
                                                            displayName: Resources.contentProp, type: 'select', name: 'contentProp', value: [{ value: '', title: '...' }, { value: 'TextSource', title: 'TextSource', checked: this.model.get('contentProp') === 'TextSource' }, { value: 'WebFile', title: 'WebFile', checked: this.model.get('contentProp') === 'WebFile' }]
                                                }, { displayName: Resources.emc, name: 'extractOnlyMedia', value: !!this.model.get('extractOnlyMedia'), type: 'checkbox' }]);
                                    }

                                    if (this.model.get('typeName') === 'WidgetTable') {

                                                this.collection.add([{ displayName: Resources.markAfSel, name: 'isMarkSelectedItem', value: !!this.model.get('isMarkSelectedItem'), type: 'checkbox' }]);
                                    }

                                    if (this.model.get('typeName') === 'WidgetRunning') {

                                                var _o = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetRunDirection");

                                                if (!_o.has('WidgetParamValue')) _o.set('WidgetParamValue', { Right: false });

                                                this.collection.add([{
                                                            displayName: Resources.dire + ' ( ' + Resources.toright + ' )',
                                                            name: 'WidgetRunDirection',
                                                            value: !!_o.get('WidgetParamValue').Right,
                                                            type: 'checkbox'
                                                }]);
                                    }

                                    if (this.model.get('typeName') === 'WidgetSemNet') {

                                                var value = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetSource.Options").WidgetParamValue || { DisplayValue: '', Value: [] };

                                                this.collection.add([{ displayName: Resources.bsno, name: 'MainEntity', value: value }]);
                                    }
                        },

                        childViewOptions: function childViewOptions(m) {
                                    m.set('prefix', this.model.id);
                        },

                        onSave: function onSave() {

                                    var data = $.GetData(this.$el);

                                    var o = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetSource.Options");
                                    o.set('WidgetParamValue', { hideRubrics: data.hideRubrics });

                                    var a = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetRunDirection");
                                    a.set('WidgetParamValue', { Right: data.WidgetRunDirection });

                                    var saveCollection = Backbone.Radio.channel('chW').request('get:params:collection', this.model.id);
                                    saveCollection.add([o, a]);

                                    saveCollection.fetch({
                                                success: function (res) {

                                                            data.Characteristics = res.toJSON();
                                                            this.model.save(data);
                                                }.bind(this)

                                    });
                        }
            });
});
'use strict';

define('settings.chain', ['i18n!nls/resources.min'], function (Resources) {

    var collectionParams = Backbone.Collection.extend({
        model: Backbone.Model.extend({
            idAttribute: 'QueryParamsMapID',
            defaults: {
                QueryParamsMapID: null,
                QueryParamID: 0,
                QueryID: 0,
                ColumnSystemName: ''
            }
        })
    });

    var listView = Mn.CollectionView.extend({

        tagName: 'ul',

        childView: Mn.View.extend({

            tagName: 'li',

            template: _.template('<input type="radio" id="id<%- id %>" class="g-form--radio" name="widgets" value="<%- id %>"><label for="id<%- id %>"><%- title %></label>'),

            triggers: {

                'click input': {
                    event: 'widget:select',
                    stopPropagation: false,
                    preventDefault: false
                }
            }
        }),

        childViewTriggers: {
            'widget:select': 'widget:select'
        }
    });

    var selectView = Mn.CollectionView.extend({

        tagName: 'select',

        childView: Mn.View.extend({

            tagName: 'option',

            getTemplate: function getTemplate() {

                if (this.model.has('displayName')) return _.template('<%- displayName %> (<%- systemName %>)');else return _.template('<%- Caption %> (<%- Name %>)');
            },

            onRender: function onRender() {

                if (this.model.has('systemName')) this.$el.attr('value', this.model.get('systemName'));else this.$el.attr('value', this.model.id);
            }
        })
    });

    var resultView = Mn.CollectionView.extend({

        tagName: 'ul',
        className: 'list-area',

        childView: Mn.View.extend({

            tagName: 'li',
            className: 'item',

            template: _.template('<%- Title %>&nbsp;<span data-icon="icon-trash"></span>'),

            triggers: {
                'click span[data-icon="icon-trash"]': 'rel:remove'
            }
        }),

        childViewTriggers: {
            'rel:remove': 'rel:remove'
        }
    });

    return Mn.View.extend({

        template: '#relations-settings-template',
        templateContext: {
            Resources: Resources
        },

        events: {

            'click span[data-icon="icon-anchor"]': function clickSpanDataIconIconAnchor() {

                var titleWidget = this.selectWidget.get('title'),
                    paramsThisWidget = this.getChildView('params'),
                    columnsSelectWidget = this.getChildView('select');

                var m = new this.collection.model({
                    Title: titleWidget + " : " + columnsSelectWidget.$(':checked').text() + " - " + paramsThisWidget.$(':checked').text(),
                    wID: this.selectWidget.id,
                    QueryParamID: paramsThisWidget.$(':checked').val(),
                    QueryID: this.selectWidget.get('requestParameters').rid,
                    ColumnSystemName: columnsSelectWidget.$(':checked').val()
                });

                m.collection = this.collection;
                m.save({}, {

                    success: function (model) {

                        this.collection.add(model);

                        var s = this.model.get('publishersSubscriberMap') || {};

                        if (!s[model.get('wID')]) s[model.get('wID')] = [];

                        s[model.get('wID')].push(model.toJSON());

                        this.model.set('publishersSubscriberMap', s);
                    }.bind(this),

                    error: function () {
                        this.triggerMethod('show:message', Resources.error);
                    }.bind(this)

                });
            }
        },

        regions: {
            list: { el: '#widgets', replaceElement: true },
            params: { el: '#params', replaceElement: true },
            select: { el: '#select-param', replaceElement: true },
            result: { el: '#result', replaceElement: true }
        },

        initialize: function initialize() {

            this.collection = new collectionParams();
        },

        onRender: function onRender() {

            this.showChildView('list', new listView({ collection: new Backbone.Collection() }));
            this.showChildView('select', new selectView({ collection: new Backbone.Collection() }));
            this.showChildView('result', new resultView({ collection: this.collection }));

            this.showChildView('params', new selectView({
                collection: this.model.get('requestParameters') && this.model.get('requestParameters').parameters ? new Backbone.Collection(this.model.get('requestParameters').parameters) : new Backbone.Collection()
            }));
        },

        onBeforeShow: function onBeforeShow() {

            if (this.model.get('requestParameters') && this.model.get('requestParameters').rid) {

                if (this.hasRegion('notify')) {

                    var rs = this.getRegions();

                    _.each(rs, function (v, k) {
                        v.$el.show();
                    });

                    this.$('table').show();
                    this.removeRegion('notify');
                }

                if (!this.getChildView('params').collection.length) this.getChildView('params').collection.reset(this.model.get('requestParameters').parameters);

                var mid = this.model.id,
                    models = this.model.collection ? this.model.collection.filter(function (a) {
                    if (a.get('feed') && mid !== a.id) return a;
                }) : [];

                this.getChildView('list').collection.reset(models);

                var pm = this.model.get('publishersSubscriberMap'),
                    listWidgets = this.getChildView('list').collection,
                    paramsThisWidget = this.getChildView('params').collection,
                    columnsSelectWidget = this.getChildView('select').collection;

                _.each(pm, function (v, k) {

                    var w = this.model.collection.get(k);

                    if (!w) return;

                    var titleWidget = w.get('title'),
                        columnsWidget = w.has('feed') ? w.get('feed').head ? w.get('feed').head : [{ systemName: 'argId', displayName: 'argId' }, { systemName: 'fnId', displayName: 'fnId' }] : [];

                    _.each(v, function (o) {

                        var parModel = paramsThisWidget.get(o.QueryParamID),
                            column = _.findWhere(columnsWidget, { systemName: o.ColumnSystemName }),
                            titleParam = parModel.get('Caption') + ' ( ' + parModel.get('Name') + ' )',
                            titleColumn = column ? column.displayName + ' ( ' + column.systemName + ' )' : '';

                        o.Title = titleWidget + " : " + titleColumn + " - " + titleParam;
                        o.wID = k;

                        var model = new this.collection.model(o);
                        model.url = '/api/widget/' + this.model.id + '/qparammaps/' + k + '/' + o.QueryParamsMapID;

                        this.collection.add(model);
                    }, this);
                }, this);
            } else {

                rs = this.getRegions();

                _.each(rs, function (v, k) {
                    v.$el.hide();
                });

                this.$('table').hide();

                this.addRegion('notify', '.notify');

                var notify = Mn.View.extend({
                    template: _.template(Resources.rsw3)
                });

                this.showChildView('notify', new notify());
            }
        },

        collectionEvents: {

            update: function update(c, o) {

                if (o.changes.removed.length) {

                    var d = o.changes.removed[0];

                    var data = this.model.get('publishersSubscriberMap');

                    var p = data[d.get('wID')].filter(function (a) {
                        return a.QueryParamsMapID !== d.get('QueryParamsMapID');
                    });

                    data[d.get('wID')] = p;

                    this.model.set('publishersSubscriberMap', data);
                }
            },

            request: function request() {},

            reset: function reset() {

                this.getChildView('result').collection.reset(this.collection.models);
            }
        },

        childViewEvents: {

            'rel:remove': function relRemove(v) {

                this.triggerMethod('show:message:confirm', {
                    text: Resources.sure,
                    fx: function fx() {
                        v.model.destroy();
                    }
                });
            },

            'widget:select': function widgetSelect(v) {

                this.selectWidget = v.model;

                var o = this.selectWidget.get('feed').head || [{ systemName: 'argId', displayName: 'argId' }, { systemName: 'fnId', displayName: 'fnId' }];

                if (o) {

                    this.getChildView('select').collection.reset(o);

                    this.collection.url = '/api/widget/' + this.model.id + '/qparammaps/' + this.selectWidget.id;
                    //this.collection.fetch({ reset: true });
                } else this.getChildView('select').collection.reset();
            }
        }
    });
});
'use strict';

define('settings.decorationWidget', ['i18n!nls/resources.min'], function (Resources) {

        function rgb2hex(rgb) {

                if (rgb) rgb = rgb.replace('rgba(', '').replace(')', '').split(',');

                return rgb && rgb.length === 4 ? {
                        hex: "#" + ("0" + parseInt(rgb[0], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[1], 10).toString(16)).slice(-2) + ("0" + parseInt(rgb[2], 10).toString(16)).slice(-2),
                        a: parseFloat(rgb[3]).toFixed(2) * 100
                } : { hex: '#ffffff', a: 100 };
        }

        var maketView = Mn.View.extend({

                className: 'pattern',
                template: '#maket-template',

                onRender: function onRender() {

                        if (this.model.get('BorderIsVisible')) this.$el.css('background-color', this.model.get('CaptionBackground'));else this.$el.css('background-color', 'transparent');

                        if (this.model.get('ContainerIsTransparent')) this.$el.css('background-color', 'transparent');
                }

        });

        var patView = Mn.View.extend({

                className: 'decoration',
                template: '#decoration-settings-template',
                templateContext: {
                        Resources: Resources
                },

                regions: {
                        maket: { el: '#maket', replaceElement: true }
                },

                events: {

                        'click input[type="checkbox"]': function clickInputTypeCheckbox(e) {

                                var $e = $(e.target);
                                this.model.set($e.attr('name'), $e.prop('checked'));
                        }

                },

                onRender: function onRender() {

                        this.showChildView('maket', new maketView({ model: this.model }));
                },

                onAttach: function onAttach() {

                        this.$('input.Decoration').each(function (i, e) {

                                var v = rgb2hex(this.model.get(e.getAttribute('name')));

                                $(e).ejColorPicker({

                                        locale: Resources.Lang,
                                        modelType: "palette",
                                        presetType: "webcolors",

                                        htmlAttributes: { style: "display:inline-block;" },

                                        value: v.hex,
                                        opacityValue: v.a,

                                        close: function (args) {

                                                var rgb = $(e).data('ejColorPicker').rgb;

                                                this.model.set($(e).attr('name'), 'rgba(' + rgb.r + ',' + rgb.g + ',' + rgb.b + ',' + rgb.a + ')');
                                        }.bind(this)

                                });
                        }.bind(this));
                },

                modelEvents: {

                        change: function change(m) {

                                this.getChildView('maket').render();
                        }

                }

        });

        return Mn.View.extend({

                template: _.template('<div></div>'),

                regions: {
                        c: { el: 'div', replaceElement: true }
                },

                onRender: function onRender() {

                        var o = this.model.get('Decoration');

                        o.prefix = this.model.id || new Date().valueOf();

                        var m = new Backbone.Model(o);

                        this.showChildView('c', new patView({ model: m }));

                        this.listenTo(m, 'change', function () {
                                this.model.set('Decoration', m.toJSON());
                        });
                },

                onSave: function onSave() {

                        this.model.save();
                }

        });
});
'use strict';

define('settings.legendMap', ['i18n!nls/resources.min', 'global.behaviors.input'], function (Resources, inputBehavior) {

    var legendItem = Backbone.Model.extend({
        idAttribute: "LegendItemUID",
        defaults: {
            LegendItemUID: null,
            MarkerColor: "",
            MarkerDescription: "",
            MarkerUrl: ""
        }
    });

    var legendModel = Backbone.Model.extend({
        defaults: {
            id: null,
            Title: '',
            LegendIsVisible: false,
            LegendPosition: '',
            WidgetsLegendItems: []
        }
    });

    var listView = Mn.CollectionView.extend({

        tagName: 'table',
        className: 'items-legend-settings',

        childView: Mn.View.extend({

            tagName: 'tr',
            template: '#legend-item-template',
            templateContext: { Resources: Resources },

            ui: {
                name: 'input[name=MarkerDescription]'
            },

            events: {

                'blur @ui.name': function blurUiName() {

                    if ($.trim(this.ui.name.val())) this.model.set('MarkerDescription', this.ui.name.val());
                },

                'click button[data-icon="icon-trash"]': function clickButtonDataIconIconTrash() {

                    Backbone.trigger('message:confirm', {
                        title: Resources.askyousure,
                        fx: function fx() {
                            this.model.destroy();
                        },
                        ctx: this
                    });
                }
            }
        }),

        collectionEvents: {

            update: function update(c, o) {
                if (o.changes.removed.length) this.triggerMethod('reset:default', o.changes.removed[0]);
            }
        }
    });

    var mainView = Mn.View.extend({

        behaviors: {
            input: inputBehavior
        },

        template: '#legend-settings-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            title: 'input[name=Title]',
            position: '.RbtnSet input',
            show: 'input[name=LegendIsVisible]'
        },

        events: {

            'blur @ui.title': function blurUiTitle() {
                this.model.set('Title', this.ui.title.val());
            },

            'click @ui.position': function clickUiPosition() {
                this.model.set('LegendPosition', this.ui.position.filter(':checked').val());
            },

            'click @ui.show': function clickUiShow() {
                this.model.set('LegendIsVisible', this.ui.show.prop('checked'));
            }

        },

        modelEvents: {

            invalid: function invalid() {
                this.ui.title.addClass("Alarm");
            }
        },

        onRender: function onRender() {

            this.ui.position.filter('[value="' + this.model.get('LegendPosition') + '"]').prop('checked', true);
        }
    });

    return Mn.View.extend({

        template: _.template('<div id="main"></div><div id="list"></div>'),

        regions: {
            main: { el: '#main', replaceElement: true },
            list: { el: '#list', replaceElement: true }
        },

        onRender: function onRender() {

            var mainModel = new legendModel(this.model.get('Legend'));
            mainModel.set('id', this.model.id);
            mainModel.url = "/api/widget/" + this.model.id + "/legend";

            this.showChildView('main', new mainView({ model: mainModel }));

            var legendItemsCollection = new Backbone.Collection(this.model.get('WidgetsLegendItems'), { model: legendItem });
            legendItemsCollection.url = '/api/widget/' + this.model.id + '/legenditem';

            this.showChildView('list', new listView({ collection: legendItemsCollection }));
        },

        collectionEvents: {

            reset: function reset() {

                if (!this.model.get('Legend') || !this.model.get('Legend').WidgetsLegendItems.length) this.setDefaultList();else this.getChildView('list').collection.reset(this.model.get('Legend').WidgetsLegendItems);
            }

        },

        onChildviewResetDefault: function onChildviewResetDefault(m) {

            this.getChildView('list').collection.add(new legendItem({ MarkerUrl: m.get('MarkerUrl') }));
        },

        onSave: function onSave() {

            $.ajax({
                method: "POST",
                contentType: 'application/json; charset=utf-8',
                url: "/api/widget/" + this.model.id + "/legenditems",
                data: JSON.stringify(this.getChildView('list').collection.toJSON())
            }).done(function (c) {

                this.getChildView('main').model.save({ WidgetsLegendItems: this.getChildView('list').collection.toJSON() });

                this.model.save({ 'Legend': this.getChildView('main').model.toJSON() });
            }.bind(this));
        },

        onReset: function onReset() {

            this.getChildView('list').collection.reset();
            this.setDefaultList();
        },

        setDefaultList: function setDefaultList() {

            var group = this.collection.groupBy('markerurl');

            _.each(group, function (o, k) {

                if (k !== 'undefined') this.getChildView('list').collection.add(new legendItem({ MarkerUrl: k }));
            }, this);
        }

    });
});
'use strict';

define('settings.reportingView', ['i18n!nls/resources.min', 'g/tree'], function (Resources, treeView) {

    var modelReport = Backbone.Model.extend({
        idAttribute: "UID",
        defaults: {
            UID: null,
            ReportSysName: "",
            TypeSysName: ""
        }
    });

    var listReports = Mn.CollectionView.extend({
        className: 'list-report',
        tagName: 'section',

        childView: Mn.View.extend({

            className: 'item',
            template: '#item-report-template',

            templateContext: {
                Resources: Resources
            },

            triggers: {
                "click .font-icon-delete": 'report:clear'
            }
        }),

        childViewTriggers: {
            'report:clear': 'report:clear'
        }

    });

    var optionView = Mn.View.extend({

        tagName: 'option',
        template: _.template('<%- title %>'),

        onRender: function onRender() {
            this.$el.attr('value', this.model.id);
        }

    });

    var selectView = Mn.CollectionView.extend({

        tagName: 'select',

        childView: optionView,

        onRender: function onRender() {

            this.addChildView(new optionView({ model: new Backbone.Model({ id: '0', title: '...' }) }), 0);
            this.$el.val('0');
        },

        triggers: {
            'change': 'change:publish'
        }
    });

    return Mn.View.extend({

        className: 'type-reporting anbr-tabs',
        template: '#type-reporting-settings',
        templateContext: {
            Resources: Resources
        },

        events: {
            "click nav>span": function clickNavSpan(e) {
                this.activeTab($(e.target).closest("span[data-name]").attr("data-name"));
            }
        },

        onChildviewChangePublish: function onChildviewChangePublish(v) {

            var wid = v.$el.val();

            if (wid !== '0') {

                if (v.options.name === 'publishers') {

                    this.getChildView('rep').collection.reset();

                    var w = v.collection.get(wid);

                    if (w.has("requestParameters")) {

                        var queryid = w.get("requestParameters").rid;

                        this.$(".load-tree").show();

                        var col = new Backbone.Collection();
                        col.url = '/api/Tree/ByWidgetQ/' + queryid;

                        this.showChildView('tree', new treeView({ collection: col, node: { checkbox: false } }));
                        col.fetch({ reset: true });

                        this.listenTo(this.getChildView('tree'), 'container:select:item', function (v) {

                            this.model.set('TypeSysName', v.model.get("sysName"));

                            $.get('/api/Reporting/ByWidgetQ/' + queryid + '/' + v.model.id).done(function (a) {

                                this.getChildView('rep').collection.reset(_.map(a, function (b) {
                                    return { id: b.ReportSysName, title: b.ReportDescription };
                                }));
                            }.bind(this));
                        });
                    } else this.getRegion('tree').empty();
                } else if (v.options.name === 'reports') this.model.set('ReportSysName', wid);
            } else this.getRegion('tree').empty();
        },

        childViewEvents: {},

        onChildviewReportClear: function onChildviewReportClear(v) {

            this.triggerMethod('show:message:confirm', {
                text: Resources.sure,
                fx: function fx() {
                    v.model.destroy();
                },
                ctx: this
            });
        },

        activeTab: function activeTab(name) {

            this.$("nav>span").removeClass("active");
            this.$("nav>span[data-name='" + name + "']").addClass("active");
            this.$("section").hide();
            this.$("." + name).show();
        },

        regions: {
            list: { el: '.list-report', replaceElement: true },
            publ: { el: '.list-publishers', replaceElement: true },
            rep: { el: '.type-rep', replaceElement: true },
            tree: { el: '.load-tree', replaceElement: true }
        },

        onRender: function onRender() {

            this.showChildView('publ', new selectView({ collection: new Backbone.Collection(), name: 'publishers' }));
            this.showChildView('rep', new selectView({ collection: new Backbone.Collection(), name: 'reports' }));

            var listCollection = new Backbone.Collection();
            listCollection.model = modelReport;
            listCollection.url = '/api/widget/' + this.options.wid + '/reportitems';

            this.model = new modelReport();
            this.model.collection = listCollection;

            this.showChildView('list', new listReports({ collection: listCollection }));

            this.activeTab("list-report");
        },

        onBeforeShow: function onBeforeShow() {

            if (!this.options.publishers.length) {

                this.options.publishers.fetch({
                    reset: true,
                    success: function (collection) {

                        if (collection.length) {
                            this.$('.notice').empty();
                            this.getChildView('publ').collection.reset(this.options.publishers.models);
                            this.getChildView('list').collection.fetch({ reset: true });
                        } else this.$('.notice').html(Resources.subscrNote);
                    }.bind(this)
                });
            } else {

                this.$('.notice').empty();
                this.getChildView('publ').collection.reset(this.options.publishers.models);
                this.getChildView('list').collection.fetch({ reset: true });
            }
        },

        onSave: function onSave() {

            this.model.save({}, {

                success: function (model) {
                    this.getChildView('list').collection.add(model);
                }.bind(this)

            });
        }

    });
});
'use strict';

define('settings.subscribeList', ['i18n!nls/resources.min'], function (Resources) {

        // см. также widget.widgetView include
        var include = ["WidgetTable", "WidgetMap", "WidgetGraph", "WidgetRunning", "WidgetHtml", 'WidgetCloud', 'WidgetSemNet'];

        return Mn.CollectionView.extend({

                className: "list-area",

                emptyView: Mn.View.extend({

                        template: _.template('<i style="color:red;font-style:italic;"><%- Resources.subsnotfound %></i>'),
                        templateContext: { Resources: Resources }

                }),

                childView: Mn.View.extend({

                        className: 'item',

                        template: _.template("<input type='checkbox' class='g-form--checkbox' id='<%- id %>' name='<%- id %>' /><label for='<%- id %>'><%= title %>&nbsp;(<%= typeName %>)</label>"),

                        triggers: {
                                "click": 'click:item'
                        },

                        onBeforeRender: function onBeforeRender() {

                                if (include.indexOf(this.model.get("typeName")) === -1) this.$el.hide();
                        }

                }),

                isEmpty: function isEmpty() {

                        if (this.collection) return !this.collection.filter(function (m) {

                                return include.indexOf(m.get("typeName")) !== -1;
                        }).length;else return true;
                },

                childViewTriggers: {
                        'click:item': 'click:item:subscribe'
                }

        });
});
'use strict';

define('settings.subscribe', ['settings.subscribeList'], function (subscribeList) {

            return Mn.View.extend({

                        template: _.template('<div></div>'),

                        regions: {
                                    area: 'div'
                        },

                        onRender: function onRender() {

                                    var list = new subscribeList({ collection: this.model.collection });

                                    this.showChildView('area', list);

                                    list.setFilter(function (child, index, collection) {
                                                return child.id !== this.model.id;
                                    }.bind(this));

                                    this._check();
                        },

                        onChildviewClickItemSubscribe: function onChildviewClickItemSubscribe(v) {

                                    if (!v.$('input').is(':checked')) {

                                                this.collection.create(new Backbone.Model({
                                                            id: v.model.id,
                                                            title: v.model.get('title'),
                                                            requestParameters: v.model.get('requestParameters')
                                                }));
                                    } else {

                                                this.collection.get(v.model.id).destroy();
                                    }
                        },

                        collectionEvents: {

                                    update: function update() {

                                                this._check();
                                    },

                                    reset: function reset() {

                                                this._check();
                                    }
                        },

                        _check: function _check() {

                                    this.getChildView('area').children.each(function (v) {

                                                if (this.collection.findWhere({ id: v.model.id })) v.$('input').prop('checked', true);else v.$('input').prop('checked', false);
                                    }, this);
                        },

                        onShow: function onShow() {

                                    if (!this.collection.length) this.collection.fetch({ reset: true });
                        }

            });
});
'use strict';

define('widget.content.contentView', ['i18n!nls/resources.min', '/js/dist/video-js/video.js', '/js/dist/jquery.mCustomScrollbar.concat.min.js'], function (Resources) {

    var ContentModel = Backbone.Model.extend({ idAttribute: "object_id" });

    var itemsView = Mn.CollectionView.extend({

        className: 'accordion',

        onAttach: function onAttach() {

            this.$el.css({ position: 'relative', overflow: 'hidden' });
        },

        childView: Mn.View.extend({

            className: 'item-content',

            template: templates['widget-source-content'],
            templateContext: { Resources: Resources },

            ui: {
                head: '.head-content',
                load: '.load',
                rubrics: '.card-rubric',
                url: '.card-link',
                play: '.play-button'
            },

            events: {

                'click @ui.play': function clickUiPlay(e) {

                    var $e = $(e.target),
                        start = parseInt(this.model.get('playingat')),
                        end = parseInt(this.model.get('playinguntil')),
                        p = videojs(this.$('video').get(0));

                    this.ui.play.text('pause');

                    p.ready(function () {

                        if (!end || this.currentTime() < end) {
                            if (this.paused()) {
                                $e.text('pause');
                                this.play();
                            } else this.pause();
                        } else {
                            this.load();
                            this.play();
                        }
                    });

                    p.on("waiting", function () {
                        $e.attr('disabled');
                    });

                    p.on("loadeddata", function () {
                        $e.removeAttr('disabled');
                    });

                    p.on("pause", function () {
                        $e.text('play');
                    });

                    Backbone.trigger("storage:addPlayer", p, this.model.get("object_id"));
                }

            },

            initialize: function initialize() {

                this.lightPos = [];
            },

            onBeforeRender: function onBeforeRender() {

                if (!this.model.has('webfile')) this.model.set('webfile', '');
            },

            onRender: function onRender() {

                if (this.model.has('contentcollection_rubrics') && $.trim(this.model.get('contentcollection_rubrics')) && !this.model.get('hideRubrics')) {

                    var c = this.model.get('contentcollection_rubrics');

                    if (_.isArray(c) && c.length) this.ui.rubrics.find('p').html(c.join(' | '));else this.ui.rubrics.find('p').text(c);
                } else this.ui.rubrics.hide();

                if (this.model.get('url_источника')) this.ui.url.html('<span class="card-link-icon"><svg class="link-icon"><use xlink:href="#link-icon"></use></svg></span>\n                        <a href="' + this.model.get('url_источника') + '" target="_blank">' + (this.model.get('massmedia') || this.model.get('url_источника')) + '</a>');
            },

            onAttach: function onAttach() {

                var typename = this.model.get('systemtypename');

                if (typename === "Audiosource" || typename === "VideoSource") {

                    var p = videojs(this.$('video').get(0)),
                        videoWidth = 0,
                        videoHeight = 0,
                        isVideo = this.model.get('systemtypename') === "VideoSource",
                        w = this.$el.width();

                    if (!isVideo) p.height(128, true);else p.height((this.$el.width() - 80) / 3, true);

                    p.on("loadeddata", function () {

                        videoWidth = this.L.videoWidth;
                        videoHeight = this.L.videoHeight;

                        if (isVideo) {

                            if (w < videoWidth) {
                                var d = videoWidth / videoHeight;
                                videoWidth = w - 30;
                                videoHeight = videoWidth / d;
                            }

                            this.width(videoWidth, true);
                            this.height(videoHeight, true);
                        }
                    });
                } else this._toLightPosition();
            },

            _toLightPosition: function _toLightPosition() {
                var _this = this;

                this.ui.load.css({ width: this.$el.closest('.widget-container').width(), height: this.$el.closest('.widget-container').height() - this.ui.head.height(), overflow: 'auto' });

                this.ui.load.find("span[data-oid]").each(function (i, e) {
                    $(e).addClass("Mark");
                    _this.lightPos.push($(e).position().top);
                });

                var pd = this.lightPos,
                    sp = 0;

                this.ui.load.mCustomScrollbar();

                if (pd.length && sp !== pd.length) {

                    this.ui.load.mCustomScrollbar("scrollTo", pd[sp] - this.ui.load.position().top - 3);

                    this.ui.load.find("span[data-oknd=2].C").removeClass("C");
                    this.ui.load.find("span[data-oknd=2]").eq(sp).addClass("C");

                    if (sp === pd.length - 1) sp = 0;else sp++;
                } else this.ui.load.mCustomScrollbar("scrollTo", 0);

                //this.$(".gotoresult .total").html(Resources.Total + "&nbsp;" + Resources.matches + ":&nbsp;" + pd.length);
                //if (pd.length)
                //    this.$(".gotoresult").show();
                //else
                //    this.$(".gotoresult").hide();
            }
        })

    });

    return Mn.View.extend({

        template: _.template('<div></div>'),

        regions: {
            items: { el: 'div', replaceElement: true }
        },

        initialize: function initialize() {

            Backbone.trigger("storage:clearPlayers");

            this.collection = new Backbone.Collection();
            this.collection.url = '/api/widget/listen/' + this.options.requestID + '/source/' + this.model.id + '/' + this.options.objectID;
            //'/api/details/ContentV2/' + this.options.objectID;
        },

        onRender: function onRender() {

            this.showChildView('items', new itemsView({ collection: new Backbone.Collection() }));
        },

        onAttach: function onAttach() {

            this.collection.fetch({ reset: true });
        },

        modelEvents: {

            'change:height': function changeHeight() {

                this.getChildView('items').render();
            }

        },

        collectionEvents: {

            request: function request() {

                Backbone.Radio.channel('loader').trigger('show', this.$el, { speed: 'fast' });
            },

            reset: function reset() {

                var o = Backbone.Radio.channel('chW').request('get:param:model', this.model.get('Characteristics'), "WidgetSource.Options"),
                    hideRubrics = false;

                if (o.has('WidgetParamValue')) hideRubrics = o.get('WidgetParamValue').hideRubrics;

                var m = this.collection.at(0),
                    items = m.get('items'),
                    c = [];

                _.each(items, function (item) {

                    var attr = _.chain(item.data).map(function (m) {
                        return [m.systemName, m.value];
                    }).object().value();

                    attr.links = item.links;

                    if (!attr.textsource) attr.textsource = '';

                    attr.hideRubrics = hideRubrics;

                    c.push(attr);
                }, this);

                this.getChildView('items').collection.reset(c);

                Backbone.Radio.channel('loader').trigger('hide');
                this.triggerMethod('content:loaded');
            },

            error: function error() {

                Backbone.Radio.channel('loader').trigger('hide');
                this.triggerMethod('content:loaded');
            }

        }

    });

    //var contentTemplate = '<div class="Tools"></div><div class="gotoresult" data-id="6782E40B-794A-467D-BC8E-21992920317D"><span class="total"></span>&nbsp;<button class="up"><%= Resources.go %></button></div><div class="RubricsLink"></div><div class="contentSnet"></div><div class="Load"></div>',

    //    mediaTemplate = '<% if(systemtypename=="VideoSource"){%><div><video id="videoFact<%= object_id %>" class="video-js vjs-default-skin Videosource" preload="none" poster="/images/Display128x128.png"><source src="<%= MediaUrl %><% if(PlayingAt){ %>#t=<%= PlayingAt %>,<%= PlayingUntil %><% } %>" type="video/mp4"></video><nav><button class ="Play" data-start="<%= PlayingAt %>" data-end="<%= PlayingUntil %>">&nbsp; </button><span class="Duration"></span></nav></div><% } if(systemtypename=="Audiosource"){ %><div><video id="videoFact<%= Object_ID %>" class="video-js vjs-default-skin Audiosource" preload="none" poster="/images/Headphones128x128.png"><source src="<%= mediaurl %><% if(PlayingAt){ %>#t=<%= PlayingAt %>,<%= PlayingUntil %><% } %>" type="audio/mp3"></video><nav><button class ="Play" data-start="<%= PlayingAt %>" data-end="<%= PlayingUntil %>">&nbsp; </button><span class="Duration"></span></nav></div><% } %><%= textsource %><%= webfile %><div><i><%= author %></i><br/><% if(massmedia) { %><a href="<%= url_источника %>" target="_blank"><%= massmedia %>&nbsp; &raquo; </a><br/><% } %></div>',

    //    template = '<p class="buttons"><button id="showOriginalDoc" class="originallink" data-id="0CA650F2-8D85-4C76-8B02-F4080F75B9DE"><%= Resources.originaldoc %></button>&nbsp;&nbsp;'+
    //    '<button id="translate" class="trans" data-id="5C949741-9B72-40EA-AAA6-6FD4419C6E86"><%= Resources.translate %></button>&nbsp;&nbsp;'+
    //    '<button id="toOriginal" class="trans" data-id="5C949741-9B72-40EA-AAA6-6FD4419C6E86"><%= Resources.returnText %></button>&nbsp;&nbsp;'+
    //    '<button id="shortText" data-id="73FCB91F-2E99-4BF7-857F-F3EB59610AFE"><%= Resources.view %></button>&nbsp;&nbsp;'+
    //    '<button class="showSn" data-id="4E38E1F4-38D5-40B5-AAAD-CCE5825100AD"><%= Resources.showSNet %></button>&nbsp;&nbsp;'+
    //    '<span class="modView right"><i><%= Resources.titleView %>: <b id="titleModView"><%= Resources.shortView %></b></i></span></p>';

    //var Dynamo = Backbone.View.extend({

    //    events: {
    //        "click button": "cmd"
    //    },

    //    cmd: function (e) {

    //        e.stopPropagation();

    //        var $b = $(e.target).closest("button");

    //        if ($.trim($b.data("href"))) {

    //            var r = { url: $b.data("href"), data: { }, method: $b.data("verb") };

    //            if ($b.data("name") === "shortText")
    //                this.parent.isMode = !this.parent.isMode;

    //            this.parent.sendRequest(r, this.parent.prepare, this.parent);

    //        } else 
    //            Backbone.trigger('content:'+$b.data("render"), this.parent.data ? new ContentModel(this.parent.data) : this.parent.model);
    //    },

    //    initialize: function(o) {
    //        this.parent = o.parent;
    //    },

    //    render: function () {

    //        this.$el.html(_.template(template)({ Resources: Resources }));

    //        this.$("#titleModView").text(this.parent.isMode ? Resources.fullView : Resources.shortView);

    //        this.collection.each(function (link) {
    //            if (link.get("rel") === "tools") this.addBtn(link.toJSON());
    //        }, this);

    //        //this.$("button").button();

    //        this.$(".buttons").show();

    //        return this;
    //    },

    //    addBtn: function(link) {
    //        var $b = this.$('#'+link.id);
    //        if (!App.check($b))
    //            $b.hide();
    //        else {
    //            _.each(link, function(value, key) {
    //                switch(key) {
    //                    case "id":
    //                        $b.attr("data-name", value);
    //                        if (value === "shortText") this.$(".modView").show();
    //                        break;
    //                    case "prompt":
    //                        $b.attr("title", value);
    //                        $b.button({ label: value });
    //                        break;
    //                    default: $b.attr('data-'+key, value);
    //                        break;
    //                }
    //            },this);
    //            $b.show();
    //        }
    //    },
    //});

    //var Item = Backbone.View.extend({

    //    events: {
    //        "click .gotoresult .up": "toresult",
    //        "click .gotoresult .down": "toresult"
    //    },

    //    toresult: function () {

    //        var pd = this.pd;
    //        if (pd.length && this.sp !== pd.length) {

    //            this.$(".Load").mCustomScrollbar("scrollTo", pd[this.sp] - this.$(".Load").position().top - 3);

    //            this.$(".Load").find("span[data-oknd=2].C").removeClass("C");
    //            this.$(".Load").find("span[data-oknd=2]").eq(this.sp).addClass("C");

    //            if (this.sp === pd.length - 1) this.sp = 0;
    //            else this.sp++;

    //        } else {
    //            this.sp = 0;
    //            this.$("div.Load").mCustomScrollbar("scrollTo", 0);
    //        }
    //        this.$(".gotoresult .total").html(Resources.Total + "&nbsp;" + Resources.matches + ":&nbsp;" + pd.length);
    //        if (pd.length)
    //            this.$(".gotoresult").show();
    //        else
    //            this.$(".gotoresult").hide();
    //    },

    //    initialize: function (o) {
    //        this.options = o;
    //        this.pd = [];
    //        this.sp = 0;
    //        this.isMode = false;

    //        this.model.set("PlayingAt",this.model.get("PlayingAt") || 0);
    //        this.model.set("PlayingUntil", this.model.get("PlayingUntil") || 0);
    //    },

    //    sendRequest: function (o, callback, ctx) {
    //        $.ajax(o).done(function (item) { callback.call(ctx, item) });
    //    },

    //    prepare: function (item) {

    //        var links = item.links;
    //        if ("items" in item) {
    //            this.data = App.prepare(item.items)[0];
    //            links = item.items[0].links;
    //        } else
    //            this.data = App.prepare([item])[0];

    //        this.initTools(new Backbone.Collection(links));

    //        this.data.PlayingAt = this.data.PlayingAt || 0;
    //        this.data.PlayingUntil = this.data.PlayingUntil || 0;


    //        // basic settings select TextSource or WebFile
    //        var field = this.options.parent.widget.get('contentProp');

    //        if (!this.model.has('textsource'))
    //            this.model.set('textsource', '');

    //        if (!this.model.has('webfile'))
    //            this.model.set('webfile', '');

    //        this.$(".Load").html(_.template(mediaTemplate)(this.data));
    //        this.loaded().fitLoad().toresult();
    //    },

    //    fitHeight: function () {
    //        var h = this.$el.parent().parent().height() - this.$el.parent().find("h3").outerHeight(), // accordion - parent
    //            dh = 0;
    //        this.$el.children(":not('.Load')").each(function(i, e) {if ($(e).is(":visible")) dh += parseInt($(e).outerHeight());});
    //        if (h) this.$(".Load").height(h - dh);
    //    },

    //    initTools:function(col) {
    //        if (this.Tools) {
    //            this.Tools.remove();
    //            if (!this.$(".Tools").get(0))
    //                this.$el.prepend('<div class="Tools"></div>');
    //        }
    //        this.Tools = new Dynamo({ collection: col, parent: this, el: this.$(".Tools") }).render();
    //        this.listenTo(this.Tools, "button:click", this.prepare);
    //    },

    //    render: function () {

    //        var links = this.model.get("links"),
    //            flag = _.find(links, function (l) { return l.rel === "sys" && l.id === "Mode" && l.value === "9" });

    //        this.$el.html(_.template(contentTemplate)( { Resources: Resources }));

    //        if (!flag) {

    //            this.initTools(new Backbone.Collection(links));

    //            // basic settings select TextSource or WebFile
    //            var field = this.options.parent.widget.get('contentProp');

    //            if (!this.model.has('textsource'))
    //                this.model.set('textsource', '');

    //            if (!this.model.has('webfile'))
    //                this.model.set('webfile', '');

    //            this.$(".Load").html(_.template(mediaTemplate)(this.model.toJSON()));

    //            //this.$("button.up").button({ label: Resources.go, icons: { primary: "ui-icon-seek-next" }, text: false });

    //            this.linkToRubrics();

    //        } else
    //            this.$(".Load").html(Resources.limit);

    //        return this;
    //    },

    //    fitLoad: function () {
    //        this.$(".Load").mCustomScrollbar("scrollTo", 0);//.scrollTop(0);
    //        this.pd = [];
    //        var s = this;
    //        this.$(".Load").find("span[data-oknd=2]").each(function(i, e){
    //            $(e).addClass("Mark");
    //            s.pd.push($(e).position().top);
    //        });
    //        return this;
    //    },

    //    loaded: function () {

    //        var $s = this.$el,
    //            name = '#videoFact' + this.model.get("object_id");

    //        if (this.$(name).get(0)) {
    //            var s = this;
    //            this.$("button.Play")
    //                .button({ text: false, icons: { primary: "ui-icon-play" } })
    //                .click(function () { s.play() });

    //            var p = videojs(this.$(name).get(0)),
    //                videoWidth = 0,
    //                videoHeight = 0,
    //                $c = this.$(".Load"),
    //                $v = this.$(name);

    //            //p.width(this.$(".Load").width() - 90, true);
    //            if ($v.hasClass("Audiosource"))
    //                p.height(128, true);
    //            else
    //                p.height((this.$(".Load").width() - 80) / 3, true);

    //            p.on("loadeddata", function () {
    //                videoWidth = this.L.videoWidth;
    //                videoHeight = this.L.videoHeight;
    //                if (!$v.hasClass("Audiosource")) {
    //                    if ($s.width() < videoWidth) {
    //                        var d = videoWidth / videoHeight;
    //                        videoWidth = $s.width() - 30;
    //                        videoHeight = videoWidth / d;
    //                    }
    //                    $c.css({ width: videoWidth + 20, height: videoHeight + 50 });
    //                    this.width(videoWidth, true);
    //                    this.height(videoHeight, true);
    //                }
    //            });
    //        }
    //        this.fitHeight();
    //        this.$(".Load").mCustomScrollbar();// { scrollbarPosition:'outside'}
    //        this.$('.mCSB_container').attr('dir', 'auto');
    //        return this;
    //    },

    //    play: function (e) {
    //        var $e = this.$("button.Play"),
    //            start = parseInt($e.data("start")),
    //            end = parseInt($e.data("end")),
    //            p = videojs(this.$("#videoFact" + this.model.get("object_id")).get(0));

    //        $e.button().button("option", "icons", { primary: "ui-icon-pause" });

    //        p.ready(function () {

    //            if (!end || this.currentTime() < end)
    //                if (this.paused()) {
    //                    $e.button("option", "icons", { primary: "ui-icon-pause" });
    //                    this.play();
    //                } else
    //                    this.pause();
    //            else {
    //                this.load();
    //                this.play();
    //            }
    //        });

    //        p.on("waiting", function () {
    //            $e.button("disable");
    //        });
    //        p.on("loadeddata", function () {
    //            $e.button().button("enable");
    //        });
    //        p.on("pause", function () {
    //            $e.button().button("option", "icons", { primary: "ui-icon-play" });
    //        });

    //        Backbone.trigger("storage:addPlayer", p, this.model.get("object_id"));
    //    },

    //    linkToRubrics: function () {
    //        var data = this.model.get("contentcollection_rubrics");
    //        if ($.trim(data))
    //            this.$(".RubricsLink").append('<i>' + Resources.linkToRubricTitle + ':</i>&nbsp;&nbsp;<b>' + data + '</b>');
    //    }
    //});


    // Mn.View.extend({

    //    template: _.template( '<div></div>' ),

    //    regions: {
    //        accordion: { el: 'div', replaceElement: true }
    //    },


    //    onRender: function () {

    //        this.showChildView( 'accordion', new listItems( { collection: this.collection }) );            

    //        //this.searchPhrase = App.Select.get("params") ? App.Select.get("params").phrase : "";
    //        //this.sendRequest({
    //        //    url: this.options.url || '/api/details/ContentV2/' + this.options.objectID,
    //        //    data: this.options.data || (this.searchPhrase ? $.param({ "highlightPhrase": this.searchPhrase }) : [])
    //        //}, this.prepare, this);

    //    },

    //    onAttach: function () {
    //        this.collection.fetch( { reset: true });
    //    },


    //    fitSize: function () {
    //        //_.each(this.items, function (s) { s.fitHeight() });
    //        //return this;
    //    }

    //    //sendRequest: function (o, callback, ctx) {

    //    //    this.$el.showIndicator();

    //    //    $.ajax( o )

    //    //        .done(function (item) {
    //    //            callback.call(ctx, item);
    //    //        })

    //    //        .always(function () {
    //    //            this.$el.hideIndicator();

    //    //            if (this.callback)
    //    //                this.callback.call( this.context, this );

    //    //        }.bind(this));
    //    //},

    //    //prepare: function (item) {

    //    //    this.$el.append("<div id='accordion'></div>");

    //    //    if ("version" in item) {

    //    //        _.each(item.items, this.addOne, this);

    //    //        if ( item.items.length > 1 ) {

    //    //            this.$("#accordion").accordion({
    //    //                heightStyle: "content",
    //    //                collapsible: true,
    //    //                activate: function () {
    //    //                    this.trigger( "action" );
    //    //                }
    //    //            });

    //    //        }
    //    //    } else 
    //    //        this.addOne(item);

    //    //    if (this.callback)
    //    //        this.callback.call(this.context, this);
    //    //},

    //    //addOne: function (item) {

    //    //    var m = new Backbone.Model(App.prepare([item])[0]);

    //    //    m.set("links", item.links);

    //    //    var s = new Item({ model: m, parent: this }).render();

    //    //    if (!(this.widget.has('hideTitle') && this.widget.get('hideTitle')))
    //    //        this.$("#accordion").append('<h3>' + m.get("display_name") || "" + '</h3>');

    //    //    this.$("#accordion").append(s.$el);

    //    //    s.loaded().fitLoad().toresult();
    //    //    this.items.push(s);
    //    //},


    //});
});
'use strict';

define('MasterCreateView', ['i18n!nls/resources.min', 'settings.subscribeList', 'requestView', 'settings.visualisation.chart.choice', 'g/ejRTEView', 'settings.decorationWidget', 'syncfusion'], function (Resources, subscribeList, Requests, visualView, HtmlEditor, decorationView) {

    var MIN_SIZE = 50;

    return Mn.View.extend({

        template: '#widget-create-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            next: '#next',
            back: '#back'
        },

        regions: {
            reqArea: '.requestParam>section',
            subscrArea: '#Subscribe',
            editor: ".htmlEditor",
            visual: ".visualization",
            decoration: { el: '#decoration', replaceElement: true }
        },

        initialize: function initialize() {

            this.panels = {
                "Default": ["one", "requestParam", "decoration"],
                "WidgetGraph": ["one", "requestParam", "visualization", "decoration"],
                "WidgetSource": ["one", "requestParam", "decoration", "subscribe"],
                "WidgetSemNet": ["one", "requestParam", "decoration", "subscribe"],
                "WidgetReporting": ["one", "requestParam", "decoration", "subscribe"],
                "WidgetHtml": ["one", "requestParam", "decoration", "htmlEditor"]
            };

            this.step = new Backbone.Model({ step: 0 });
            this.step.on("change:step", this.checkStep, this);

            this.publishers = new Backbone.Collection();
        },

        onRender: function onRender() {
            this.step.set("step", 1);
        },

        events: {

            "keyup #titleWidget": "checkTitle",

            "blur #titleWidget": "checkTitle",

            "mouseover .types-widget span": function mouseoverTypesWidgetSpan(e) {

                var name = $(e.target).closest("span").attr("id"),
                    data = {
                    "WidgetTable": Resources.WidgetTable,
                    "WidgetRunning": Resources.WidgetRunning,
                    "WidgetMap": Resources.WidgetMap,
                    "WidgetGraph": Resources.WidgetGraph,
                    "WidgetCloud": Resources.WidgetCloud,
                    "WidgetSource": Resources.WidgetSource,
                    "WidgetReporting": Resources.WidgetReporting,
                    "WidgetHtml": Resources.WidgetHtml,
                    "WidgetSemNet": Resources.WidgetSemNet
                };

                if (this.step.get("step") === 1) this.$(".one>.description").html(data[name]).fadeIn();
            },

            "mouseleave .types-widget span": function mouseleaveTypesWidgetSpan() {
                this.$(".one>.description").hide();
            },

            "click .types-widget span": function clickTypesWidgetSpan(a) {

                var $s = $(a.target).closest("span");

                this.model.set("typeName", $s.attr("id"));
                this.isInitRequest = false;
                this.next();
            },

            "click @ui.back": function clickUiBack() {

                var step = this.step.get("step");

                if (step > 1) {
                    step--;
                    this.step.set("step", step);
                }
            },

            "click @ui.next": 'next',

            "click nav>div": function clickNavDiv(e) {

                this.$("nav>div").toggleClass("ac");
                this.$(".tab-content").toggleClass("show");
            },

            "click #decor-chbx span.font-icon-checkbox": function clickDecorChbxSpanFontIconCheckbox(e) {

                var $c = $(e.target).closest("span"),
                    inpt = $c.find("input").get(0);

                $c.toggleClass("checked");

                inpt.checked = !inpt.checked;
            }
        },

        modelEvents: {

            change: function change() {

                this.ui.next.attr('disabled', !this.model.isValid());
            },

            'change:width': function changeWidth(m, v) {
                this.$('input[name="width"]').val(v);
            },

            'change:height': function changeHeight(m, v) {
                this.$('input[name="height"]').val(v);
            }
        },

        childViewEvents: {

            'chart:selected': function chartSelected(v) {
                this.ui.next.attr('disabled', false);
            }
        },

        next: function next() {

            var step = this.step.get("step");
            step++;
            this.step.set("step", step);
        },

        checkTitle: function checkTitle() {

            this.model.set("title", $.trim(this.$("#titleWidget").val()));
        },

        checkStep: function checkStep() {

            this.$el.closest('.side-panel').removeClass('big');

            var s = this.step.get("step"),
                p = this.panels[this.model.get("typeName")] || this.panels["Default"];

            if (p.indexOf("htmlEditor") !== -1 && this.getRegion('editor').hasView()) this.model.set("contentHtml", this.getChildView('editor').ejRTE.getHtml());

            if (s >= 0 && s <= p.length) {

                this.ui.next.text(s === p.length ? Resources.createdWidget : Resources.next).attr('disabled', !this.model.isValid());

                this.ui.back.attr('disabled', s === 1);

                this.$(".step-panel").hide();
                var panelName = p[s - 1];
                this.$("." + panelName).show();

                if (s === 1) this.$(".cmd").hide();else this.$(".cmd").show();

                switch (panelName) {

                    case "requestParam":

                        this.showChildView('reqArea', new Requests({ model: this.model }));

                        break;

                    case "visualization":

                        this.$el.closest('.side-panel').addClass('big');
                        this.ui.next.attr('disabled', true);
                        this.showChildView('visual', new visualView({ model: this.model }));

                        break;

                    case "subscribe":

                        if (!this.getRegion('subscrArea').hasView()) {

                            var ss = new subscribeList({ collection: this.model.collection });

                            this.getRegion('subscrArea').show(ss);

                            this.listenTo(ss, 'click:item:subscribe', function (v) {

                                if (!v.$('input').is(':checked')) {

                                    v.$('input').prop('checked', true);
                                    this.publishers.add(new Backbone.Model({ id: v.model.id, title: v.model.get('title') }));
                                } else {

                                    v.$('input').prop('checked', false);
                                    this.publishers.remove(this.publishers.get(v.model.id));
                                }
                            });
                        }
                        break;

                    case "htmlEditor":

                        if (!this.getRegion('editor').hasView()) this.showChildView('editor', new HtmlEditor());

                        break;

                    case "decoration":

                        if (!this.getRegion('decoration').hasView()) this.showChildView('decoration', new decorationView({ model: this.model }));

                        break;

                }
            } else if (s > p.length) {

                if (this.publishers.length) this.model.set("publishers", this.publishers.pluck("id"));

                this.getDecoration();

                var win = $('main');

                this.model.set({
                    top: win.height() / 2 - this.model.get('height') / 2 + win.scrollTop(),
                    left: win.width() / 2 - this.model.get('width') / 2 + win.scrollLeft()
                });

                this.model.collection.create(this.model, { wait: true });

                this.getRegion('reqArea').empty();
                this.getRegion('subscrArea').empty();

                this.triggerMethod("close:left", this.model);
            }
        },

        getDecoration: function getDecoration() {

            var output = this.model.get('Decoration') || {},
                w = parseInt(this.$('input[name="width"]').val()),
                h = parseInt(this.$('input[name="height"]').val());

            this.model.set({
                width: isNaN(w) ? this.model.get('width') : w < MIN_SIZE ? MIN_SIZE : w,
                height: isNaN(h) ? this.model.get('height') : h < MIN_SIZE ? MIN_SIZE : h
            });
        }

    });
});
'use strict';

define('widget:map:legendView', [], function () {

    return Mn.View.extend({

        template: '#widget-map-legend-template',

        ui: {
            container: '.LegendContainer'
        },

        onRender: function onRender() {

            if (!this.model.get('LegendIsVisible')) this.$el.hide();

            this.setPosition();
        },

        modelEvents: {

            change: function change() {
                this.render();
            }
        },

        setPosition: function setPosition() {

            var p = this.model.get('LegendPosition') || 'top-right',
                _p = p.split("-"),
                b = _p[1],
                css = {};

            css[_p[0]] = "1px";
            css[b] = b === "top" ? 36 + "px" : "1px";

            this.ui.container.fadeTo("hide", .8).css(css);
        }
    });
});
'use strict';

define('widget.reportView', ['i18n!nls/resources.min', 'PDFJS'], function (Resources) {

    return Mn.View.extend({

        template: false,

        modelEvents: {

            change: function change() {
                this.$el.empty();
                this.renderPage(this.pdf);
            }

        },

        onRender: function onRender() {

            if (!this.options.url) this.$el.html('<p>' + Resources.setreport + '</p>');
        },

        onAttach: function onAttach() {

            if (this.options.url) require(["/js/dist/pdf/display/api.js", "/js/dist/pdf/display/metadata.js", "/js/dist/pdf/display/canvas.js", "/js/dist/pdf/display/webgl.js", "/js/dist/pdf/display/pattern_helper.js", "/js/dist/pdf/display/font_loader.js", "/js/dist/pdf/display/annotation_helper.js"], function () {

                PDFJS.workerSrc = '/js/dist/pdf/worker_loader.js';

                PDFJS.getDocument(this.options.url).then(function (pdf) {
                    this.pdf = pdf;
                    this.renderPage(pdf);
                }.bind(this));
            }.bind(this));
        },

        renderPage: function renderPage(pdf) {

            var viewer = this.$el.get(0),
                width = this.$el.width() - 40;

            function renderPage(div, pdf, pageNumber, callback) {

                pdf.getPage(pageNumber).then(function (page) {

                    var scale = 1.0;
                    var viewport = page.getViewport(scale);

                    viewport = page.getViewport(width / viewport.width);

                    var pageDisplayWidth = viewport.width;
                    var pageDisplayHeight = viewport.height;

                    var pageDivHolder = document.createElement('div');
                    pageDivHolder.className = 'pdfpage';
                    pageDivHolder.style.width = pageDisplayWidth + 5 + 'px';
                    pageDivHolder.style.height = pageDisplayHeight + 5 + 'px';
                    div.appendChild(pageDivHolder);

                    // Prepare canvas using PDF page dimensions
                    var canvas = document.createElement('canvas');
                    var context = canvas.getContext('2d');
                    canvas.width = pageDisplayWidth;
                    canvas.height = pageDisplayHeight;
                    pageDivHolder.appendChild(canvas);

                    // Render PDF page into canvas context
                    var renderContext = {
                        canvasContext: context,
                        viewport: viewport
                    };
                    page.render(renderContext).promise.then(callback);
                });
            }

            var pageNumber = 1;
            renderPage(viewer, pdf, pageNumber++, function pageRenderingComplete() {
                if (pageNumber > pdf.numPages) return; // All pages rendered 
                renderPage(viewer, pdf, pageNumber++, pageRenderingComplete);
            });
        },

        fitSize: function fitSize() {}
    });
});
'use strict';

define('widget.semnet.semnetView', [], function () {

    var ZOOM_MIN = 0.125,
        ZOOM_MAX = 6;

    var semnetModel = Backbone.Model.extend({

        defaults: {
            astree: 0,
            eparam: [0, 0, 0],
            filter: null,
            filterName: null,
            filterValue: null,
            height: 0,
            html: '',
            level: 0,
            snid: -1,
            title: '',
            width: 0
        }

    });

    return Mn.View.extend({

        template: _.template('<svg><g class="wrap"></g></svg>'),

        events: {

            'mouseover g.node[data-objectid]': function mouseoverGNodeDataObjectid(e) {

                var $e = $(e.currentTarget),
                    id = parseInt($e.attr('data-objectid'));

                if (!isNaN(id) && id) $e.css('cursor', 'pointer');
            },

            'mouseout g.node[data-objectid]': function mouseoutGNodeDataObjectid(e) {
                $(e.currentTarget).css('cursor', 'default');
            },

            'click g.node[data-objectid]': function clickGNodeDataObjectid(e) {

                var $e = $(e.currentTarget),
                    id = parseInt($e.attr('data-objectid'));

                if (!isNaN(id) && id) this.trigger('subscribers:reflect', new Backbone.Model({ 'object_id': id, requestID: this.options.RID }));
            }
        },

        initialize: function initialize() {

            this.model = new semnetModel();
            this.model.url = '/api/SemNet/' + this.options.objectID + '/?semnetid=-1&layout=' + this.options.widget.get('SNLayout') + '&level=' + this.options.widget.get('SNLevel') + '&astree=' + this.options.widget.get('SNStruct');

            this.listenTo(this.options.widget, 'change:width', function (m) {
                this._fitSize(m);
            });

            this.listenTo(this.options.widget, 'change:height', function (m) {
                this._fitSize(m);
            });
        },

        onRender: function onRender() {

            if (!this.options.RID) console.error('!Not requestID!');

            $.ajaxSettings.headers.key = $.mergeUrlParam($.ajaxSettings.headers.key, { RID: this.options.RID });

            this.model.fetch();
        },

        modelEvents: {

            'change:html': function changeHtml(m, v) {

                var width = this.options.container.width(),
                    height = this.options.container.height();

                this.$('g.wrap').html($(v).html());

                var svg = d3.select(this.$('svg').get(0)),
                    g = svg.select('g.wrap'),
                    zoom = d3.zoom().scaleExtent([ZOOM_MIN, ZOOM_MAX]).on("zoom", function () {
                    g.attr("transform", d3.event.transform);
                }).on("end", function () {
                    //this._setCenter(d3.event.transform);
                }.bind(this)),
                    dx = this.model.get('width'),
                    dy = this.model.get('height'),
                    x = dx / 2,
                    y = dy / 2,
                    scale = Math.max(ZOOM_MIN, Math.min(ZOOM_MAX, 0.9 / Math.max(dx / width, dy / height))),
                    translate = [width / 2 - scale * x, height / 2 - scale * y];

                svg.attr('width', width).attr('height', height).call(zoom).transition().duration(750).call(zoom.transform, d3.zoomIdentity.translate(translate[0], translate[1]).scale(scale));
            },

            request: function request() {
                Backbone.Radio.channel('loader').trigger('show', this.$el, { speed: 'fast' });
            },

            sync: function sync() {
                Backbone.Radio.channel('loader').trigger('hide');
            },

            error: function error() {
                Backbone.Radio.channel('loader').trigger('hide');
            }
        },

        _fitSize: function _fitSize(m) {

            //this.render();
        },

        _setCenter: function _setCenter(x, y, d) {

            // для сохранения позиции и масштаба

            var model = {
                name: this.options.widget.get('title'),
                type: this.options.widget.get('typeName'),
                uid: this.options.widget.id,
                Visualization: this.options.widget.get('Visualization')
            };

            var m = new Backbone.Model({
                widget: model,
                objectID: this.model.id,
                SNX: x,
                SNY: y,
                SNZoom: d
            });

            m.url = "/api/widget/" + this.options.widget.id + "/setstate";
            m.save();
        }

    });
});
'use strict';

define('chartsRepository', ['i18n!nls/resources.min'], function (Resources) {

           return [{ id: 1, name: Resources.gn1, type: "column", family: 'Syncfusion_G' }, { id: 3, name: Resources.gn2, type: "bar", family: 'Syncfusion_G' }, { id: 5, name: Resources.gn3, type: "stackingcolumn", family: 'Syncfusion_G' }, { id: 7, name: Resources.gn6, type: "line", family: 'Syncfusion_G' }, { id: 16, name: Resources.gn7, type: 'stackingcolumn100', family: 'Syncfusion_G' }, { id: 11, name: Resources.gn8, type: 'area', family: 'Syncfusion_G' }, { id: 15, name: Resources.gn9, type: 'stackingarea100', family: 'Syncfusion_G' }, { id: 6, name: Resources.gn5, type: "pie", family: 'Syncfusion_P' }, { id: 22, name: Resources.gn4, type: 'bubble', family: 'Syncfusion_W' }, { id: 4, name: Resources.gn10, type: "bar_d3", family: 'C3' }, { id: 9, name: Resources.gn11, type: 'area_d3', family: 'C3' }];
});
'use strict';

define('settings.visualisation.chart.choice', ['i18n!nls/resources.min', 'sendModel', 'ejChartView', 'chartsRepository'], function (Resources, sendModel, ejChartView, repository) {

    var listView = Mn.CollectionView.extend({

        className: 'graph-panel-grid',

        childView: ejChartView,

        childViewOptions: function childViewOptions(m) {
            m.set({ width: '300', height: '300' });
        },

        childViewEvents: {

            'chart:selected': function chartSelected(v) {

                this.children.each(function (c) {
                    c.$el.removeClass('selected');
                });

                v.$el.addClass('selected');

                this.trigger('chart:selected', v);
            }
        }

    });

    return Mn.View.extend({

        className: 'graph-panel show',

        template: '#choice-chart-template',

        templateContext: {
            Resources: Resources
        },

        regions: {
            wrap: { el: 'div.graph-panel-grid', replaceElement: true }
        },

        onRender: function onRender() {

            var pa = this.model.get('requestParameters');

            this.sendModel = new sendModel({
                id: pa.rid,
                pars: pa.parameters,
                useDefParams: pa.useDefParams,
                widget: {
                    uid: this.model.id,
                    name: this.model.get('title'),
                    type: this.model.get('typeName'),
                    Visualization: this.model.get('Visualization')
                }
            });

            if (this.options.ruleCode) this.sendModel.set('ruleCode', this.options.ruleCode);

            Backbone.Radio.channel('loader').trigger('show', this.$el);

            this.sendModel.fetch({
                success: this._successLoad.bind(this)
            });
        },

        _successLoad: function _successLoad(m) {

            var data = m.get('data').variations,
                charts = new Backbone.Collection();

            _.each(data, function (o) {

                var family = o.family;

                _.chain(repository).filter(function (a) {
                    return a.family === family;
                }).each(function (b) {

                    charts.add(new Backbone.Model(_.extend(b, o)));
                });
            }, this);

            this.showChildView('wrap', new listView({ collection: charts }));

            Backbone.Radio.channel('loader').trigger('hide');
        },

        childViewEvents: {

            'chart:selected': function chartSelected(v) {

                var rp = this.model.get('requestParameters');
                rp.ruleCode = v.model.get('ruleCode');

                this.model.set({ Visualization: v.model.get('type') });

                this.trigger('chart:selected', v);
            }
        }

    });
});
'use strict';

define('settings.visualization.chart', ['i18n!nls/resources.min', 'global.view.dropDown', 'global.charts.settingsmodel', 'global.behaviors.input', 'settings.colorRow', 'settings.visualisation.chart.choice', 'radio.characteristic', 'RU'], function (Resources, dropDown, subSettings, inputBehavior, colorRow, visualView) {

    var items = [{ id: 1, name: Resources.gn1, title: "column" }, { id: 3, name: Resources.gn2, title: "bar" }, { id: 5, name: Resources.gn3, title: "stackingcolumn" }, { id: 22, name: Resources.gn4, title: 'bubble' }, { id: 6, name: Resources.gn5, title: "pie" }, { id: 7, name: Resources.gn6, title: "line" }, { id: 16, name: Resources.gn7, title: 'stackingcolumn100' }, { id: 11, name: Resources.gn8, title: 'area' }, { id: 15, name: Resources.gn9, title: 'stackingarea100' }, { id: 4, name: Resources.gn10, title: "bar_d3" }, { id: 9, name: Resources.gn11, title: 'area_d3'
        //{ id: 0, name: Resources.tc, title: "tagCloud" },
        //{ id: 2, name: Resources.bar2, title: "bar3D" },
        //{ id: 8, name: Resources.area + " (" + Resources.detail + ")", title: 'spline' },
        //{ id: 10, name: 'stepline', title: 'stepline' },
        //{ id: 12, name: 'steparea', title: 'steparea' },
        //{ id: 13, name: 'splinearea', title: 'splinearea' },
        //{ id: 14, name: 'stackingarea', title: 'stackingarea' },          
        //{ id: 17, name: 'stackingbar', title: 'stackingbar' },
        //{ id: 18, name: 'doughnut', title: 'doughnut' },
        //{ id: 20, name: 'pyramid', title: 'pyramid' },
        //{ id: 21, name: 'funnel', title: 'funnel' },
        //{ id: 23, name: 'column3D', title: 'column3D' },
        //{ id: 24, name: 'stackingcolumn3D', title: 'stackingcolumn3D' },
        //{ id: 25, name: 'stackingcolumn1003D', title: 'stackingcolumn1003D' },
        //{ id: 26, name: 'stackingbar3D', title: 'stackingbar3D' },
        //{ id: 27, name: 'stackingbar1003D', title: 'stackingbar1003D' },
        //{ id: 28, name: 'pie3D', title: 'pie3D' },
        //{ id: 29, name: 'doughnut3D', title: 'doughnut3D' }
    }];

    //var listView = Mn.CollectionView.extend({

    //    tagName: 'ul',

    //    childView: Mn.View.extend({

    //        tagName: 'li',

    //        template: _.template('<input data-id="<%- title %>"  id="<%- prefix + "_" + title %>" name="<%- prefix + "_chartView" %>" class="g-form--radio gallery <%- title %>" type="radio" /><label for="<%- prefix + "_" + title %>" title="<%- name %>"></label>'),

    //        triggers: {
    //            'click label': {
    //                event: 'choose:type:chart',
    //                preventDefault: false
    //            }
    //        },

    //        onRender: function () {
    //            this.$el.addClass('gallery_' + this.model.get('title'));
    //            if (this.model.get('checked'))
    //                this.$('input').attr('checked', 'checked');
    //        }
    //    }),

    //    childViewOptions: function (m) {
    //        m.set({
    //            'checked': m.get('title') === (this.options.Visualization || "bar"),
    //            prefix: this.options.prefix
    //        });
    //    },

    //    onRender: function () {
    //        this.$el.width(this.collection.length * 245);
    //    },

    //    childViewTriggers: {
    //        'choose:type:chart': 'choose:type:chart'
    //    }
    //});

    var formView = Mn.View.extend({

        behaviors: {
            input: inputBehavior
        },

        template: '#visual-settings-template',
        templateContext: {
            Resources: Resources
        },

        ui: {
            colw: '#columnWidth',
            cols: '#columnSpacing',
            psize: '#pieSize'
        },

        regions: {
            legendPosition: { el: '#legendPosition', replaceElement: true },
            axesXlabelAction: { el: '#axesXlabelAction', replaceElement: true }
        },

        events: {

            'change @ui.colw': function changeUiColw() {

                this.ui.colw.next('label').find('span').text(this.ui.colw.val());
            },

            'change @ui.cols': function changeUiCols() {

                this.ui.cols.next('label').find('span').text(this.ui.cols.val());
            },

            'change @ui.psize': function changeUiPsize() {

                this.ui.psize.next('label').find('span').text(this.ui.psize.val());
            }
        },

        onRender: function onRender() {

            this.showChildView('legendPosition', new dropDown({
                collection: new Backbone.Collection([{ id: 'Left', title: Resources.vs33left }, { id: 'Top', title: Resources.vs33top }, { id: 'Right', title: Resources.vs33right }, { id: 'Bottom', title: Resources.vs33bottom }])
            }));

            this.getChildView('legendPosition').setCurrent(this.model.get('legendPosition')).$el.css('display', 'block');

            if (this.model.get('chart') !== 'pie') {
                this.showChildView('axesXlabelAction', new dropDown({
                    collection: new Backbone.Collection([{ id: 'none', title: 'None - ' + Resources.lpa1 }, { id: 'rotate90', title: 'Rotate 90 - ' + Resources.lpa2 }, { id: 'rotate45', title: 'Rotate 45 - ' + Resources.lpa3 }, { id: 'wrap', title: 'Wrap - ' + Resources.lpa4 }, { id: 'wrapByWord', title: 'Wrap by word - ' + Resources.lpa5 }, { id: 'trim', title: 'Trim - ' + Resources.lpa6 }, { id: 'hide', title: 'Hide - ' + Resources.lpa7 }, { id: 'multipleRows', title: 'MultipleRows - ' + Resources.lpa8 }])
                }));

                this.getChildView('axesXlabelAction').setCurrent(this.model.get('primaryXAxislabelIntrsectAction')).$el.css('display', 'block');
            }

            this.$('#' + this.model.get('prefix') + '_legendBorderColor').ejColorPicker({
                locale: Resources.Lang,
                modelType: "palette",
                presetType: "webcolors",
                enableOpacity: false
            });
        },

        modelEvents: {

            'change:chart': function changeChart() {
                this.render();
            }

        }

    });

    return Mn.View.extend({

        template: _.template('<h3 class="link" id="change-face"><%- Resources.ctd %></h3><br/><div class="face-choose" style="display:none;"></div><div class="face-form"><div class="form"></div><h3><%- Resources.vs8 %></h3><div id="color-settings"></div></div>'),
        templateContext: {
            Resources: Resources
        },

        ui: {
            face: '#change-face',
            choose: '.face-choose',
            form: '.face-form'
        },

        regions: {
            //list: '.charts-gallery',
            form: { el: '.form', replaceElement: true },
            color: { el: '#color-settings', replaceElement: true },
            face: '.face-choose'
        },

        events: {

            'click @ui.face': function clickUiFace() {

                if (this.ui.choose.is(":hidden")) {

                    this.ui.face.text(Resources.back);
                    this.ui.form.hide();
                    this.ui.choose.show();

                    if (!this.getRegion('face').hasView()) {
                        this.showChildView('face', new visualView({ model: this.model, ruleCode: 'any' }));
                        this.getChildView('face').$el.removeClass('show').addClass('visualisation');
                    }
                } else {

                    this.ui.face.text(Resources.ctd);
                    this.ui.form.show();
                    this.ui.choose.hide();
                }
            }
        },

        onRender: function onRender() {

            var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: this.model.get('typeName') + ".GhaphSubSettings" });

            var model = new subSettings();
            if (p) model.set(p.WidgetParamValue);

            model.set({
                prefix: this.model.id,
                chart: this.model.get("Visualization")
            });

            this.showChildView('form', new formView({ model: model }));

            this.showChildView('color', new colorRow({ model: this.model, collection: this.collection }));
        },

        onShow: function onShow() {},

        childViewEvents: {

            'chart:selected': function chartSelected(v) {

                var name = v.model.get('type');
                this.model.set("Visualization", name);
                this.getChildView('form').model.set('chart', name);
            }
        },

        onSave: function onSave() {

            var data = $.GetData(this.$el);

            if (this.getChildView('form').getRegion('axesXlabelAction').hasView()) data.primaryXAxislabelIntrsectAction = this.getChildView('form').getChildView('axesXlabelAction').current.id;

            data.legendPosition = this.getChildView('form').getChildView('legendPosition').current.id;

            var ch = Backbone.Radio.channel('chW'),
                p1 = ch.request('get:param:model', this.model.get('Characteristics'), "WidgetGraph.GhaphSubSettings"),
                p2 = ch.request('get:param:model', this.model.get('Characteristics'), 'PaletteByChart');

            p1.set('WidgetParamValue', data);
            p2.set('WidgetParamValue', this.getChildView('color').getChildView('list').collection.toJSON());

            var saveCollection = Backbone.Radio.channel('chW').request('get:params:collection', this.model.id);
            saveCollection.add([p1, p2]);

            saveCollection.fetch({
                success: function (m) {
                    this.model.save({ Characteristics: m.toJSON() });
                }.bind(this)
            });
        }
    });
});
'use strict';

define('settings.visualization.cloud', ['i18n!nls/resources.min', 'settings.colorRow', 'global.view.dropDown', 'global.behaviors.input'], function (Resources, colorRow, dropDown, inputBehavior) {

        var formView = Mn.View.extend({

                behaviors: {
                        input: inputBehavior
                },

                template: '#cloud-form-template',
                templateContext: {
                        Resources: Resources
                },

                regions: {
                        shape: { el: '#cloud-shape', replaceElement: true }
                },

                onBeforeRender: function onBeforeRender() {

                        if (!this.model.has('shapeCloud')) this.model.set('shapeCloud', 'elliptic');
                },

                onRender: function onRender() {

                        this.showChildView('shape', new dropDown({
                                collection: new Backbone.Collection([{ id: 'elliptic', title: Resources.cse }, { id: 'rectangular', title: Resources.csr }])
                        }));

                        this.getChildView('shape').setCurrent(this.model.get('shapeCloud')).$el.css('display', 'block');
                }

        });

        return Mn.View.extend({

                template: '#cloud-settings-template',

                regions: {
                        color: { el: '#color-rows', replaceElement: true },
                        form: { el: '#form-settings', replaceElement: true }
                },

                onRender: function onRender() {

                        var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: "WidgetCloud.SubSettings" }) || {},
                            m = new Backbone.Model({
                                minFontSizeCloud: 10,
                                maxFontSizeCloud: null,
                                shapeCloud: 'elliptic'
                        });

                        if (p) m.set(p.WidgetParamValue);

                        this.showChildView('form', new formView({ model: m }));

                        this.showChildView('color', new colorRow({ model: this.model, collection: this.collection }));
                },

                collectionEvents: {

                        reset: function reset() {
                                this.onReset();
                        }

                },

                onSave: function onSave() {

                        var ch = Backbone.Radio.channel('chW'),
                            p1 = ch.request('get:param:model', this.model.get('Characteristics'), "WidgetCloud.SubSettings"),
                            p2 = ch.request('get:param:model', this.model.get('Characteristics'), 'PaletteByChart');

                        var formData = $.GetData(this.getChildView('form').$el);
                        formData.shapeCloud = this.getChildView('form').getChildView('shape').current.id;

                        p1.set('WidgetParamValue', formData);
                        p2.set('WidgetParamValue', this.getChildView('color').getChildView('list').collection.toJSON());

                        var saveCollection = Backbone.Radio.channel('chW').request('get:params:collection', this.model.id);
                        saveCollection.add([p1, p2]);

                        saveCollection.fetch({
                                success: function (m) {
                                        this.model.save({ Characteristics: m.toJSON() });
                                }.bind(this)
                        });
                },

                onReset: function onReset() {

                        var p = _.findWhere(this.model.get('Characteristics'), { WidgetParamName: 'PaletteByChart' });

                        if (p) _.each(p.WidgetParamValue, function (o) {
                                var e = this.collection.findWhere({ object_id: o.object_id });
                                if (e) e.set('color', o.color);
                        }, this);
                }

        });
});
'use strict';

define('settings.visualisation.table.column', ['i18n!nls/resources.min'], function (Resources) {

        var columnsCollection = Backbone.Collection.extend({
                model: Backbone.Model.extend({
                        idAttribute: "ColumnSystemName",
                        defaults: {
                                QueryCustomizationUID: null,
                                QueryID: 0,
                                ColumnSystemName: null,
                                ColumnTitle: "",
                                ColumnWidth: null,
                                ColumnIsVisible: true,
                                SerialNum: ''
                        }
                })
        });

        return Mn.CollectionView.extend({

                className: 'list-area',

                events: {

                        'click': function click(e) {
                                e.stopPropagation();
                        }
                },

                childView: Mn.View.extend({

                        className: 'row',
                        template: '#column-settings-template',
                        templateContext: {
                                Resources: Resources
                        },

                        onRender: function onRender() {
                                this.$el.attr('id', this.model.id);
                        }

                }),

                childViewOptions: function childViewOptions(m) {

                        m.set({
                                QueryID: this.model.get("requestParameters").rid,
                                prefix: this.model.id
                        });
                },

                initialize: function initialize(o) {

                        this.collection = new columnsCollection();
                        this.collection.comparator = "SerialNum";
                },

                onBeforeRender: function onBeforeRender() {

                        var items = this.model.has('feed') ? this.model.get('feed').head : [],
                            rid = this.model.get("requestParameters") ? this.model.get("requestParameters").rid : null,
                            custom = this.model.get("ColumnCustomizations");

                        var columns = _.map(items, function (e, i) {

                                var ci = {};
                                if (custom) {
                                        ci = _.findWhere(custom, { ColumnSystemName: e.systemName }) || {};
                                }

                                return new this.collection.model({
                                        QueryCustomizationUID: ci.QueryCustomizationUID || null,
                                        QueryID: rid,
                                        ColumnSystemName: e.systemName,
                                        ColumnTitle: ci.ColumnTitle || e.displayName,
                                        ColumnIsVisible: ci.ColumnIsVisible === undefined ? e.isVisible : ci.ColumnIsVisible,
                                        SerialNum: ci.SerialNum || i,
                                        ColumnWidth: ci.ColumnWidth || ''
                                });
                        }, this);

                        this.collection.set(columns);
                },

                onAddChild: function onAddChild() {

                        this.$el.sortable({
                                items: '.row',
                                axis: "y",
                                stop: function (e, ui) {

                                        this.$(".row").each(function (i, e) {

                                                var $e = $(e),
                                                    m = this.collection.get($e.attr('id'));

                                                m.set("SerialNum", $e.index());
                                                $e.find('input[name=SerialNum]').val($e.index());
                                        }.bind(this));
                                }.bind(this)

                        });
                },

                onSave: function onSave(callback) {

                        var data = [];
                        this.$('.row').each(function () {
                                data.push($.GetData($(this)));
                        });

                        $.ajax({

                                method: "POST",
                                contentType: 'application/json; charset=utf-8',
                                url: "/api/widget/" + this.model.get("requestParameters").rid + "/colscustomization",
                                data: JSON.stringify(data)

                        }).done(function (c) {

                                callback.call(this, c);
                        }.bind(this));
                },

                onReset: function onReset(callback) {

                        this.collection.reset();

                        $.get("/api/widget/" + this.model.get("requestParameters").rid + "/colscustomization/flush").done(function (c) {

                                callback.call(this);
                        }.bind(this));
                }

        });
});
'use strict';

define('settings.visualisation.table.fields', [], function () {

        return Mn.View.extend({

                template: _.template('<img  class = "card-example" src = "" />'),
                //if(card) {src = '../../Images/vertical_card.png'}
                //if(card2) {src = '../../Images/horizontal_card.png'}

                onRender: function onRender() {

                        this.$el.addClass('container-example');

                        if (this.model.get('Visualization') === 'card') this.$('img').attr('src', '../../Images/vertical_card.png');else this.$('img').attr('src', '../../Images/horizontal_card.png');
                },

                onSave: function onSave(callback) {

                        callback.call(this);
                }
        });
});
'use strict';

define('settings.visualization.table', ['i18n!nls/resources.min', 'settings.visualisation.table.column', 'settings.visualisation.table.fields', 'global.behaviors.input'], function (Resources, columnsOrg, fieldOrg, input) {

            var content = {
                        table: columnsOrg,
                        card: fieldOrg,
                        card2: fieldOrg
            };

            return Mn.View.extend({

                        behaviors: [input],

                        template: '#table-visualisation-template',
                        templateContext: function templateContext() {
                                    return {
                                                Resources: Resources,
                                                prefix: this.model.id
                                    };
                        },

                        regions: {
                                    content: { el: '#content', replaceElement: true }
                        },

                        events: {

                                    'click input': function clickInput(m, v) {

                                                var name = this.$('input[name="Visualization"]:checked').attr('id').split('_')[1];

                                                this.model.set('Visualization', name);

                                                this.getRegion('content').show(new content[name]({ model: this.model }));
                                    }

                        },

                        onShow: function onShow() {

                                    var name = this.model.get('Visualization') || 'table';
                                    this.$('#' + this.model.id + '_' + name).prop('checked', true);

                                    this.getRegion('content').show(new content[name]({ model: this.model }));
                        },

                        onSave: function onSave() {

                                    this.getChildView('content').onSave(function (c) {

                                                this.model.save({ ColumnCustomizations: c });
                                    });
                        },

                        onReset: function onReset() {

                                    this.getChildView('content').onReset(function () {

                                                this.model.set("ColumnCustomizations", null);
                                    });
                        },

                        modelEvents: {

                                    'change:feed': function changeFeed(m, feed) {

                                                var name = this.model.get('Visualization') || 'table';
                                                this.getRegion('content').show(new content[name]({ model: this.model }));
                                    }
                        }

            });
});
'use strict';

define('settings.visualization.semnet', ['i18n!nls/resources.min', 'global.view.dropDown'], function (Resources, DropDownView) {

    return Mn.View.extend({

        template: '#semnet-settings-template',
        templateContext: {
            Resources: Resources
        },

        regions: {
            ddlevel: '#level',
            ddtree: '#astree',
            ddlayout: '#layout'
        },

        onRender: function onRender() {

            this.showChildView('ddlayout', new DropDownView({
                collection: new Backbone.Collection([{ title: Resources.snl1, id: 0 }, { title: Resources.snl2, id: 1 }, { title: Resources.snl3, id: 2 }, { title: Resources.snl4, id: 3 }, { title: Resources.snl5, id: 4 }, { title: Resources.snl6, id: 5 }, { title: Resources.snl7, id: 6 }]),
                current: this.model.get('layout'), name: 'layout'
            }));

            this.showChildView('ddtree', new DropDownView({
                collection: new Backbone.Collection([{ title: Resources.ss1, id: 0 }, { title: Resources.ss2, id: 1 }, { title: Resources.ss3, id: 2 }]),
                current: this.model.get('astree'), name: 'astree'
            }));

            this.showChildView('ddlevel', new DropDownView({
                collection: new Backbone.Collection([{ title: 'level 1', id: 1 }, { title: 'level 2', id: 2 }, { title: 'level 3', id: 3 }]),
                current: this.model.get('level'), name: 'level'
            }));

            if (this.model.has('SNLevel')) this.getChildView('ddlevel').setCurrent(this.model.get('SNLevel'));

            if (this.model.has('SNLayout')) this.getChildView('ddlayout').setCurrent(this.model.get('SNLayout'));

            if (this.model.has('SNStruct')) this.getChildView('ddtree').setCurrent(this.model.get('SNStruct'));
        },

        onSave: function onSave() {

            this.model.set($.GetData(this.$el));

            this.model.save({
                SNLevel: this.getChildView('ddlevel').current.id,
                SNLayout: this.getChildView('ddlayout').current.id,
                SNStruct: this.getChildView('ddtree').current.id
            });
        },

        onReset: function onReset() {}

    });
});
'use strict';

define('widgetTableCard', ['i18n!nls/resources.min'], function (Resources) {

    var list = Mn.CollectionView.extend({

        className: 'card-newsblock',

        childView: Mn.View.extend({

            tagName: 'article',

            className: 'card-vertical',

            ///*getTemplate: function () {*/
            //    return '#card-vertical-view-template';
            //},
            getTemplate: function getTemplate() {
                if (this.options.vis === 'card2') {
                    return '#card-horizontal-view-template';
                }

                return '#card-vertical-view-template';
            },

            templateContext: {
                Resources: Resources
            },

            events: {

                'click a': function clickA(e) {
                    e.stopPropagation();
                }

            },

            triggers: {
                'touchstart': 'table:row:handler',
                'click': 'table:row:handler'
            },

            onBeforeRender: function onBeforeRender() {

                if (this.options.vis === 'card2') this.$el.removeClass('card-vertical').addClass('card-horizontal');

                var item = this.model.toJSON(),
                    pdate = Date.parse(item.дата_публикации) ? new Date(item.дата_публикации).toLocaleString(Resources.Lang) : '';

                this.model.set({
                    display_name: this.model.get('display_name') || '',
                    image: item.image || '',
                    url: item.url_источника || '',
                    pdate: pdate,
                    annotation: item.аннотация,
                    massmedia: item.massmedia,
                    rubrics: ''
                });

                if (this.model.has('links')) {

                    var a = _.groupBy(this.model.get('links'), 'rel');

                    if (_.has(a, 'rubric_id')) {
                        var vs = _.pluck(a.rubric_id, 'value');
                        this.model.set('rubrics', vs.join(' | '));
                    }

                    if (_.has(a, 'url_источника')) {
                        var href = a.url_источника[0].href;
                        this.model.set({ url: href, massmedia: this.model.get('massmedia') ? this.model.get('massmedia') : href });
                    }
                }
            }
        }),

        onBeforeRender: function onBeforeRender() {
            if (this.options.vis === 'card2') this.$el.addClass('horizontal');
        },

        childViewOptions: function childViewOptions() {
            return {
                vis: this.options.vis
            };
        },

        childViewTriggers: {
            'table:row:handler': 'table:row:handler'
        }

    });

    return Mn.View.extend({

        template: _.template('<div></div>'),
        templateContext: {
            Resources: Resources
        },

        regions: {
            list: { el: 'div', replaceElement: true }
        },

        onRender: function onRender() {

            this.showChildView('list', new list({ collection: this.collection, vis: this.model.get('Visualization') }));
        },

        onChildviewTableRowHandler: function onChildviewTableRowHandler(v) {

            this.model.trigger('click:item', v.model);
        }

    });
});
'use strict';

define('widget.table.filter', ['i18n!nls/resources.min'], function (Resources) {

        var listRubrics = Mn.CollectionView.extend({

                emptyView: Mn.View.extend({
                        template: _.template('<p><%- Resources.norubric %></p>'),
                        templateContext: { Resources: Resources }
                }),

                childView: Mn.View.extend({

                        tagName: 'span',
                        className: 'g-form--input',

                        template: _.template('<input class="g-form--checkbox" type="checkbox" checked id="<%- value %>" name="<%- value %>" /><label for="<%- value %>"><%- value %></label>'),

                        ui: {
                                chbx: 'input'
                        },

                        triggers: {
                                'click': {
                                        event: 'click:item',
                                        preventDefault: false,
                                        stopPropagation: false
                                }
                        }
                }),

                childViewTriggers: {
                        'click:item': 'filter:apply'
                }
        });

        return Mn.View.extend({

                className: 'filter-panel anbr-tabs',

                template: templates['filter-panel'],
                templateContext: { Resources: Resources },

                ui: {
                        input: 'input[name="searchInWidget"]',
                        rTab: 'span[data-name="rubrics-panel"]',
                        sTab: 'span[data-name="search-panel"]',
                        rPan: '#rubrics-panel',
                        sPan: '#search-panel'
                },

                regions: {
                        list: '.list-area'
                },

                initialize: function initialize() {
                        this.collection = new Backbone.Collection();
                },

                onRender: function onRender() {

                        this.showChildView('list', new listRubrics({ collection: this.collection }));
                },

                childViewEvents: {

                        'filter:apply': function filterApply(v) {

                                v.model.set("hide", !v.ui.chbx.prop('checked'));
                        }

                },

                childViewTriggers: {

                        'filter:apply': 'filter:apply'
                },

                events: {

                        "click nav span:not(.right)": function clickNavSpanNotRight(e) {

                                var $p = $(e.target).closest("span");
                                this.$("nav span").removeClass("active");
                                this.$("section").hide();

                                $p.addClass("active");
                                this.$("section#" + $p.attr("data-name")).show();
                        },

                        "click nav span.right": function clickNavSpanRight() {

                                this.$el.slideToggle();
                        },

                        "click button.search": function clickButtonSearch() {

                                var val = this.ui.input.val();
                                if ($.trim(val)) this.triggerMethod("filter:search", val);else this.triggerMethod("filter:apply");
                        },

                        'click button.cancel': function clickButtonCancel() {

                                this.ui.input.val('');

                                this.triggerMethod("filter:apply");

                                this.$el.slideToggle();
                        }
                },

                hideRubrics: function hideRubrics() {

                        this.ui.rTab.hide();
                        this.ui.rPan.hide();
                        this.ui.sTab.addClass('active');
                        this.ui.sPan.show();
                },

                showRubrics: function showRubrics() {

                        this.ui.rTab.addClass('active');
                        this.ui.rPan.show();
                }

        });
});
'use strict';

define('widgetTableGrid', ['i18n!nls/resources.min', 'widget.table.filter'], function (Resources, filterView) {

    var toolsView = Mn.CollectionView.extend({

        className: 'tools',

        events: {

            'mouseleave': function mouseleave() {
                this.$el.hide();
            }
        },

        childView: Mn.View.extend({

            tagName: 'span',
            className: 'btn',

            events: {

                'mouseenter svg': function mouseenterSvg() {
                    this.$el.find(".anbr-tooltip").fadeIn();
                },

                'mouseleave svg': function mouseleaveSvg() {
                    this.$el.find(".anbr-tooltip").fadeOut();
                }
            },

            triggers: {
                'touchstart': 'action',
                'click': 'action'
            },

            onAction: function onAction(e) {

                if (this.model.get('render') === "action") $.ajax({ method: this.model.get('verb'), url: this.model.get('href') }).done(function () {
                    Backbone.trigger("message:success", { title: Resources.alert, message: Resources.success });
                }).fail(function (m) {
                    Backbone.trigger("message:warning", { title: Resources.error, message: m.status });
                });
            },

            getTemplate: function getTemplate() {
                if (this.model.get('render') === 'open') return _.template('<a href="<%- href %>" target="_blank"><span class="anbr-tooltip"><span position="bottom"></span><%- prompt %></span><svg class="svg-icon"><use xlink:href="#<%- id %>" /></svg></a>');else return _.template('<span class="anbr-tooltip"><span position="bottom"></span><%- prompt %></span><svg class="svg-icon"><use xlink:href="#<%- id %>" /></svg>');
            }
        }),

        onRenderChildren: function onRenderChildren() {
            this.$el.width(this.collection.length * 52).delay(100).slideDown();
        }
    });

    var toolsTableView = Mn.View.extend({

        className: 'preblu',
        template: _.template('<div class="arrow"></div><div class="tools"></div>'),

        regions: {
            tools: { el: '.tools', replaceElement: true }
        },

        triggers: {
            'touchstart': 'prepare',
            'click': 'prepare'
        },

        onPrepare: function onPrepare() {

            var data = _.groupBy(this.model.get('links'), 'rel').tools || [];
            this.showChildView('tools', new toolsView({ collection: new Backbone.Collection(data) }));
        },

        show: function show(v) {
            this.model = v.model;
            this.$el.css("top", v.$el.position().top + v.$el.outerHeight() / 2 - 10);
            this.$el.show();
        }
    });

    var rowView = Mn.View.extend({

        tagName: 'tr',

        getTemplate: function getTemplate() {
            return _.template(this.options.templ);
        },
        templateContext: function templateContext() {
            return {
                parse: this.parseType
            };
        },

        events: {

            'click a': function clickA(e) {
                e.stopPropagation();
            },
            'touchstart a': function touchstartA(e) {
                e.stopPropagation();
            }
        },

        triggers: {
            'mouseenter': 'mouse:enter:row',
            'mouseleave': 'mouse:leave:row',

            'touchstart': 'table:row:handler',
            'click': 'table:row:handler'
        },

        onRender: function onRender() {

            if (this.model.has('links')) {

                var a = _.groupBy(this.model.get('links'), 'rel');

                if (_.has(a, 'rubric_id')) {
                    this.$('td[data-column="display_name"]').append('<div class="rubrics"></div>');
                    var vs = _.pluck(a.rubric_id, 'value');
                    this.$('.rubrics').append(vs.join('; '));
                }

                if (_.has(a, 'url_источника')) {
                    _.chain(a['url_источника']).map(function (o) {
                        this.$('td[data-column="display_name"]').append('<a title="' + o.prompt + '" href="' + o.href + '" target="_blank">\n\t\t\t\t\t\t\t\t<span><svg class="link-icon"><use xlink: href="#link-icon" /></svg></span>\n\t\t\t\t\t\t\t</a>');
                    }, this);
                }
            }
        },

        parseType: function parseType(value, s) {
            if (!s) return '';
            var output;
            switch (s) {
                case 0:
                    //целочисленный
                    output = parseInt(value);
                    break;
                case 2:
                    // date-time
                    output = $.parseDate(value);
                    break;
                case 4:
                    // вещественный
                    output = parseFloat(value);
                    break;
                case 7: // image                   
                case 1: // string
                case 3: // dictionary
                case 5: // file name
                case 6: // text              
                case 8: // html
                case 9: // giperlink
                case 10: // data
                case 11: // OLE document
                case 12: // uid
                case 13: // VarBinary
                case 14: // двоичный файл
                case 15: // денежный
                case 16: // bool
                case 17:
                    // geo coordinates
                    output = "<span>" + value + "</span>";
            }

            return output;
        }

    });

    var bodyView = Mn.CollectionView.extend({

        tagName: 'tbody',

        childView: rowView,

        childViewOptions: function childViewOptions() {
            return {
                templ: this.options.templ,
                cols: this.options.cols
            };
        },

        emptyView: Mn.View.extend({
            tagName: 'tr',
            template: _.template('<td colspan="<%- colspan %>"><%- Resources.N %></td>'),
            templateContext: function templateContext() {
                return {
                    Resources: Resources,
                    colspan: this.options.cols
                };
            }
        }),

        onChildviewTableRowHandler: function onChildviewTableRowHandler(v) {

            var currentTr = this.$el.find('tr.current'),
                flag = this.options.isMarkSelectedItem;

            currentTr.removeClass('current').addClass('viewed');

            currentTr.find('td').each(function (i, e) {
                $(e).css({
                    color: flag ? this.options.decoration.ContainerForegroundVisited : this.options.decoration.ContainerForeground,
                    'background-color': flag ? this.options.decoration.ContainerBackgroundVisited : this.options.decoration.ContainerBackground
                });
            }.bind(this));

            v.$el.addClass('current').removeClass("new-post");

            v.$el.find('td').each(function (i, e) {
                $(e).css({
                    color: this.options.decoration.ContainerForegroundActive,
                    'background-color': this.options.decoration.ContainerBackgroundActive
                });
            }.bind(this));
        },

        childViewTriggers: {
            'mouse:enter:row': 'mouse:enter:row',
            'mouse:leave:row': 'mouse:leave:row',
            'table:row:handler': 'table:row:handler'
        }
    });

    var headView = Mn.CollectionView.extend({
        tagName: 'tr',
        childView: Mn.View.extend({
            tagName: 'th',
            template: _.template('<%- displayName %>')
        })
    });

    var tableView = Mn.View.extend({

        tagName: 'table',

        className: 'widget-table',

        template: _.template('<thead></thead><tbody></tbody><tfoot></tfoot>'),

        regions: {
            head: 'thead',
            body: { el: 'tbody', replaceElement: true }
        },

        initialize: function initialize() {

            this.templ = '';

            var columns = this.model.get('ColumnCustomizations');
            if (columns) {

                this.options.head = _.chain(columns).filter(function (e) {
                    return e.ColumnIsVisible;
                }).sortBy(function (e) {
                    return e.SerialNum;
                }).map(function (e) {

                    this.templ += '<td data-column="' + e.ColumnSystemName.toLowerCase() + '"><%= parse(' + e.ColumnSystemName.toLowerCase() + ', propType["' + e.ColumnSystemName.toLowerCase() + '"]) %></td>';

                    return { displayName: e.ColumnTitle };
                }, this).value();
            } else _.each(this.options.head, function (o) {

                this.templ += '<td data-column="' + o.systemName + '"><%= parse(' + o.systemName + ', propType["' + o.systemName + '"]) %></td>';
            }, this);
        },

        onRender: function onRender() {

            this.$el.css({ width: "100%", "table-layout": "auto" });
            this.$el.attr('dir', 'auto');

            //if (this.model.get('ts')) {

            //var items = $.prepare(this.options.feed.get('items'));

            //_.each(feed.data, function (a) {
            //    var id = _.findWhere(a.data, { systemName: "Object_ID" }).value;
            //    if (!_.find(items, function (b) { return id === b.Object_ID; }))
            //        this.feedItems.push(a);
            //}, this);

            //if (this.feedItems.length) {
            //    this.$(".number-update").css("display", "inline-block").text(this.feedItems.length);
            //    this.model.set("Items", this.model.get("Items").concat(this.feedItems));
            //}

            //} else {

            this.showChildView('head', new headView({ collection: new Backbone.Collection(this.options.head) }));

            this.showChildView('body', new bodyView({
                collection: this.collection,
                templ: this.templ,
                cols: this.options.head.length,
                isMarkSelectedItem: this.model.get('isMarkSelectedItem'),
                decoration: this.model.get('Decoration')
            }));

            //}
        },

        onAttach: function onAttach() {

            this.$('tbody').height(this.$el.closest('.anbr_list').height() - this.$('thead').height());
        },

        modelEvents: {

            'change:width': function changeWidth() {
                this.$('tbody').height(this.$el.closest('.anbr_list').height() - this.$('thead').height());
            },

            'change:height': function changeHeight() {
                this.$('tbody').height(this.$el.closest('.anbr_list').height() - this.$('thead').height());
            }

        },

        onChildviewTableRowHandler: function onChildviewTableRowHandler(v) {

            this.model.trigger('click:item', v.model);
        },

        childViewTriggers: {
            'mouse:enter:row': 'mouse:enter:row',
            'mouse:leave:row': 'mouse:leave:row',
            'table:row:handler': 'table:row:handler'
        }

    });

    return Mn.View.extend({

        template: _.template('<div class="filter-panel"></div><span class="number-update"></span><div class="preblu"></div><table></table>'),

        ui: {
            update: '.number-update'
        },

        regions: {
            filter: { el: '.filter-panel', replaceElement: true },
            toolsTable: { el: '.preblu', replaceElement: true },
            table: { el: 'table', replaceElement: true }
        },

        onRender: function onRender() {

            // 21.09.2017 временно скрыто
            //this.showChildView('toolsTable', new toolsTableView);

            this.showChildView('filter', new filterView({ model: this.model }));

            this.showChildView('table', new tableView({
                model: this.model,
                collection: this.collection,
                head: _.filter(this.model.get('feed').head, function (o) {
                    return o.isVisible;
                })
            }));

            var c = [];

            this.collection.each(function (m) {

                var rels = _.groupBy(m.get('links'), "rel");

                _.each(rels.rubric_id, function (a) {
                    c.push(a);
                }, this);
            }, this);

            this.getChildView('filter').collection.add(c);

            if (c.length) this.getChildView('filter').showRubrics();else this.getChildView('filter').hideRubrics();
        },

        onAttach: function onAttach() {

            this.getChildView('table').getChildView('body').$el.on('scroll', function (e) {

                this.triggerMethod('scroll:grid');
            }.bind(this));
        },

        collectionEvents: {

            update: function update(c, a) {

                if (a.add) {

                    var c = [];

                    _.each(a.changes.added, function (m) {

                        var rels = _.groupBy(m.get('links'), "rel");

                        _.each(rels.rubric_id, function (a) {
                            c.push(a);
                        }, this);
                    }, this);

                    this.triggerMethod('table:add:rubrics:filter', c);
                }
            }

        },

        childViewEvents: {

            'mouse:enter:row': function mouseEnterRow(v) {
                //this.getChildView('toolsTable').show(v);
            },

            'mouse:leave:row': function mouseLeaveRow(v) {
                //this.getChildView('toolsTable').hide(v);
            },

            'table:row:handler': function tableRowHandler(v) {

                //this.triggerMethod( 'check:child', this.model, v.model );

            },

            'filter:search': function filterSearch(text) {

                this.$("tbody>tr>td[data-column='display_name'] .Mark").removeClass("Mark");

                var s = new RegExp(text, "ig");

                this.$("tbody>tr").each(function (i, e) {

                    var $a = $(e).find("td[data-column='display_name']"),
                        check = $a.html(),
                        searchIndex = check.search(s);

                    if (searchIndex === -1) $(e).hide();else {

                        var p = '<i class="Mark">' + check.match(s)[0] + '</i>',
                            start = check.substring(0, searchIndex),
                            end = check.substring(searchIndex + text.length),
                            out = start + p + end;

                        $a.html(out);
                        $(e).show();
                    }
                });
            },

            'filter:apply': function filterApply() {

                this.getChildView('table').getChildView('body').children.each(function (v) {

                    v.$el.show();

                    var a = _.groupBy(v.model.get('links'), 'rel');

                    var rubs = a.rubric_id;
                    if (rubs) {

                        _.each(rubs, function (r) {

                            var ex = this.getChildView('filter').collection.get(r.id);
                            if (ex.get('hide')) v.$el.hide();
                        }, this);
                    }
                }, this);

                this.$("tbody>tr>td[data-column='display_name'] .Mark").removeClass("Mark");
            }
        }
    });
});
"use strict";

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
* jQuery Form Plugin; v20130523
* http://jquery.malsup.com/form/
* Copyright (c) 2013 M. Alsup; Dual licensed: MIT/GPL
* https://github.com/malsup/form#copyright-and-license
*/
;(function (e) {
  "use strict";
  function t(t) {
    var r = t.data;t.isDefaultPrevented() || (t.preventDefault(), e(this).ajaxSubmit(r));
  }function r(t) {
    var r = t.target,
        a = e(r);if (!a.is("[type=submit],[type=image]")) {
      var n = a.closest("[type=submit]");if (0 === n.length) return;r = n[0];
    }var i = this;if (i.clk = r, "image" == r.type) if (void 0 !== t.offsetX) i.clk_x = t.offsetX, i.clk_y = t.offsetY;else if ("function" == typeof e.fn.offset) {
      var o = a.offset();i.clk_x = t.pageX - o.left, i.clk_y = t.pageY - o.top;
    } else i.clk_x = t.pageX - r.offsetLeft, i.clk_y = t.pageY - r.offsetTop;setTimeout(function () {
      i.clk = i.clk_x = i.clk_y = null;
    }, 100);
  }function a() {
    if (e.fn.ajaxSubmit.debug) {
      var t = "[jquery.form] " + Array.prototype.join.call(arguments, "");window.console && window.console.log ? window.console.log(t) : window.opera && window.opera.postError && window.opera.postError(t);
    }
  }var n = {};n.fileapi = void 0 !== e("<input type='file'/>").get(0).files, n.formdata = void 0 !== window.FormData;var i = !!e.fn.prop;e.fn.attr2 = function () {
    if (!i) return this.attr.apply(this, arguments);var e = this.prop.apply(this, arguments);return e && e.jquery || "string" == typeof e ? e : this.attr.apply(this, arguments);
  }, e.fn.ajaxSubmit = function (t) {
    function r(r) {
      var a,
          n,
          i = e.param(r, t.traditional).split("&"),
          o = i.length,
          s = [];for (a = 0; o > a; a++) {
        i[a] = i[a].replace(/\+/g, " "), n = i[a].split("="), s.push([decodeURIComponent(n[0]), decodeURIComponent(n[1])]);
      }return s;
    }function o(a) {
      for (var n = new FormData(), i = 0; a.length > i; i++) {
        n.append(a[i].name, a[i].value);
      }if (t.extraData) {
        var o = r(t.extraData);for (i = 0; o.length > i; i++) {
          o[i] && n.append(o[i][0], o[i][1]);
        }
      }t.data = null;var s = e.extend(!0, {}, e.ajaxSettings, t, { contentType: !1, processData: !1, cache: !1, type: u || "POST" });t.uploadProgress && (s.xhr = function () {
        var e = jQuery.ajaxSettings.xhr();return e.upload && e.upload.addEventListener("progress", function (e) {
          var r = 0,
              a = e.loaded || e.position,
              n = e.total;e.lengthComputable && (r = Math.ceil(100 * (a / n))), t.uploadProgress(e, a, n, r);
        }, !1), e;
      }), s.data = null;var l = s.beforeSend;return s.beforeSend = function (e, t) {
        t.data = n, l && l.call(this, e, t);
      }, e.ajax(s);
    }function s(r) {
      function n(e) {
        var t = null;try {
          e.contentWindow && (t = e.contentWindow.document);
        } catch (r) {
          a("cannot get iframe.contentWindow document: " + r);
        }if (t) return t;try {
          t = e.contentDocument ? e.contentDocument : e.document;
        } catch (r) {
          a("cannot get iframe.contentDocument: " + r), t = e.document;
        }return t;
      }function o() {
        function t() {
          try {
            var e = n(g).readyState;a("state = " + e), e && "uninitialized" == e.toLowerCase() && setTimeout(t, 50);
          } catch (r) {
            a("Server abort: ", r, " (", r.name, ")"), s(D), j && clearTimeout(j), j = void 0;
          }
        }var r = f.attr2("target"),
            i = f.attr2("action");w.setAttribute("target", d), u || w.setAttribute("method", "POST"), i != m.url && w.setAttribute("action", m.url), m.skipEncodingOverride || u && !/post/i.test(u) || f.attr({ encoding: "multipart/form-data", enctype: "multipart/form-data" }), m.timeout && (j = setTimeout(function () {
          T = !0, s(k);
        }, m.timeout));var o = [];try {
          if (m.extraData) for (var l in m.extraData) {
            m.extraData.hasOwnProperty(l) && (e.isPlainObject(m.extraData[l]) && m.extraData[l].hasOwnProperty("name") && m.extraData[l].hasOwnProperty("value") ? o.push(e('<input type="hidden" name="' + m.extraData[l].name + '">').val(m.extraData[l].value).appendTo(w)[0]) : o.push(e('<input type="hidden" name="' + l + '">').val(m.extraData[l]).appendTo(w)[0]));
          }m.iframeTarget || (v.appendTo("body"), g.attachEvent ? g.attachEvent("onload", s) : g.addEventListener("load", s, !1)), setTimeout(t, 15);try {
            w.submit();
          } catch (c) {
            var p = document.createElement("form").submit;p.apply(w);
          }
        } finally {
          w.setAttribute("action", i), r ? w.setAttribute("target", r) : f.removeAttr("target"), e(o).remove();
        }
      }function s(t) {
        if (!x.aborted && !F) {
          if (M = n(g), M || (a("cannot access response document"), t = D), t === k && x) return x.abort("timeout"), S.reject(x, "timeout"), void 0;if (t == D && x) return x.abort("server abort"), S.reject(x, "error", "server abort"), void 0;if (M && M.location.href != m.iframeSrc || T) {
            g.detachEvent ? g.detachEvent("onload", s) : g.removeEventListener("load", s, !1);var r,
                i = "success";try {
              if (T) throw "timeout";var o = "xml" == m.dataType || M.XMLDocument || e.isXMLDoc(M);if (a("isXml=" + o), !o && window.opera && (null === M.body || !M.body.innerHTML) && --O) return a("requeing onLoad callback, DOM not available"), setTimeout(s, 250), void 0;var u = M.body ? M.body : M.documentElement;x.responseText = u ? u.innerHTML : null, x.responseXML = M.XMLDocument ? M.XMLDocument : M, o && (m.dataType = "xml"), x.getResponseHeader = function (e) {
                var t = { "content-type": m.dataType };return t[e];
              }, u && (x.status = Number(u.getAttribute("status")) || x.status, x.statusText = u.getAttribute("statusText") || x.statusText);var l = (m.dataType || "").toLowerCase(),
                  c = /(json|script|text)/.test(l);if (c || m.textarea) {
                var f = M.getElementsByTagName("textarea")[0];if (f) x.responseText = f.value, x.status = Number(f.getAttribute("status")) || x.status, x.statusText = f.getAttribute("statusText") || x.statusText;else if (c) {
                  var d = M.getElementsByTagName("pre")[0],
                      h = M.getElementsByTagName("body")[0];d ? x.responseText = d.textContent ? d.textContent : d.innerText : h && (x.responseText = h.textContent ? h.textContent : h.innerText);
                }
              } else "xml" == l && !x.responseXML && x.responseText && (x.responseXML = X(x.responseText));try {
                L = _(x, l, m);
              } catch (b) {
                i = "parsererror", x.error = r = b || i;
              }
            } catch (b) {
              a("error caught: ", b), i = "error", x.error = r = b || i;
            }x.aborted && (a("upload aborted"), i = null), x.status && (i = x.status >= 200 && 300 > x.status || 304 === x.status ? "success" : "error"), "success" === i ? (m.success && m.success.call(m.context, L, "success", x), S.resolve(x.responseText, "success", x), p && e.event.trigger("ajaxSuccess", [x, m])) : i && (void 0 === r && (r = x.statusText), m.error && m.error.call(m.context, x, i, r), S.reject(x, "error", r), p && e.event.trigger("ajaxError", [x, m, r])), p && e.event.trigger("ajaxComplete", [x, m]), p && ! --e.active && e.event.trigger("ajaxStop"), m.complete && m.complete.call(m.context, x, i), F = !0, m.timeout && clearTimeout(j), setTimeout(function () {
              m.iframeTarget || v.remove(), x.responseXML = null;
            }, 100);
          }
        }
      }var l,
          c,
          m,
          p,
          d,
          v,
          g,
          x,
          b,
          y,
          T,
          j,
          w = f[0],
          S = e.Deferred();if (r) for (c = 0; h.length > c; c++) {
        l = e(h[c]), i ? l.prop("disabled", !1) : l.removeAttr("disabled");
      }if (m = e.extend(!0, {}, e.ajaxSettings, t), m.context = m.context || m, d = "jqFormIO" + new Date().getTime(), m.iframeTarget ? (v = e(m.iframeTarget), y = v.attr2("name"), y ? d = y : v.attr2("name", d)) : (v = e('<iframe name="' + d + '" src="' + m.iframeSrc + '" />'), v.css({ position: "absolute", top: "-1000px", left: "-1000px" })), g = v[0], x = { aborted: 0, responseText: null, responseXML: null, status: 0, statusText: "n/a", getAllResponseHeaders: function getAllResponseHeaders() {}, getResponseHeader: function getResponseHeader() {}, setRequestHeader: function setRequestHeader() {}, abort: function abort(t) {
          var r = "timeout" === t ? "timeout" : "aborted";a("aborting upload... " + r), this.aborted = 1;try {
            g.contentWindow.document.execCommand && g.contentWindow.document.execCommand("Stop");
          } catch (n) {}v.attr("src", m.iframeSrc), x.error = r, m.error && m.error.call(m.context, x, r, t), p && e.event.trigger("ajaxError", [x, m, r]), m.complete && m.complete.call(m.context, x, r);
        } }, p = m.global, p && 0 === e.active++ && e.event.trigger("ajaxStart"), p && e.event.trigger("ajaxSend", [x, m]), m.beforeSend && m.beforeSend.call(m.context, x, m) === !1) return m.global && e.active--, S.reject(), S;if (x.aborted) return S.reject(), S;b = w.clk, b && (y = b.name, y && !b.disabled && (m.extraData = m.extraData || {}, m.extraData[y] = b.value, "image" == b.type && (m.extraData[y + ".x"] = w.clk_x, m.extraData[y + ".y"] = w.clk_y)));var k = 1,
          D = 2,
          A = e("meta[name=csrf-token]").attr("content"),
          E = e("meta[name=csrf-param]").attr("content");E && A && (m.extraData = m.extraData || {}, m.extraData[E] = A), m.forceSync ? o() : setTimeout(o, 10);var L,
          M,
          F,
          O = 50,
          X = e.parseXML || function (e, t) {
        return window.ActiveXObject ? (t = new ActiveXObject("Microsoft.XMLDOM"), t.async = "false", t.loadXML(e)) : t = new DOMParser().parseFromString(e, "text/xml"), t && t.documentElement && "parsererror" != t.documentElement.nodeName ? t : null;
      },
          C = e.parseJSON || function (e) {
        return window.eval("(" + e + ")");
      },
          _ = function _(t, r, a) {
        var n = t.getResponseHeader("content-type") || "",
            i = "xml" === r || !r && n.indexOf("xml") >= 0,
            o = i ? t.responseXML : t.responseText;return i && "parsererror" === o.documentElement.nodeName && e.error && e.error("parsererror"), a && a.dataFilter && (o = a.dataFilter(o, r)), "string" == typeof o && ("json" === r || !r && n.indexOf("json") >= 0 ? o = C(o) : ("script" === r || !r && n.indexOf("javascript") >= 0) && e.globalEval(o)), o;
      };return S;
    }if (!this.length) return a("ajaxSubmit: skipping submit process - no element selected"), this;var u,
        l,
        c,
        f = this;"function" == typeof t && (t = { success: t }), u = t.type || this.attr2("method"), l = t.url || this.attr2("action"), c = "string" == typeof l ? e.trim(l) : "", c = c || window.location.href || "", c && (c = (c.match(/^([^#]+)/) || [])[1]), t = e.extend(!0, { url: c, success: e.ajaxSettings.success, type: u || "GET", iframeSrc: /^https/i.test(window.location.href || "") ? "javascript:false" : "about:blank" }, t);var m = {};if (this.trigger("form-pre-serialize", [this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-pre-serialize trigger"), this;if (t.beforeSerialize && t.beforeSerialize(this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSerialize callback"), this;var p = t.traditional;void 0 === p && (p = e.ajaxSettings.traditional);var d,
        h = [],
        v = this.formToArray(t.semantic, h);if (t.data && (t.extraData = t.data, d = e.param(t.data, p)), t.beforeSubmit && t.beforeSubmit(v, this, t) === !1) return a("ajaxSubmit: submit aborted via beforeSubmit callback"), this;if (this.trigger("form-submit-validate", [v, this, t, m]), m.veto) return a("ajaxSubmit: submit vetoed via form-submit-validate trigger"), this;var g = e.param(v, p);d && (g = g ? g + "&" + d : d), "GET" == t.type.toUpperCase() ? (t.url += (t.url.indexOf("?") >= 0 ? "&" : "?") + g, t.data = null) : t.data = g;var x = [];if (t.resetForm && x.push(function () {
      f.resetForm();
    }), t.clearForm && x.push(function () {
      f.clearForm(t.includeHidden);
    }), !t.dataType && t.target) {
      var b = t.success || function () {};x.push(function (r) {
        var a = t.replaceTarget ? "replaceWith" : "html";e(t.target)[a](r).each(b, arguments);
      });
    } else t.success && x.push(t.success);if (t.success = function (e, r, a) {
      for (var n = t.context || this, i = 0, o = x.length; o > i; i++) {
        x[i].apply(n, [e, r, a || f, f]);
      }
    }, t.error) {
      var y = t.error;t.error = function (e, r, a) {
        var n = t.context || this;y.apply(n, [e, r, a, f]);
      };
    }if (t.complete) {
      var T = t.complete;t.complete = function (e, r) {
        var a = t.context || this;T.apply(a, [e, r, f]);
      };
    }var j = e('input[type=file]:enabled[value!=""]', this),
        w = j.length > 0,
        S = "multipart/form-data",
        k = f.attr("enctype") == S || f.attr("encoding") == S,
        D = n.fileapi && n.formdata;a("fileAPI :" + D);var A,
        E = (w || k) && !D;t.iframe !== !1 && (t.iframe || E) ? t.closeKeepAlive ? e.get(t.closeKeepAlive, function () {
      A = s(v);
    }) : A = s(v) : A = (w || k) && D ? o(v) : e.ajax(t), f.removeData("jqxhr").data("jqxhr", A);for (var L = 0; h.length > L; L++) {
      h[L] = null;
    }return this.trigger("form-submit-notify", [this, t]), this;
  }, e.fn.ajaxForm = function (n) {
    if (n = n || {}, n.delegation = n.delegation && e.isFunction(e.fn.on), !n.delegation && 0 === this.length) {
      var i = { s: this.selector, c: this.context };return !e.isReady && i.s ? (a("DOM not ready, queuing ajaxForm"), e(function () {
        e(i.s, i.c).ajaxForm(n);
      }), this) : (a("terminating; zero elements found by selector" + (e.isReady ? "" : " (DOM not ready)")), this);
    }return n.delegation ? (e(document).off("submit.form-plugin", this.selector, t).off("click.form-plugin", this.selector, r).on("submit.form-plugin", this.selector, n, t).on("click.form-plugin", this.selector, n, r), this) : this.ajaxFormUnbind().bind("submit.form-plugin", n, t).bind("click.form-plugin", n, r);
  }, e.fn.ajaxFormUnbind = function () {
    return this.unbind("submit.form-plugin click.form-plugin");
  }, e.fn.formToArray = function (t, r) {
    var a = [];if (0 === this.length) return a;var i = this[0],
        o = t ? i.getElementsByTagName("*") : i.elements;if (!o) return a;var s, u, l, c, f, m, p;for (s = 0, m = o.length; m > s; s++) {
      if (f = o[s], l = f.name, l && !f.disabled) if (t && i.clk && "image" == f.type) i.clk == f && (a.push({ name: l, value: e(f).val(), type: f.type }), a.push({ name: l + ".x", value: i.clk_x }, { name: l + ".y", value: i.clk_y }));else if (c = e.fieldValue(f, !0), c && c.constructor == Array) for (r && r.push(f), u = 0, p = c.length; p > u; u++) {
        a.push({ name: l, value: c[u] });
      } else if (n.fileapi && "file" == f.type) {
        r && r.push(f);var d = f.files;if (d.length) for (u = 0; d.length > u; u++) {
          a.push({ name: l, value: d[u], type: f.type });
        } else a.push({ name: l, value: "", type: f.type });
      } else null !== c && c !== void 0 && (r && r.push(f), a.push({ name: l, value: c, type: f.type, required: f.required }));
    }if (!t && i.clk) {
      var h = e(i.clk),
          v = h[0];l = v.name, l && !v.disabled && "image" == v.type && (a.push({ name: l, value: h.val() }), a.push({ name: l + ".x", value: i.clk_x }, { name: l + ".y", value: i.clk_y }));
    }return a;
  }, e.fn.formSerialize = function (t) {
    return e.param(this.formToArray(t));
  }, e.fn.fieldSerialize = function (t) {
    var r = [];return this.each(function () {
      var a = this.name;if (a) {
        var n = e.fieldValue(this, t);if (n && n.constructor == Array) for (var i = 0, o = n.length; o > i; i++) {
          r.push({ name: a, value: n[i] });
        } else null !== n && n !== void 0 && r.push({ name: this.name, value: n });
      }
    }), e.param(r);
  }, e.fn.fieldValue = function (t) {
    for (var r = [], a = 0, n = this.length; n > a; a++) {
      var i = this[a],
          o = e.fieldValue(i, t);null === o || void 0 === o || o.constructor == Array && !o.length || (o.constructor == Array ? e.merge(r, o) : r.push(o));
    }return r;
  }, e.fieldValue = function (t, r) {
    var a = t.name,
        n = t.type,
        i = t.tagName.toLowerCase();if (void 0 === r && (r = !0), r && (!a || t.disabled || "reset" == n || "button" == n || ("checkbox" == n || "radio" == n) && !t.checked || ("submit" == n || "image" == n) && t.form && t.form.clk != t || "select" == i && -1 == t.selectedIndex)) return null;if ("select" == i) {
      var o = t.selectedIndex;if (0 > o) return null;for (var s = [], u = t.options, l = "select-one" == n, c = l ? o + 1 : u.length, f = l ? o : 0; c > f; f++) {
        var m = u[f];if (m.selected) {
          var p = m.value;if (p || (p = m.attributes && m.attributes.value && !m.attributes.value.specified ? m.text : m.value), l) return p;s.push(p);
        }
      }return s;
    }return e(t).val();
  }, e.fn.clearForm = function (t) {
    return this.each(function () {
      e("input,select,textarea", this).clearFields(t);
    });
  }, e.fn.clearFields = e.fn.clearInputs = function (t) {
    var r = /^(?:color|date|datetime|email|month|number|password|range|search|tel|text|time|url|week)$/i;return this.each(function () {
      var a = this.type,
          n = this.tagName.toLowerCase();r.test(a) || "textarea" == n ? this.value = "" : "checkbox" == a || "radio" == a ? this.checked = !1 : "select" == n ? this.selectedIndex = -1 : "file" == a ? /MSIE/.test(navigator.userAgent) ? e(this).replaceWith(e(this).clone(!0)) : e(this).val("") : t && (t === !0 && /hidden/.test(a) || "string" == typeof t && e(this).is(t)) && (this.value = "");
    });
  }, e.fn.resetForm = function () {
    return this.each(function () {
      ("function" == typeof this.reset || "object" == _typeof(this.reset) && !this.reset.nodeType) && this.reset();
    });
  }, e.fn.enable = function (e) {
    return void 0 === e && (e = !0), this.each(function () {
      this.disabled = !e;
    });
  }, e.fn.selected = function (t) {
    return void 0 === t && (t = !0), this.each(function () {
      var r = this.type;if ("checkbox" == r || "radio" == r) this.checked = t;else if ("option" == this.tagName.toLowerCase()) {
        var a = e(this).parent("select");t && a[0] && "select-one" == a[0].type && a.find("option").selected(!1), this.selected = t;
      }
    });
  }, e.fn.ajaxSubmit.debug = !1;
})(jQuery);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

(function (window) {
    'use strict';

    /*global define, module, exports, require */

    var c3 = { version: "0.4.11" };

    var c3_chart_fn, c3_chart_internal_fn, c3_chart_internal_axis_fn;

    function API(owner) {
        this.owner = owner;
    }

    function inherit(base, derived) {

        if (Object.create) {
            derived.prototype = Object.create(base.prototype);
        } else {
            var f = function f() {};
            f.prototype = base.prototype;
            derived.prototype = new f();
        }

        derived.prototype.constructor = derived;

        return derived;
    }

    function Chart(config) {
        var $$ = this.internal = new ChartInternal(this);
        $$.loadConfig(config);

        $$.beforeInit(config);
        $$.init();
        $$.afterInit(config);

        // bind "this" to nested API
        (function bindThis(fn, target, argThis) {
            Object.keys(fn).forEach(function (key) {
                target[key] = fn[key].bind(argThis);
                if (Object.keys(fn[key]).length > 0) {
                    bindThis(fn[key], target[key], argThis);
                }
            });
        })(c3_chart_fn, this, this);
    }

    function ChartInternal(api) {
        var $$ = this;
        $$.d3 = window.d3 ? window.d3 : typeof require !== 'undefined' ? require("d3") : undefined;
        $$.api = api;
        $$.config = $$.getDefaultConfig();
        $$.data = {};
        $$.cache = {};
        $$.axes = {};
    }

    c3.generate = function (config) {
        return new Chart(config);
    };

    c3.chart = {
        fn: Chart.prototype,
        internal: {
            fn: ChartInternal.prototype,
            axis: {
                fn: Axis.prototype
            }
        }
    };
    c3_chart_fn = c3.chart.fn;
    c3_chart_internal_fn = c3.chart.internal.fn;
    c3_chart_internal_axis_fn = c3.chart.internal.axis.fn;

    c3_chart_internal_fn.beforeInit = function () {
        // can do something
    };
    c3_chart_internal_fn.afterInit = function () {
        // can do something
    };
    c3_chart_internal_fn.init = function () {
        var $$ = this,
            config = $$.config;

        $$.initParams();

        if (config.data_url) {
            $$.convertUrlToData(config.data_url, config.data_mimeType, config.data_headers, config.data_keys, $$.initWithData);
        } else if (config.data_json) {
            $$.initWithData($$.convertJsonToData(config.data_json, config.data_keys));
        } else if (config.data_rows) {
            $$.initWithData($$.convertRowsToData(config.data_rows));
        } else if (config.data_columns) {
            $$.initWithData($$.convertColumnsToData(config.data_columns));
        } else {
            throw Error('url or json or rows or columns is required.');
        }
    };

    c3_chart_internal_fn.initParams = function () {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config;

        // MEMO: clipId needs to be unique because it conflicts when multiple charts exist
        $$.clipId = "c3-" + +new Date() + '-clip', $$.clipIdForXAxis = $$.clipId + '-xaxis', $$.clipIdForYAxis = $$.clipId + '-yaxis', $$.clipIdForGrid = $$.clipId + '-grid', $$.clipIdForSubchart = $$.clipId + '-subchart', $$.clipPath = $$.getClipPath($$.clipId), $$.clipPathForXAxis = $$.getClipPath($$.clipIdForXAxis), $$.clipPathForYAxis = $$.getClipPath($$.clipIdForYAxis);
        $$.clipPathForGrid = $$.getClipPath($$.clipIdForGrid), $$.clipPathForSubchart = $$.getClipPath($$.clipIdForSubchart), $$.dragStart = null;
        $$.dragging = false;
        $$.flowing = false;
        $$.cancelClick = false;
        $$.mouseover = false;
        $$.transiting = false;

        $$.color = $$.generateColor();
        $$.levelColor = $$.generateLevelColor();

        $$.dataTimeFormat = config.data_xLocaltime ? d3.time.format : d3.time.format.utc;
        $$.axisTimeFormat = config.axis_x_localtime ? d3.time.format : d3.time.format.utc;
        $$.defaultAxisTimeFormat = $$.axisTimeFormat.multi([[".%L", function (d) {
            return d.getMilliseconds();
        }], [":%S", function (d) {
            return d.getSeconds();
        }], ["%I:%M", function (d) {
            return d.getMinutes();
        }], ["%I %p", function (d) {
            return d.getHours();
        }], ["%-m/%-d", function (d) {
            return d.getDay() && d.getDate() !== 1;
        }], ["%-m/%-d", function (d) {
            return d.getDate() !== 1;
        }], ["%-m/%-d", function (d) {
            return d.getMonth();
        }], ["%Y/%-m/%-d", function () {
            return true;
        }]]);

        $$.hiddenTargetIds = [];
        $$.hiddenLegendIds = [];
        $$.focusedTargetIds = [];
        $$.defocusedTargetIds = [];

        $$.xOrient = config.axis_rotated ? "left" : "bottom";
        $$.yOrient = config.axis_rotated ? config.axis_y_inner ? "top" : "bottom" : config.axis_y_inner ? "right" : "left";
        $$.y2Orient = config.axis_rotated ? config.axis_y2_inner ? "bottom" : "top" : config.axis_y2_inner ? "left" : "right";
        $$.subXOrient = config.axis_rotated ? "left" : "bottom";

        $$.isLegendRight = config.legend_position === 'right';
        $$.isLegendInset = config.legend_position === 'inset';
        $$.isLegendTop = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'top-right';
        $$.isLegendLeft = config.legend_inset_anchor === 'top-left' || config.legend_inset_anchor === 'bottom-left';
        $$.legendStep = 0;
        $$.legendItemWidth = 0;
        $$.legendItemHeight = 0;

        $$.currentMaxTickWidths = {
            x: 0,
            y: 0,
            y2: 0
        };

        $$.rotated_padding_left = 30;
        $$.rotated_padding_right = config.axis_rotated && !config.axis_x_show ? 0 : 30;
        $$.rotated_padding_top = 5;

        $$.withoutFadeIn = {};

        $$.intervalForObserveInserted = undefined;

        $$.axes.subx = d3.selectAll([]); // needs when excluding subchart.js
    };

    c3_chart_internal_fn.initChartElements = function () {
        if (this.initBar) {
            this.initBar();
        }
        if (this.initLine) {
            this.initLine();
        }
        if (this.initArc) {
            this.initArc();
        }
        if (this.initGauge) {
            this.initGauge();
        }
        if (this.initText) {
            this.initText();
        }
    };

    c3_chart_internal_fn.initWithData = function (data) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config;
        var defs,
            main,
            binding = true;

        $$.axis = new Axis($$);

        if ($$.initPie) {
            $$.initPie();
        }
        if ($$.initBrush) {
            $$.initBrush();
        }
        if ($$.initZoom) {
            $$.initZoom();
        }

        if (!config.bindto) {
            $$.selectChart = d3.selectAll([]);
        } else if (typeof config.bindto.node === 'function') {
            $$.selectChart = config.bindto;
        } else {
            $$.selectChart = d3.select(config.bindto);
        }
        if ($$.selectChart.empty()) {
            $$.selectChart = d3.select(document.createElement('div')).style('opacity', 0);
            $$.observeInserted($$.selectChart);
            binding = false;
        }
        $$.selectChart.html("").classed("c3", true);

        // Init data as targets
        $$.data.xs = {};
        $$.data.targets = $$.convertDataToTargets(data);

        if (config.data_filter) {
            $$.data.targets = $$.data.targets.filter(config.data_filter);
        }

        // Set targets to hide if needed
        if (config.data_hide) {
            $$.addHiddenTargetIds(config.data_hide === true ? $$.mapToIds($$.data.targets) : config.data_hide);
        }
        if (config.legend_hide) {
            $$.addHiddenLegendIds(config.legend_hide === true ? $$.mapToIds($$.data.targets) : config.legend_hide);
        }

        // when gauge, hide legend // TODO: fix
        if ($$.hasType('gauge')) {
            config.legend_show = false;
        }

        // Init sizes and scales
        $$.updateSizes();
        $$.updateScales();

        // Set domains for each scale
        $$.x.domain(d3.extent($$.getXDomain($$.data.targets)));
        $$.y.domain($$.getYDomain($$.data.targets, 'y'));
        $$.y2.domain($$.getYDomain($$.data.targets, 'y2'));
        $$.subX.domain($$.x.domain());
        $$.subY.domain($$.y.domain());
        $$.subY2.domain($$.y2.domain());

        // Save original x domain for zoom update
        $$.orgXDomain = $$.x.domain();

        // Set initialized scales to brush and zoom
        if ($$.brush) {
            $$.brush.scale($$.subX);
        }
        if (config.zoom_enabled) {
            $$.zoom.scale($$.x);
        }

        /*-- Basic Elements --*/

        // Define svgs
        $$.svg = $$.selectChart.append("svg").style("overflow", "hidden").on('mouseenter', function () {
            return config.onmouseover.call($$);
        }).on('mouseleave', function () {
            return config.onmouseout.call($$);
        });

        if ($$.config.svg_classname) {
            $$.svg.attr('class', $$.config.svg_classname);
        }

        // Define defs
        defs = $$.svg.append("defs");
        $$.clipChart = $$.appendClip(defs, $$.clipId);
        $$.clipXAxis = $$.appendClip(defs, $$.clipIdForXAxis);
        $$.clipYAxis = $$.appendClip(defs, $$.clipIdForYAxis);
        $$.clipGrid = $$.appendClip(defs, $$.clipIdForGrid);
        $$.clipSubchart = $$.appendClip(defs, $$.clipIdForSubchart);
        $$.updateSvgSize();

        // Define regions
        main = $$.main = $$.svg.append("g").attr("transform", $$.getTranslate('main'));

        if ($$.initSubchart) {
            $$.initSubchart();
        }
        if ($$.initTooltip) {
            $$.initTooltip();
        }
        if ($$.initLegend) {
            $$.initLegend();
        }
        if ($$.initTitle) {
            $$.initTitle();
        }

        /*-- Main Region --*/

        // text when empty
        main.append("text").attr("class", CLASS.text + ' ' + CLASS.empty).attr("text-anchor", "middle") // horizontal centering of text at x position in all browsers.
        .attr("dominant-baseline", "middle"); // vertical centering of text at y position in all browsers, except IE.

        // Regions
        $$.initRegion();

        // Grids
        $$.initGrid();

        // Define g for chart area
        main.append('g').attr("clip-path", $$.clipPath).attr('class', CLASS.chart);

        // Grid lines
        if (config.grid_lines_front) {
            $$.initGridLines();
        }

        // Cover whole with rects for events
        $$.initEventRect();

        // Define g for chart
        $$.initChartElements();

        // if zoom privileged, insert rect to forefront
        // TODO: is this needed?
        main.insert('rect', config.zoom_privileged ? null : 'g.' + CLASS.regions).attr('class', CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height).style('opacity', 0).on("dblclick.zoom", null);

        // Set default extent if defined
        if (config.axis_x_extent) {
            $$.brush.extent($$.getDefaultExtent());
        }

        // Add Axis
        $$.axis.init();

        // Set targets
        $$.updateTargets($$.data.targets);

        // Draw with targets
        if (binding) {
            $$.updateDimension();
            $$.config.oninit.call($$);
            $$.redraw({
                withTransition: false,
                withTransform: true,
                withUpdateXDomain: true,
                withUpdateOrgXDomain: true,
                withTransitionForAxis: false
            });
        }

        // Bind resize event
        $$.bindResize();

        // export element of the chart
        $$.api.element = $$.selectChart.node();
    };

    c3_chart_internal_fn.smoothLines = function (el, type) {
        var $$ = this;
        if (type === 'grid') {
            el.each(function () {
                var g = $$.d3.select(this),
                    x1 = g.attr('x1'),
                    x2 = g.attr('x2'),
                    y1 = g.attr('y1'),
                    y2 = g.attr('y2');
                g.attr({
                    'x1': Math.ceil(x1),
                    'x2': Math.ceil(x2),
                    'y1': Math.ceil(y1),
                    'y2': Math.ceil(y2)
                });
            });
        }
    };

    c3_chart_internal_fn.updateSizes = function () {
        var $$ = this,
            config = $$.config;
        var legendHeight = $$.legend ? $$.getLegendHeight() : 0,
            legendWidth = $$.legend ? $$.getLegendWidth() : 0,
            legendHeightForBottom = $$.isLegendRight || $$.isLegendInset ? 0 : legendHeight,
            hasArc = $$.hasArcType(),
            xAxisHeight = config.axis_rotated || hasArc ? 0 : $$.getHorizontalAxisHeight('x'),
            subchartHeight = config.subchart_show && !hasArc ? config.subchart_size_height + xAxisHeight : 0;

        $$.currentWidth = $$.getCurrentWidth();
        $$.currentHeight = $$.getCurrentHeight();

        // for main
        $$.margin = config.axis_rotated ? {
            top: $$.getHorizontalAxisHeight('y2') + $$.getCurrentPaddingTop(),
            right: hasArc ? 0 : $$.getCurrentPaddingRight(),
            bottom: $$.getHorizontalAxisHeight('y') + legendHeightForBottom + $$.getCurrentPaddingBottom(),
            left: subchartHeight + (hasArc ? 0 : $$.getCurrentPaddingLeft())
        } : {
            top: 4 + $$.getCurrentPaddingTop(), // for top tick text
            right: hasArc ? 0 : $$.getCurrentPaddingRight(),
            bottom: xAxisHeight + subchartHeight + legendHeightForBottom + $$.getCurrentPaddingBottom(),
            left: hasArc ? 0 : $$.getCurrentPaddingLeft()
        };

        // for subchart
        $$.margin2 = config.axis_rotated ? {
            top: $$.margin.top,
            right: NaN,
            bottom: 20 + legendHeightForBottom,
            left: $$.rotated_padding_left
        } : {
            top: $$.currentHeight - subchartHeight - legendHeightForBottom,
            right: NaN,
            bottom: xAxisHeight + legendHeightForBottom,
            left: $$.margin.left
        };

        // for legend
        $$.margin3 = {
            top: 0,
            right: NaN,
            bottom: 0,
            left: 0
        };
        if ($$.updateSizeForLegend) {
            $$.updateSizeForLegend(legendHeight, legendWidth);
        }

        $$.width = $$.currentWidth - $$.margin.left - $$.margin.right;
        $$.height = $$.currentHeight - $$.margin.top - $$.margin.bottom;
        if ($$.width < 0) {
            $$.width = 0;
        }
        if ($$.height < 0) {
            $$.height = 0;
        }

        $$.width2 = config.axis_rotated ? $$.margin.left - $$.rotated_padding_left - $$.rotated_padding_right : $$.width;
        $$.height2 = config.axis_rotated ? $$.height : $$.currentHeight - $$.margin2.top - $$.margin2.bottom;
        if ($$.width2 < 0) {
            $$.width2 = 0;
        }
        if ($$.height2 < 0) {
            $$.height2 = 0;
        }

        // for arc
        $$.arcWidth = $$.width - ($$.isLegendRight ? legendWidth + 10 : 0);
        $$.arcHeight = $$.height - ($$.isLegendRight ? 0 : 10);
        if ($$.hasType('gauge') && !config.gauge_fullCircle) {
            $$.arcHeight += $$.height - $$.getGaugeLabelHeight();
        }
        if ($$.updateRadius) {
            $$.updateRadius();
        }

        if ($$.isLegendRight && hasArc) {
            $$.margin3.left = $$.arcWidth / 2 + $$.radiusExpanded * 1.1;
        }
    };

    c3_chart_internal_fn.updateTargets = function (targets) {
        var $$ = this;

        /*-- Main --*/

        //-- Text --//
        $$.updateTargetsForText(targets);

        //-- Bar --//
        $$.updateTargetsForBar(targets);

        //-- Line --//
        $$.updateTargetsForLine(targets);

        //-- Arc --//
        if ($$.hasArcType() && $$.updateTargetsForArc) {
            $$.updateTargetsForArc(targets);
        }

        /*-- Sub --*/

        if ($$.updateTargetsForSubchart) {
            $$.updateTargetsForSubchart(targets);
        }

        // Fade-in each chart
        $$.showTargets();
    };
    c3_chart_internal_fn.showTargets = function () {
        var $$ = this;
        $$.svg.selectAll('.' + CLASS.target).filter(function (d) {
            return $$.isTargetToShow(d.id);
        }).transition().duration($$.config.transition_duration).style("opacity", 1);
    };

    c3_chart_internal_fn.redraw = function (options, transitions) {
        var $$ = this,
            main = $$.main,
            d3 = $$.d3,
            config = $$.config;
        var areaIndices = $$.getShapeIndices($$.isAreaType),
            barIndices = $$.getShapeIndices($$.isBarType),
            lineIndices = $$.getShapeIndices($$.isLineType);
        var withY, withSubchart, withTransition, withTransitionForExit, withTransitionForAxis, withTransform, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain, withLegend, withEventRect, withDimension, withUpdateXAxis;
        var hideAxis = $$.hasArcType();
        var drawArea, drawBar, drawLine, xForText, yForText;
        var duration, durationForExit, durationForAxis;
        var waitForDraw, flow;
        var targetsToShow = $$.filterTargetsToShow($$.data.targets),
            tickValues,
            i,
            intervalForCulling,
            xDomainForZoom;
        var xv = $$.xv.bind($$),
            cx,
            cy;

        options = options || {};
        withY = getOption(options, "withY", true);
        withSubchart = getOption(options, "withSubchart", true);
        withTransition = getOption(options, "withTransition", true);
        withTransform = getOption(options, "withTransform", false);
        withUpdateXDomain = getOption(options, "withUpdateXDomain", false);
        withUpdateOrgXDomain = getOption(options, "withUpdateOrgXDomain", false);
        withTrimXDomain = getOption(options, "withTrimXDomain", true);
        withUpdateXAxis = getOption(options, "withUpdateXAxis", withUpdateXDomain);
        withLegend = getOption(options, "withLegend", false);
        withEventRect = getOption(options, "withEventRect", true);
        withDimension = getOption(options, "withDimension", true);
        withTransitionForExit = getOption(options, "withTransitionForExit", withTransition);
        withTransitionForAxis = getOption(options, "withTransitionForAxis", withTransition);

        duration = withTransition ? config.transition_duration : 0;
        durationForExit = withTransitionForExit ? duration : 0;
        durationForAxis = withTransitionForAxis ? duration : 0;

        transitions = transitions || $$.axis.generateTransitions(durationForAxis);

        // update legend and transform each g
        if (withLegend && config.legend_show) {
            $$.updateLegend($$.mapToIds($$.data.targets), options, transitions);
        } else if (withDimension) {
            // need to update dimension (e.g. axis.y.tick.values) because y tick values should change
            // no need to update axis in it because they will be updated in redraw()
            $$.updateDimension(true);
        }

        // MEMO: needed for grids calculation
        if ($$.isCategorized() && targetsToShow.length === 0) {
            $$.x.domain([0, $$.axes.x.selectAll('.tick').size()]);
        }

        if (targetsToShow.length) {
            $$.updateXDomain(targetsToShow, withUpdateXDomain, withUpdateOrgXDomain, withTrimXDomain);
            if (!config.axis_x_tick_values) {
                tickValues = $$.axis.updateXAxisTickValues(targetsToShow);
            }
        } else {
            $$.xAxis.tickValues([]);
            $$.subXAxis.tickValues([]);
        }

        if (config.zoom_rescale && !options.flow) {
            xDomainForZoom = $$.x.orgDomain();
        }

        $$.y.domain($$.getYDomain(targetsToShow, 'y', xDomainForZoom));
        $$.y2.domain($$.getYDomain(targetsToShow, 'y2', xDomainForZoom));

        if (!config.axis_y_tick_values && config.axis_y_tick_count) {
            $$.yAxis.tickValues($$.axis.generateTickValues($$.y.domain(), config.axis_y_tick_count));
        }
        if (!config.axis_y2_tick_values && config.axis_y2_tick_count) {
            $$.y2Axis.tickValues($$.axis.generateTickValues($$.y2.domain(), config.axis_y2_tick_count));
        }

        // axes
        $$.axis.redraw(transitions, hideAxis);

        // Update axis label
        $$.axis.updateLabels(withTransition);

        // show/hide if manual culling needed
        if ((withUpdateXDomain || withUpdateXAxis) && targetsToShow.length) {
            if (config.axis_x_tick_culling && tickValues) {
                for (i = 1; i < tickValues.length; i++) {
                    if (tickValues.length / i < config.axis_x_tick_culling_max) {
                        intervalForCulling = i;
                        break;
                    }
                }
                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').each(function (e) {
                    var index = tickValues.indexOf(e);
                    if (index >= 0) {
                        d3.select(this).style('display', index % intervalForCulling ? 'none' : 'block');
                    }
                });
            } else {
                $$.svg.selectAll('.' + CLASS.axisX + ' .tick text').style('display', 'block');
            }
        }

        // setup drawer - MEMO: these must be called after axis updated
        drawArea = $$.generateDrawArea ? $$.generateDrawArea(areaIndices, false) : undefined;
        drawBar = $$.generateDrawBar ? $$.generateDrawBar(barIndices) : undefined;
        drawLine = $$.generateDrawLine ? $$.generateDrawLine(lineIndices, false) : undefined;
        xForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, true);
        yForText = $$.generateXYForText(areaIndices, barIndices, lineIndices, false);

        // Update sub domain
        if (withY) {
            $$.subY.domain($$.getYDomain(targetsToShow, 'y'));
            $$.subY2.domain($$.getYDomain(targetsToShow, 'y2'));
        }

        // xgrid focus
        $$.updateXgridFocus();

        // Data empty label positioning and text.
        main.select("text." + CLASS.text + '.' + CLASS.empty).attr("x", $$.width / 2).attr("y", $$.height / 2).text(config.data_empty_label_text).transition().style('opacity', targetsToShow.length ? 0 : 1);

        // grid
        $$.updateGrid(duration);

        // rect for regions
        $$.updateRegion(duration);

        // bars
        $$.updateBar(durationForExit);

        // lines, areas and cricles
        $$.updateLine(durationForExit);
        $$.updateArea(durationForExit);
        $$.updateCircle();

        // text
        if ($$.hasDataLabel()) {
            $$.updateText(durationForExit);
        }

        // title
        if ($$.redrawTitle) {
            $$.redrawTitle();
        }

        // arc
        if ($$.redrawArc) {
            $$.redrawArc(duration, durationForExit, withTransform);
        }

        // subchart
        if ($$.redrawSubchart) {
            $$.redrawSubchart(withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices);
        }

        // circles for select
        main.selectAll('.' + CLASS.selectedCircles).filter($$.isBarType.bind($$)).selectAll('circle').remove();

        // event rects will redrawn when flow called
        if (config.interaction_enabled && !options.flow && withEventRect) {
            $$.redrawEventRect();
            if ($$.updateZoom) {
                $$.updateZoom();
            }
        }

        // update circleY based on updated parameters
        $$.updateCircleY();

        // generate circle x/y functions depending on updated params
        cx = ($$.config.axis_rotated ? $$.circleY : $$.circleX).bind($$);
        cy = ($$.config.axis_rotated ? $$.circleX : $$.circleY).bind($$);

        if (options.flow) {
            flow = $$.generateFlow({
                targets: targetsToShow,
                flow: options.flow,
                duration: options.flow.duration,
                drawBar: drawBar,
                drawLine: drawLine,
                drawArea: drawArea,
                cx: cx,
                cy: cy,
                xv: xv,
                xForText: xForText,
                yForText: yForText
            });
        }

        if ((duration || flow) && $$.isTabVisible()) {
            // Only use transition if tab visible. See #938.
            // transition should be derived from one transition
            d3.transition().duration(duration).each(function () {
                var transitionsToWait = [];

                // redraw and gather transitions
                [$$.redrawBar(drawBar, true), $$.redrawLine(drawLine, true), $$.redrawArea(drawArea, true), $$.redrawCircle(cx, cy, true), $$.redrawText(xForText, yForText, options.flow, true), $$.redrawRegion(true), $$.redrawGrid(true)].forEach(function (transitions) {
                    transitions.forEach(function (transition) {
                        transitionsToWait.push(transition);
                    });
                });

                // Wait for end of transitions to call flow and onrendered callback
                waitForDraw = $$.generateWait();
                transitionsToWait.forEach(function (t) {
                    waitForDraw.add(t);
                });
            }).call(waitForDraw, function () {
                if (flow) {
                    flow();
                }
                if (config.onrendered) {
                    config.onrendered.call($$);
                }
            });
        } else {
            $$.redrawBar(drawBar);
            $$.redrawLine(drawLine);
            $$.redrawArea(drawArea);
            $$.redrawCircle(cx, cy);
            $$.redrawText(xForText, yForText, options.flow);
            $$.redrawRegion();
            $$.redrawGrid();
            if (config.onrendered) {
                config.onrendered.call($$);
            }
        }

        // update fadein condition
        $$.mapToIds($$.data.targets).forEach(function (id) {
            $$.withoutFadeIn[id] = true;
        });
    };

    c3_chart_internal_fn.updateAndRedraw = function (options) {
        var $$ = this,
            config = $$.config,
            transitions;
        options = options || {};
        // same with redraw
        options.withTransition = getOption(options, "withTransition", true);
        options.withTransform = getOption(options, "withTransform", false);
        options.withLegend = getOption(options, "withLegend", false);
        // NOT same with redraw
        options.withUpdateXDomain = true;
        options.withUpdateOrgXDomain = true;
        options.withTransitionForExit = false;
        options.withTransitionForTransform = getOption(options, "withTransitionForTransform", options.withTransition);
        // MEMO: this needs to be called before updateLegend and it means this ALWAYS needs to be called)
        $$.updateSizes();
        // MEMO: called in updateLegend in redraw if withLegend
        if (!(options.withLegend && config.legend_show)) {
            transitions = $$.axis.generateTransitions(options.withTransitionForAxis ? config.transition_duration : 0);
            // Update scales
            $$.updateScales();
            $$.updateSvgSize();
            // Update g positions
            $$.transformAll(options.withTransitionForTransform, transitions);
        }
        // Draw with new sizes & scales
        $$.redraw(options, transitions);
    };
    c3_chart_internal_fn.redrawWithoutRescale = function () {
        this.redraw({
            withY: false,
            withSubchart: false,
            withEventRect: false,
            withTransitionForAxis: false
        });
    };

    c3_chart_internal_fn.isTimeSeries = function () {
        return this.config.axis_x_type === 'timeseries';
    };
    c3_chart_internal_fn.isCategorized = function () {
        return this.config.axis_x_type.indexOf('categor') >= 0;
    };
    c3_chart_internal_fn.isCustomX = function () {
        var $$ = this,
            config = $$.config;
        return !$$.isTimeSeries() && (config.data_x || notEmpty(config.data_xs));
    };

    c3_chart_internal_fn.isTimeSeriesY = function () {
        return this.config.axis_y_type === 'timeseries';
    };

    c3_chart_internal_fn.getTranslate = function (target) {
        var $$ = this,
            config = $$.config,
            x,
            y;
        if (target === 'main') {
            x = asHalfPixel($$.margin.left);
            y = asHalfPixel($$.margin.top);
        } else if (target === 'context') {
            x = asHalfPixel($$.margin2.left);
            y = asHalfPixel($$.margin2.top);
        } else if (target === 'legend') {
            x = $$.margin3.left;
            y = $$.margin3.top;
        } else if (target === 'x') {
            x = 0;
            y = config.axis_rotated ? 0 : $$.height;
        } else if (target === 'y') {
            x = 0;
            y = config.axis_rotated ? $$.height : 0;
        } else if (target === 'y2') {
            x = config.axis_rotated ? 0 : $$.width;
            y = config.axis_rotated ? 1 : 0;
        } else if (target === 'subx') {
            x = 0;
            y = config.axis_rotated ? 0 : $$.height2;
        } else if (target === 'arc') {
            x = $$.arcWidth / 2;
            y = $$.arcHeight / 2;
        }
        return "translate(" + x + "," + y + ")";
    };
    c3_chart_internal_fn.initialOpacity = function (d) {
        return d.value !== null && this.withoutFadeIn[d.id] ? 1 : 0;
    };
    c3_chart_internal_fn.initialOpacityForCircle = function (d) {
        return d.value !== null && this.withoutFadeIn[d.id] ? this.opacityForCircle(d) : 0;
    };
    c3_chart_internal_fn.opacityForCircle = function (d) {
        var opacity = this.config.point_show ? 1 : 0;
        return isValue(d.value) ? this.isScatterType(d) ? 0.5 : opacity : 0;
    };
    c3_chart_internal_fn.opacityForText = function () {
        return this.hasDataLabel() ? 1 : 0;
    };
    c3_chart_internal_fn.xx = function (d) {
        return d ? this.x(d.x) : null;
    };
    c3_chart_internal_fn.xv = function (d) {
        var $$ = this,
            value = d.value;
        if ($$.isTimeSeries()) {
            value = $$.parseDate(d.value);
        } else if ($$.isCategorized() && typeof d.value === 'string') {
            value = $$.config.axis_x_categories.indexOf(d.value);
        }
        return Math.ceil($$.x(value));
    };
    c3_chart_internal_fn.yv = function (d) {
        var $$ = this,
            yScale = d.axis && d.axis === 'y2' ? $$.y2 : $$.y;
        return Math.ceil(yScale(d.value));
    };
    c3_chart_internal_fn.subxx = function (d) {
        return d ? this.subX(d.x) : null;
    };

    c3_chart_internal_fn.transformMain = function (withTransition, transitions) {
        var $$ = this,
            xAxis,
            yAxis,
            y2Axis;
        if (transitions && transitions.axisX) {
            xAxis = transitions.axisX;
        } else {
            xAxis = $$.main.select('.' + CLASS.axisX);
            if (withTransition) {
                xAxis = xAxis.transition();
            }
        }
        if (transitions && transitions.axisY) {
            yAxis = transitions.axisY;
        } else {
            yAxis = $$.main.select('.' + CLASS.axisY);
            if (withTransition) {
                yAxis = yAxis.transition();
            }
        }
        if (transitions && transitions.axisY2) {
            y2Axis = transitions.axisY2;
        } else {
            y2Axis = $$.main.select('.' + CLASS.axisY2);
            if (withTransition) {
                y2Axis = y2Axis.transition();
            }
        }
        (withTransition ? $$.main.transition() : $$.main).attr("transform", $$.getTranslate('main'));
        xAxis.attr("transform", $$.getTranslate('x'));
        yAxis.attr("transform", $$.getTranslate('y'));
        y2Axis.attr("transform", $$.getTranslate('y2'));
        $$.main.select('.' + CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
    };
    c3_chart_internal_fn.transformAll = function (withTransition, transitions) {
        var $$ = this;
        $$.transformMain(withTransition, transitions);
        if ($$.config.subchart_show) {
            $$.transformContext(withTransition, transitions);
        }
        if ($$.legend) {
            $$.transformLegend(withTransition);
        }
    };

    c3_chart_internal_fn.updateSvgSize = function () {
        var $$ = this,
            brush = $$.svg.select(".c3-brush .background");
        $$.svg.attr('width', $$.currentWidth).attr('height', $$.currentHeight);
        $$.svg.selectAll(['#' + $$.clipId, '#' + $$.clipIdForGrid]).select('rect').attr('width', $$.width).attr('height', $$.height);
        $$.svg.select('#' + $$.clipIdForXAxis).select('rect').attr('x', $$.getXAxisClipX.bind($$)).attr('y', $$.getXAxisClipY.bind($$)).attr('width', $$.getXAxisClipWidth.bind($$)).attr('height', $$.getXAxisClipHeight.bind($$));
        $$.svg.select('#' + $$.clipIdForYAxis).select('rect').attr('x', $$.getYAxisClipX.bind($$)).attr('y', $$.getYAxisClipY.bind($$)).attr('width', $$.getYAxisClipWidth.bind($$)).attr('height', $$.getYAxisClipHeight.bind($$));
        $$.svg.select('#' + $$.clipIdForSubchart).select('rect').attr('width', $$.width).attr('height', brush.size() ? brush.attr('height') : 0);
        $$.svg.select('.' + CLASS.zoomRect).attr('width', $$.width).attr('height', $$.height);
        // MEMO: parent div's height will be bigger than svg when <!DOCTYPE html>
        $$.selectChart.style('max-height', $$.currentHeight + "px");
    };

    c3_chart_internal_fn.updateDimension = function (withoutAxis) {
        var $$ = this;
        if (!withoutAxis) {
            if ($$.config.axis_rotated) {
                $$.axes.x.call($$.xAxis);
                $$.axes.subx.call($$.subXAxis);
            } else {
                $$.axes.y.call($$.yAxis);
                $$.axes.y2.call($$.y2Axis);
            }
        }
        $$.updateSizes();
        $$.updateScales();
        $$.updateSvgSize();
        $$.transformAll(false);
    };

    c3_chart_internal_fn.observeInserted = function (selection) {
        var $$ = this,
            observer;
        if (typeof MutationObserver === 'undefined') {
            window.console.error("MutationObserver not defined.");
            return;
        }
        observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                if (mutation.type === 'childList' && mutation.previousSibling) {
                    observer.disconnect();
                    // need to wait for completion of load because size calculation requires the actual sizes determined after that completion
                    $$.intervalForObserveInserted = window.setInterval(function () {
                        // parentNode will NOT be null when completed
                        if (selection.node().parentNode) {
                            window.clearInterval($$.intervalForObserveInserted);
                            $$.updateDimension();
                            if ($$.brush) {
                                $$.brush.update();
                            }
                            $$.config.oninit.call($$);
                            $$.redraw({
                                withTransform: true,
                                withUpdateXDomain: true,
                                withUpdateOrgXDomain: true,
                                withTransition: false,
                                withTransitionForTransform: false,
                                withLegend: true
                            });
                            selection.transition().style('opacity', 1);
                        }
                    }, 10);
                }
            });
        });
        observer.observe(selection.node(), { attributes: true, childList: true, characterData: true });
    };

    c3_chart_internal_fn.bindResize = function () {
        var $$ = this,
            config = $$.config;

        $$.resizeFunction = $$.generateResize();

        $$.resizeFunction.add(function () {
            config.onresize.call($$);
        });
        if (config.resize_auto) {
            $$.resizeFunction.add(function () {
                if ($$.resizeTimeout !== undefined) {
                    window.clearTimeout($$.resizeTimeout);
                }
                $$.resizeTimeout = window.setTimeout(function () {
                    delete $$.resizeTimeout;
                    $$.api.flush();
                }, 100);
            });
        }
        $$.resizeFunction.add(function () {
            config.onresized.call($$);
        });

        if (window.attachEvent) {
            window.attachEvent('onresize', $$.resizeFunction);
        } else if (window.addEventListener) {
            window.addEventListener('resize', $$.resizeFunction, false);
        } else {
            // fallback to this, if this is a very old browser
            var wrapper = window.onresize;
            if (!wrapper) {
                // create a wrapper that will call all charts
                wrapper = $$.generateResize();
            } else if (!wrapper.add || !wrapper.remove) {
                // there is already a handler registered, make sure we call it too
                wrapper = $$.generateResize();
                wrapper.add(window.onresize);
            }
            // add this graph to the wrapper, we will be removed if the user calls destroy
            wrapper.add($$.resizeFunction);
            window.onresize = wrapper;
        }
    };

    c3_chart_internal_fn.generateResize = function () {
        var resizeFunctions = [];
        function callResizeFunctions() {
            resizeFunctions.forEach(function (f) {
                f();
            });
        }
        callResizeFunctions.add = function (f) {
            resizeFunctions.push(f);
        };
        callResizeFunctions.remove = function (f) {
            for (var i = 0; i < resizeFunctions.length; i++) {
                if (resizeFunctions[i] === f) {
                    resizeFunctions.splice(i, 1);
                    break;
                }
            }
        };
        return callResizeFunctions;
    };

    c3_chart_internal_fn.endall = function (transition, callback) {
        var n = 0;
        transition.each(function () {
            ++n;
        }).each("end", function () {
            if (! --n) {
                callback.apply(this, arguments);
            }
        });
    };
    c3_chart_internal_fn.generateWait = function () {
        var transitionsToWait = [],
            f = function f(transition, callback) {
            var timer = setInterval(function () {
                var done = 0;
                transitionsToWait.forEach(function (t) {
                    if (t.empty()) {
                        done += 1;
                        return;
                    }
                    try {
                        t.transition();
                    } catch (e) {
                        done += 1;
                    }
                });
                if (done === transitionsToWait.length) {
                    clearInterval(timer);
                    if (callback) {
                        callback();
                    }
                }
            }, 10);
        };
        f.add = function (transition) {
            transitionsToWait.push(transition);
        };
        return f;
    };

    c3_chart_internal_fn.parseDate = function (date) {
        var $$ = this,
            parsedDate;
        if (date instanceof Date) {
            parsedDate = date;
        } else if (typeof date === 'string') {
            parsedDate = $$.dataTimeFormat($$.config.data_xFormat).parse(date);
        } else if (typeof date === 'number' && !isNaN(date)) {
            parsedDate = new Date(+date);
        }
        if (!parsedDate || isNaN(+parsedDate)) {
            window.console.error("Failed to parse x '" + date + "' to Date object");
        }
        return parsedDate;
    };

    c3_chart_internal_fn.isTabVisible = function () {
        var hidden;
        if (typeof document.hidden !== "undefined") {
            // Opera 12.10 and Firefox 18 and later support
            hidden = "hidden";
        } else if (typeof document.mozHidden !== "undefined") {
            hidden = "mozHidden";
        } else if (typeof document.msHidden !== "undefined") {
            hidden = "msHidden";
        } else if (typeof document.webkitHidden !== "undefined") {
            hidden = "webkitHidden";
        }

        return document[hidden] ? false : true;
    };

    c3_chart_internal_fn.getDefaultConfig = function () {
        var config = {
            bindto: '#chart',
            svg_classname: undefined,
            size_width: undefined,
            size_height: undefined,
            padding_left: undefined,
            padding_right: undefined,
            padding_top: undefined,
            padding_bottom: undefined,
            resize_auto: true,
            zoom_enabled: false,
            zoom_extent: undefined,
            zoom_privileged: false,
            zoom_rescale: false,
            zoom_onzoom: function zoom_onzoom() {},
            zoom_onzoomstart: function zoom_onzoomstart() {},
            zoom_onzoomend: function zoom_onzoomend() {},
            zoom_x_min: undefined,
            zoom_x_max: undefined,
            interaction_brighten: true,
            interaction_enabled: true,
            onmouseover: function onmouseover() {},
            onmouseout: function onmouseout() {},
            onresize: function onresize() {},
            onresized: function onresized() {},
            oninit: function oninit() {},
            onrendered: function onrendered() {},
            transition_duration: 350,
            data_x: undefined,
            data_xs: {},
            data_xFormat: '%Y-%m-%d',
            data_xLocaltime: true,
            data_xSort: true,
            data_idConverter: function data_idConverter(id) {
                return id;
            },
            data_names: {},
            data_classes: {},
            data_groups: [],
            data_axes: {},
            data_type: undefined,
            data_types: {},
            data_labels: {},
            data_order: 'desc',
            data_regions: {},
            data_color: undefined,
            data_colors: {},
            data_hide: false,
            data_filter: undefined,
            data_selection_enabled: false,
            data_selection_grouped: false,
            data_selection_isselectable: function data_selection_isselectable() {
                return true;
            },
            data_selection_multiple: true,
            data_selection_draggable: false,
            data_onclick: function data_onclick() {},
            data_onmouseover: function data_onmouseover() {},
            data_onmouseout: function data_onmouseout() {},
            data_onselected: function data_onselected() {},
            data_onunselected: function data_onunselected() {},
            data_url: undefined,
            data_headers: undefined,
            data_json: undefined,
            data_rows: undefined,
            data_columns: undefined,
            data_mimeType: undefined,
            data_keys: undefined,
            // configuration for no plot-able data supplied.
            data_empty_label_text: "",
            // subchart
            subchart_show: false,
            subchart_size_height: 60,
            subchart_axis_x_show: true,
            subchart_onbrush: function subchart_onbrush() {},
            // color
            color_pattern: [],
            color_threshold: {},
            // legend
            legend_show: true,
            legend_hide: false,
            legend_position: 'bottom',
            legend_inset_anchor: 'top-left',
            legend_inset_x: 10,
            legend_inset_y: 0,
            legend_inset_step: undefined,
            legend_item_onclick: undefined,
            legend_item_onmouseover: undefined,
            legend_item_onmouseout: undefined,
            legend_equally: false,
            legend_padding: 0,
            legend_item_tile_width: 10,
            legend_item_tile_height: 10,
            // axis
            axis_rotated: false,
            axis_x_show: true,
            axis_x_type: 'indexed',
            axis_x_localtime: true,
            axis_x_categories: [],
            axis_x_tick_centered: false,
            axis_x_tick_format: undefined,
            axis_x_tick_culling: {},
            axis_x_tick_culling_max: 10,
            axis_x_tick_count: undefined,
            axis_x_tick_fit: true,
            axis_x_tick_values: null,
            axis_x_tick_rotate: 0,
            axis_x_tick_outer: true,
            axis_x_tick_multiline: true,
            axis_x_tick_width: null,
            axis_x_max: undefined,
            axis_x_min: undefined,
            axis_x_padding: {},
            axis_x_height: undefined,
            axis_x_extent: undefined,
            axis_x_label: {},
            axis_y_show: true,
            axis_y_type: undefined,
            axis_y_max: undefined,
            axis_y_min: undefined,
            axis_y_inverted: false,
            axis_y_center: undefined,
            axis_y_inner: undefined,
            axis_y_label: {},
            axis_y_tick_format: undefined,
            axis_y_tick_outer: true,
            axis_y_tick_values: null,
            axis_y_tick_rotate: 0,
            axis_y_tick_count: undefined,
            axis_y_tick_time_value: undefined,
            axis_y_tick_time_interval: undefined,
            axis_y_padding: {},
            axis_y_default: undefined,
            axis_y2_show: false,
            axis_y2_max: undefined,
            axis_y2_min: undefined,
            axis_y2_inverted: false,
            axis_y2_center: undefined,
            axis_y2_inner: undefined,
            axis_y2_label: {},
            axis_y2_tick_format: undefined,
            axis_y2_tick_outer: true,
            axis_y2_tick_values: null,
            axis_y2_tick_count: undefined,
            axis_y2_padding: {},
            axis_y2_default: undefined,
            // grid
            grid_x_show: false,
            grid_x_type: 'tick',
            grid_x_lines: [],
            grid_y_show: false,
            // not used
            // grid_y_type: 'tick',
            grid_y_lines: [],
            grid_y_ticks: 10,
            grid_focus_show: true,
            grid_lines_front: true,
            // point - point of each data
            point_show: true,
            point_r: 2.5,
            point_sensitivity: 10,
            point_focus_expand_enabled: true,
            point_focus_expand_r: undefined,
            point_select_r: undefined,
            // line
            line_connectNull: false,
            line_step_type: 'step',
            // bar
            bar_width: undefined,
            bar_width_ratio: 0.6,
            bar_width_max: undefined,
            bar_zerobased: true,
            // area
            area_zerobased: true,
            area_above: false,
            // pie
            pie_label_show: true,
            pie_label_format: undefined,
            pie_label_threshold: 0.05,
            pie_label_ratio: undefined,
            pie_expand: {},
            pie_expand_duration: 50,
            // gauge
            gauge_fullCircle: false,
            gauge_label_show: true,
            gauge_label_format: undefined,
            gauge_min: 0,
            gauge_max: 100,
            gauge_startingAngle: -1 * Math.PI / 2,
            gauge_units: undefined,
            gauge_width: undefined,
            gauge_expand: {},
            gauge_expand_duration: 50,
            // donut
            donut_label_show: true,
            donut_label_format: undefined,
            donut_label_threshold: 0.05,
            donut_label_ratio: undefined,
            donut_width: undefined,
            donut_title: "",
            donut_expand: {},
            donut_expand_duration: 50,
            // spline
            spline_interpolation_type: 'cardinal',
            // region - region to change style
            regions: [],
            // tooltip - show when mouseover on each data
            tooltip_show: true,
            tooltip_grouped: true,
            tooltip_format_title: undefined,
            tooltip_format_name: undefined,
            tooltip_format_value: undefined,
            tooltip_position: undefined,
            tooltip_contents: function tooltip_contents(d, defaultTitleFormat, defaultValueFormat, color) {
                return this.getTooltipContent ? this.getTooltipContent(d, defaultTitleFormat, defaultValueFormat, color) : '';
            },
            tooltip_init_show: false,
            tooltip_init_x: 0,
            tooltip_init_position: { top: '0px', left: '50px' },
            tooltip_onshow: function tooltip_onshow() {},
            tooltip_onhide: function tooltip_onhide() {},
            // title
            title_text: undefined,
            title_padding: {
                top: 0,
                right: 0,
                bottom: 0,
                left: 0
            },
            title_position: 'top-center'
        };

        Object.keys(this.additionalConfig).forEach(function (key) {
            config[key] = this.additionalConfig[key];
        }, this);

        return config;
    };
    c3_chart_internal_fn.additionalConfig = {};

    c3_chart_internal_fn.loadConfig = function (config) {
        var this_config = this.config,
            target,
            keys,
            read;
        function find() {
            var key = keys.shift();
            //        console.log("key =>", key, ", target =>", target);
            if (key && target && (typeof target === 'undefined' ? 'undefined' : _typeof(target)) === 'object' && key in target) {
                target = target[key];
                return find();
            } else if (!key) {
                return target;
            } else {
                return undefined;
            }
        }
        Object.keys(this_config).forEach(function (key) {
            target = config;
            keys = key.split('_');
            read = find();
            //        console.log("CONFIG : ", key, read);
            if (isDefined(read)) {
                this_config[key] = read;
            }
        });
    };

    c3_chart_internal_fn.getScale = function (min, max, forTimeseries) {
        return (forTimeseries ? this.d3.time.scale() : this.d3.scale.linear()).range([min, max]);
    };
    c3_chart_internal_fn.getX = function (min, max, domain, offset) {
        var $$ = this,
            scale = $$.getScale(min, max, $$.isTimeSeries()),
            _scale = domain ? scale.domain(domain) : scale,
            key;
        // Define customized scale if categorized axis
        if ($$.isCategorized()) {
            offset = offset || function () {
                return 0;
            };
            scale = function scale(d, raw) {
                var v = _scale(d) + offset(d);
                return raw ? v : Math.ceil(v);
            };
        } else {
            scale = function scale(d, raw) {
                var v = _scale(d);
                return raw ? v : Math.ceil(v);
            };
        }
        // define functions
        for (key in _scale) {
            scale[key] = _scale[key];
        }
        scale.orgDomain = function () {
            return _scale.domain();
        };
        // define custom domain() for categorized axis
        if ($$.isCategorized()) {
            scale.domain = function (domain) {
                if (!arguments.length) {
                    domain = this.orgDomain();
                    return [domain[0], domain[1] + 1];
                }
                _scale.domain(domain);
                return scale;
            };
        }
        return scale;
    };
    c3_chart_internal_fn.getY = function (min, max, domain) {
        var scale = this.getScale(min, max, this.isTimeSeriesY());
        if (domain) {
            scale.domain(domain);
        }
        return scale;
    };
    c3_chart_internal_fn.getYScale = function (id) {
        return this.axis.getId(id) === 'y2' ? this.y2 : this.y;
    };
    c3_chart_internal_fn.getSubYScale = function (id) {
        return this.axis.getId(id) === 'y2' ? this.subY2 : this.subY;
    };
    c3_chart_internal_fn.updateScales = function () {
        var $$ = this,
            config = $$.config,
            forInit = !$$.x;
        // update edges
        $$.xMin = config.axis_rotated ? 1 : 0;
        $$.xMax = config.axis_rotated ? $$.height : $$.width;
        $$.yMin = config.axis_rotated ? 0 : $$.height;
        $$.yMax = config.axis_rotated ? $$.width : 1;
        $$.subXMin = $$.xMin;
        $$.subXMax = $$.xMax;
        $$.subYMin = config.axis_rotated ? 0 : $$.height2;
        $$.subYMax = config.axis_rotated ? $$.width2 : 1;
        // update scales
        $$.x = $$.getX($$.xMin, $$.xMax, forInit ? undefined : $$.x.orgDomain(), function () {
            return $$.xAxis.tickOffset();
        });
        $$.y = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y_default : $$.y.domain());
        $$.y2 = $$.getY($$.yMin, $$.yMax, forInit ? config.axis_y2_default : $$.y2.domain());
        $$.subX = $$.getX($$.xMin, $$.xMax, $$.orgXDomain, function (d) {
            return d % 1 ? 0 : $$.subXAxis.tickOffset();
        });
        $$.subY = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y_default : $$.subY.domain());
        $$.subY2 = $$.getY($$.subYMin, $$.subYMax, forInit ? config.axis_y2_default : $$.subY2.domain());
        // update axes
        $$.xAxisTickFormat = $$.axis.getXAxisTickFormat();
        $$.xAxisTickValues = $$.axis.getXAxisTickValues();
        $$.yAxisTickValues = $$.axis.getYAxisTickValues();
        $$.y2AxisTickValues = $$.axis.getY2AxisTickValues();

        $$.xAxis = $$.axis.getXAxis($$.x, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
        $$.subXAxis = $$.axis.getXAxis($$.subX, $$.subXOrient, $$.xAxisTickFormat, $$.xAxisTickValues, config.axis_x_tick_outer);
        $$.yAxis = $$.axis.getYAxis($$.y, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, config.axis_y_tick_outer);
        $$.y2Axis = $$.axis.getYAxis($$.y2, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, config.axis_y2_tick_outer);

        // Set initialized scales to brush and zoom
        if (!forInit) {
            if ($$.brush) {
                $$.brush.scale($$.subX);
            }
            if (config.zoom_enabled) {
                $$.zoom.scale($$.x);
            }
        }
        // update for arc
        if ($$.updateArc) {
            $$.updateArc();
        }
    };

    c3_chart_internal_fn.getYDomainMin = function (targets) {
        var $$ = this,
            config = $$.config,
            ids = $$.mapToIds(targets),
            ys = $$.getValuesAsIdKeyed(targets),
            j,
            k,
            baseId,
            idsInGroup,
            id,
            hasNegativeValue;
        if (config.data_groups.length > 0) {
            hasNegativeValue = $$.hasNegativeValueInTargets(targets);
            for (j = 0; j < config.data_groups.length; j++) {
                // Determine baseId
                idsInGroup = config.data_groups[j].filter(function (id) {
                    return ids.indexOf(id) >= 0;
                });
                if (idsInGroup.length === 0) {
                    continue;
                }
                baseId = idsInGroup[0];
                // Consider negative values
                if (hasNegativeValue && ys[baseId]) {
                    ys[baseId].forEach(function (v, i) {
                        ys[baseId][i] = v < 0 ? v : 0;
                    });
                }
                // Compute min
                for (k = 1; k < idsInGroup.length; k++) {
                    id = idsInGroup[k];
                    if (!ys[id]) {
                        continue;
                    }
                    ys[id].forEach(function (v, i) {
                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasNegativeValue && +v > 0)) {
                            ys[baseId][i] += +v;
                        }
                    });
                }
            }
        }
        return $$.d3.min(Object.keys(ys).map(function (key) {
            return $$.d3.min(ys[key]);
        }));
    };
    c3_chart_internal_fn.getYDomainMax = function (targets) {
        var $$ = this,
            config = $$.config,
            ids = $$.mapToIds(targets),
            ys = $$.getValuesAsIdKeyed(targets),
            j,
            k,
            baseId,
            idsInGroup,
            id,
            hasPositiveValue;
        if (config.data_groups.length > 0) {
            hasPositiveValue = $$.hasPositiveValueInTargets(targets);
            for (j = 0; j < config.data_groups.length; j++) {
                // Determine baseId
                idsInGroup = config.data_groups[j].filter(function (id) {
                    return ids.indexOf(id) >= 0;
                });
                if (idsInGroup.length === 0) {
                    continue;
                }
                baseId = idsInGroup[0];
                // Consider positive values
                if (hasPositiveValue && ys[baseId]) {
                    ys[baseId].forEach(function (v, i) {
                        ys[baseId][i] = v > 0 ? v : 0;
                    });
                }
                // Compute max
                for (k = 1; k < idsInGroup.length; k++) {
                    id = idsInGroup[k];
                    if (!ys[id]) {
                        continue;
                    }
                    ys[id].forEach(function (v, i) {
                        if ($$.axis.getId(id) === $$.axis.getId(baseId) && ys[baseId] && !(hasPositiveValue && +v < 0)) {
                            ys[baseId][i] += +v;
                        }
                    });
                }
            }
        }
        return $$.d3.max(Object.keys(ys).map(function (key) {
            return $$.d3.max(ys[key]);
        }));
    };
    c3_chart_internal_fn.getYDomain = function (targets, axisId, xDomain) {
        var $$ = this,
            config = $$.config,
            targetsByAxisId = targets.filter(function (t) {
            return $$.axis.getId(t.id) === axisId;
        }),
            yTargets = xDomain ? $$.filterByXDomain(targetsByAxisId, xDomain) : targetsByAxisId,
            yMin = axisId === 'y2' ? config.axis_y2_min : config.axis_y_min,
            yMax = axisId === 'y2' ? config.axis_y2_max : config.axis_y_max,
            yDomainMin = $$.getYDomainMin(yTargets),
            yDomainMax = $$.getYDomainMax(yTargets),
            domain,
            domainLength,
            padding,
            padding_top,
            padding_bottom,
            center = axisId === 'y2' ? config.axis_y2_center : config.axis_y_center,
            yDomainAbs,
            lengths,
            diff,
            ratio,
            isAllPositive,
            isAllNegative,
            isZeroBased = $$.hasType('bar', yTargets) && config.bar_zerobased || $$.hasType('area', yTargets) && config.area_zerobased,
            isInverted = axisId === 'y2' ? config.axis_y2_inverted : config.axis_y_inverted,
            showHorizontalDataLabel = $$.hasDataLabel() && config.axis_rotated,
            showVerticalDataLabel = $$.hasDataLabel() && !config.axis_rotated;

        // MEMO: avoid inverting domain unexpectedly
        yDomainMin = isValue(yMin) ? yMin : isValue(yMax) ? yDomainMin < yMax ? yDomainMin : yMax - 10 : yDomainMin;
        yDomainMax = isValue(yMax) ? yMax : isValue(yMin) ? yMin < yDomainMax ? yDomainMax : yMin + 10 : yDomainMax;

        if (yTargets.length === 0) {
            // use current domain if target of axisId is none
            return axisId === 'y2' ? $$.y2.domain() : $$.y.domain();
        }
        if (isNaN(yDomainMin)) {
            // set minimum to zero when not number
            yDomainMin = 0;
        }
        if (isNaN(yDomainMax)) {
            // set maximum to have same value as yDomainMin
            yDomainMax = yDomainMin;
        }
        if (yDomainMin === yDomainMax) {
            yDomainMin < 0 ? yDomainMax = 0 : yDomainMin = 0;
        }
        isAllPositive = yDomainMin >= 0 && yDomainMax >= 0;
        isAllNegative = yDomainMin <= 0 && yDomainMax <= 0;

        // Cancel zerobased if axis_*_min / axis_*_max specified
        if (isValue(yMin) && isAllPositive || isValue(yMax) && isAllNegative) {
            isZeroBased = false;
        }

        // Bar/Area chart should be 0-based if all positive|negative
        if (isZeroBased) {
            if (isAllPositive) {
                yDomainMin = 0;
            }
            if (isAllNegative) {
                yDomainMax = 0;
            }
        }

        domainLength = Math.abs(yDomainMax - yDomainMin);
        padding = padding_top = padding_bottom = domainLength * 0.1;

        if (typeof center !== 'undefined') {
            yDomainAbs = Math.max(Math.abs(yDomainMin), Math.abs(yDomainMax));
            yDomainMax = center + yDomainAbs;
            yDomainMin = center - yDomainAbs;
        }
        // add padding for data label
        if (showHorizontalDataLabel) {
            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'width');
            diff = diffDomain($$.y.range());
            ratio = [lengths[0] / diff, lengths[1] / diff];
            padding_top += domainLength * (ratio[1] / (1 - ratio[0] - ratio[1]));
            padding_bottom += domainLength * (ratio[0] / (1 - ratio[0] - ratio[1]));
        } else if (showVerticalDataLabel) {
            lengths = $$.getDataLabelLength(yDomainMin, yDomainMax, 'height');
            padding_top += $$.axis.convertPixelsToAxisPadding(lengths[1], domainLength);
            padding_bottom += $$.axis.convertPixelsToAxisPadding(lengths[0], domainLength);
        }
        if (axisId === 'y' && notEmpty(config.axis_y_padding)) {
            padding_top = $$.axis.getPadding(config.axis_y_padding, 'top', padding_top, domainLength);
            padding_bottom = $$.axis.getPadding(config.axis_y_padding, 'bottom', padding_bottom, domainLength);
        }
        if (axisId === 'y2' && notEmpty(config.axis_y2_padding)) {
            padding_top = $$.axis.getPadding(config.axis_y2_padding, 'top', padding_top, domainLength);
            padding_bottom = $$.axis.getPadding(config.axis_y2_padding, 'bottom', padding_bottom, domainLength);
        }
        // Bar/Area chart should be 0-based if all positive|negative
        if (isZeroBased) {
            if (isAllPositive) {
                padding_bottom = yDomainMin;
            }
            if (isAllNegative) {
                padding_top = -yDomainMax;
            }
        }
        domain = [yDomainMin - padding_bottom, yDomainMax + padding_top];
        return isInverted ? domain.reverse() : domain;
    };
    c3_chart_internal_fn.getXDomainMin = function (targets) {
        var $$ = this,
            config = $$.config;
        return isDefined(config.axis_x_min) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_min) : config.axis_x_min : $$.d3.min(targets, function (t) {
            return $$.d3.min(t.values, function (v) {
                return v.x;
            });
        });
    };
    c3_chart_internal_fn.getXDomainMax = function (targets) {
        var $$ = this,
            config = $$.config;
        return isDefined(config.axis_x_max) ? $$.isTimeSeries() ? this.parseDate(config.axis_x_max) : config.axis_x_max : $$.d3.max(targets, function (t) {
            return $$.d3.max(t.values, function (v) {
                return v.x;
            });
        });
    };
    c3_chart_internal_fn.getXDomainPadding = function (domain) {
        var $$ = this,
            config = $$.config,
            diff = domain[1] - domain[0],
            maxDataCount,
            padding,
            paddingLeft,
            paddingRight;
        if ($$.isCategorized()) {
            padding = 0;
        } else if ($$.hasType('bar')) {
            maxDataCount = $$.getMaxDataCount();
            padding = maxDataCount > 1 ? diff / (maxDataCount - 1) / 2 : 0.5;
        } else {
            padding = diff * 0.01;
        }
        if (_typeof(config.axis_x_padding) === 'object' && notEmpty(config.axis_x_padding)) {
            paddingLeft = isValue(config.axis_x_padding.left) ? config.axis_x_padding.left : padding;
            paddingRight = isValue(config.axis_x_padding.right) ? config.axis_x_padding.right : padding;
        } else if (typeof config.axis_x_padding === 'number') {
            paddingLeft = paddingRight = config.axis_x_padding;
        } else {
            paddingLeft = paddingRight = padding;
        }
        return { left: paddingLeft, right: paddingRight };
    };
    c3_chart_internal_fn.getXDomain = function (targets) {
        var $$ = this,
            xDomain = [$$.getXDomainMin(targets), $$.getXDomainMax(targets)],
            firstX = xDomain[0],
            lastX = xDomain[1],
            padding = $$.getXDomainPadding(xDomain),
            min = 0,
            max = 0;
        // show center of x domain if min and max are the same
        if (firstX - lastX === 0 && !$$.isCategorized()) {
            if ($$.isTimeSeries()) {
                firstX = new Date(firstX.getTime() * 0.5);
                lastX = new Date(lastX.getTime() * 1.5);
            } else {
                firstX = firstX === 0 ? 1 : firstX * 0.5;
                lastX = lastX === 0 ? -1 : lastX * 1.5;
            }
        }
        if (firstX || firstX === 0) {
            min = $$.isTimeSeries() ? new Date(firstX.getTime() - padding.left) : firstX - padding.left;
        }
        if (lastX || lastX === 0) {
            max = $$.isTimeSeries() ? new Date(lastX.getTime() + padding.right) : lastX + padding.right;
        }
        return [min, max];
    };
    c3_chart_internal_fn.updateXDomain = function (targets, withUpdateXDomain, withUpdateOrgXDomain, withTrim, domain) {
        var $$ = this,
            config = $$.config;

        if (withUpdateOrgXDomain) {
            $$.x.domain(domain ? domain : $$.d3.extent($$.getXDomain(targets)));
            $$.orgXDomain = $$.x.domain();
            if (config.zoom_enabled) {
                $$.zoom.scale($$.x).updateScaleExtent();
            }
            $$.subX.domain($$.x.domain());
            if ($$.brush) {
                $$.brush.scale($$.subX);
            }
        }
        if (withUpdateXDomain) {
            $$.x.domain(domain ? domain : !$$.brush || $$.brush.empty() ? $$.orgXDomain : $$.brush.extent());
            if (config.zoom_enabled) {
                $$.zoom.scale($$.x).updateScaleExtent();
            }
        }

        // Trim domain when too big by zoom mousemove event
        if (withTrim) {
            $$.x.domain($$.trimXDomain($$.x.orgDomain()));
        }

        return $$.x.domain();
    };
    c3_chart_internal_fn.trimXDomain = function (domain) {
        var zoomDomain = this.getZoomDomain(),
            min = zoomDomain[0],
            max = zoomDomain[1];
        if (domain[0] <= min) {
            domain[1] = +domain[1] + (min - domain[0]);
            domain[0] = min;
        }
        if (max <= domain[1]) {
            domain[0] = +domain[0] - (domain[1] - max);
            domain[1] = max;
        }
        return domain;
    };

    c3_chart_internal_fn.isX = function (key) {
        var $$ = this,
            config = $$.config;
        return config.data_x && key === config.data_x || notEmpty(config.data_xs) && hasValue(config.data_xs, key);
    };
    c3_chart_internal_fn.isNotX = function (key) {
        return !this.isX(key);
    };
    c3_chart_internal_fn.getXKey = function (id) {
        var $$ = this,
            config = $$.config;
        return config.data_x ? config.data_x : notEmpty(config.data_xs) ? config.data_xs[id] : null;
    };
    c3_chart_internal_fn.getXValuesOfXKey = function (key, targets) {
        var $$ = this,
            xValues,
            ids = targets && notEmpty(targets) ? $$.mapToIds(targets) : [];
        ids.forEach(function (id) {
            if ($$.getXKey(id) === key) {
                xValues = $$.data.xs[id];
            }
        });
        return xValues;
    };
    c3_chart_internal_fn.getIndexByX = function (x) {
        var $$ = this,
            data = $$.filterByX($$.data.targets, x);
        return data.length ? data[0].index : null;
    };
    c3_chart_internal_fn.getXValue = function (id, i) {
        var $$ = this;
        return id in $$.data.xs && $$.data.xs[id] && isValue($$.data.xs[id][i]) ? $$.data.xs[id][i] : i;
    };
    c3_chart_internal_fn.getOtherTargetXs = function () {
        var $$ = this,
            idsForX = Object.keys($$.data.xs);
        return idsForX.length ? $$.data.xs[idsForX[0]] : null;
    };
    c3_chart_internal_fn.getOtherTargetX = function (index) {
        var xs = this.getOtherTargetXs();
        return xs && index < xs.length ? xs[index] : null;
    };
    c3_chart_internal_fn.addXs = function (xs) {
        var $$ = this;
        Object.keys(xs).forEach(function (id) {
            $$.config.data_xs[id] = xs[id];
        });
    };
    c3_chart_internal_fn.hasMultipleX = function (xs) {
        return this.d3.set(Object.keys(xs).map(function (id) {
            return xs[id];
        })).size() > 1;
    };
    c3_chart_internal_fn.isMultipleX = function () {
        return notEmpty(this.config.data_xs) || !this.config.data_xSort || this.hasType('scatter');
    };
    c3_chart_internal_fn.addName = function (data) {
        var $$ = this,
            name;
        if (data) {
            name = $$.config.data_names[data.id];
            data.name = name !== undefined ? name : data.id;
        }
        return data;
    };
    c3_chart_internal_fn.getValueOnIndex = function (values, index) {
        var valueOnIndex = values.filter(function (v) {
            return v.index === index;
        });
        return valueOnIndex.length ? valueOnIndex[0] : null;
    };
    c3_chart_internal_fn.updateTargetX = function (targets, x) {
        var $$ = this;
        targets.forEach(function (t) {
            t.values.forEach(function (v, i) {
                v.x = $$.generateTargetX(x[i], t.id, i);
            });
            $$.data.xs[t.id] = x;
        });
    };
    c3_chart_internal_fn.updateTargetXs = function (targets, xs) {
        var $$ = this;
        targets.forEach(function (t) {
            if (xs[t.id]) {
                $$.updateTargetX([t], xs[t.id]);
            }
        });
    };
    c3_chart_internal_fn.generateTargetX = function (rawX, id, index) {
        var $$ = this,
            x;
        if ($$.isTimeSeries()) {
            x = rawX ? $$.parseDate(rawX) : $$.parseDate($$.getXValue(id, index));
        } else if ($$.isCustomX() && !$$.isCategorized()) {
            x = isValue(rawX) ? +rawX : $$.getXValue(id, index);
        } else {
            x = index;
        }
        return x;
    };
    c3_chart_internal_fn.cloneTarget = function (target) {
        return {
            id: target.id,
            id_org: target.id_org,
            values: target.values.map(function (d) {
                return { x: d.x, value: d.value, id: d.id };
            })
        };
    };
    c3_chart_internal_fn.updateXs = function () {
        var $$ = this;
        if ($$.data.targets.length) {
            $$.xs = [];
            $$.data.targets[0].values.forEach(function (v) {
                $$.xs[v.index] = v.x;
            });
        }
    };
    c3_chart_internal_fn.getPrevX = function (i) {
        var x = this.xs[i - 1];
        return typeof x !== 'undefined' ? x : null;
    };
    c3_chart_internal_fn.getNextX = function (i) {
        var x = this.xs[i + 1];
        return typeof x !== 'undefined' ? x : null;
    };
    c3_chart_internal_fn.getMaxDataCount = function () {
        var $$ = this;
        return $$.d3.max($$.data.targets, function (t) {
            return t.values.length;
        });
    };
    c3_chart_internal_fn.getMaxDataCountTarget = function (targets) {
        var length = targets.length,
            max = 0,
            maxTarget;
        if (length > 1) {
            targets.forEach(function (t) {
                if (t.values.length > max) {
                    maxTarget = t;
                    max = t.values.length;
                }
            });
        } else {
            maxTarget = length ? targets[0] : null;
        }
        return maxTarget;
    };
    c3_chart_internal_fn.getEdgeX = function (targets) {
        var $$ = this;
        return !targets.length ? [0, 0] : [$$.d3.min(targets, function (t) {
            return t.values[0].x;
        }), $$.d3.max(targets, function (t) {
            return t.values[t.values.length - 1].x;
        })];
    };
    c3_chart_internal_fn.mapToIds = function (targets) {
        return targets.map(function (d) {
            return d.id;
        });
    };
    c3_chart_internal_fn.mapToTargetIds = function (ids) {
        var $$ = this;
        return ids ? [].concat(ids) : $$.mapToIds($$.data.targets);
    };
    c3_chart_internal_fn.hasTarget = function (targets, id) {
        var ids = this.mapToIds(targets),
            i;
        for (i = 0; i < ids.length; i++) {
            if (ids[i] === id) {
                return true;
            }
        }
        return false;
    };
    c3_chart_internal_fn.isTargetToShow = function (targetId) {
        return this.hiddenTargetIds.indexOf(targetId) < 0;
    };
    c3_chart_internal_fn.isLegendToShow = function (targetId) {
        return this.hiddenLegendIds.indexOf(targetId) < 0;
    };
    c3_chart_internal_fn.filterTargetsToShow = function (targets) {
        var $$ = this;
        return targets.filter(function (t) {
            return $$.isTargetToShow(t.id);
        });
    };
    c3_chart_internal_fn.mapTargetsToUniqueXs = function (targets) {
        var $$ = this;
        var xs = $$.d3.set($$.d3.merge(targets.map(function (t) {
            return t.values.map(function (v) {
                return +v.x;
            });
        }))).values();
        xs = $$.isTimeSeries() ? xs.map(function (x) {
            return new Date(+x);
        }) : xs.map(function (x) {
            return +x;
        });
        return xs.sort(function (a, b) {
            return a < b ? -1 : a > b ? 1 : a >= b ? 0 : NaN;
        });
    };
    c3_chart_internal_fn.addHiddenTargetIds = function (targetIds) {
        this.hiddenTargetIds = this.hiddenTargetIds.concat(targetIds);
    };
    c3_chart_internal_fn.removeHiddenTargetIds = function (targetIds) {
        this.hiddenTargetIds = this.hiddenTargetIds.filter(function (id) {
            return targetIds.indexOf(id) < 0;
        });
    };
    c3_chart_internal_fn.addHiddenLegendIds = function (targetIds) {
        this.hiddenLegendIds = this.hiddenLegendIds.concat(targetIds);
    };
    c3_chart_internal_fn.removeHiddenLegendIds = function (targetIds) {
        this.hiddenLegendIds = this.hiddenLegendIds.filter(function (id) {
            return targetIds.indexOf(id) < 0;
        });
    };
    c3_chart_internal_fn.getValuesAsIdKeyed = function (targets) {
        var ys = {};
        targets.forEach(function (t) {
            ys[t.id] = [];
            t.values.forEach(function (v) {
                ys[t.id].push(v.value);
            });
        });
        return ys;
    };
    c3_chart_internal_fn.checkValueInTargets = function (targets, checker) {
        var ids = Object.keys(targets),
            i,
            j,
            values;
        for (i = 0; i < ids.length; i++) {
            values = targets[ids[i]].values;
            for (j = 0; j < values.length; j++) {
                if (checker(values[j].value)) {
                    return true;
                }
            }
        }
        return false;
    };
    c3_chart_internal_fn.hasNegativeValueInTargets = function (targets) {
        return this.checkValueInTargets(targets, function (v) {
            return v < 0;
        });
    };
    c3_chart_internal_fn.hasPositiveValueInTargets = function (targets) {
        return this.checkValueInTargets(targets, function (v) {
            return v > 0;
        });
    };
    c3_chart_internal_fn.isOrderDesc = function () {
        var config = this.config;
        return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'desc';
    };
    c3_chart_internal_fn.isOrderAsc = function () {
        var config = this.config;
        return typeof config.data_order === 'string' && config.data_order.toLowerCase() === 'asc';
    };
    c3_chart_internal_fn.orderTargets = function (targets) {
        var $$ = this,
            config = $$.config,
            orderAsc = $$.isOrderAsc(),
            orderDesc = $$.isOrderDesc();
        if (orderAsc || orderDesc) {
            targets.sort(function (t1, t2) {
                var reducer = function reducer(p, c) {
                    return p + Math.abs(c.value);
                };
                var t1Sum = t1.values.reduce(reducer, 0),
                    t2Sum = t2.values.reduce(reducer, 0);
                return orderAsc ? t2Sum - t1Sum : t1Sum - t2Sum;
            });
        } else if (isFunction(config.data_order)) {
            targets.sort(config.data_order);
        } // TODO: accept name array for order
        return targets;
    };
    c3_chart_internal_fn.filterByX = function (targets, x) {
        return this.d3.merge(targets.map(function (t) {
            return t.values;
        })).filter(function (v) {
            return v.x - x === 0;
        });
    };
    c3_chart_internal_fn.filterRemoveNull = function (data) {
        return data.filter(function (d) {
            return isValue(d.value);
        });
    };
    c3_chart_internal_fn.filterByXDomain = function (targets, xDomain) {
        return targets.map(function (t) {
            return {
                id: t.id,
                id_org: t.id_org,
                values: t.values.filter(function (v) {
                    return xDomain[0] <= v.x && v.x <= xDomain[1];
                })
            };
        });
    };
    c3_chart_internal_fn.hasDataLabel = function () {
        var config = this.config;
        if (typeof config.data_labels === 'boolean' && config.data_labels) {
            return true;
        } else if (_typeof(config.data_labels) === 'object' && notEmpty(config.data_labels)) {
            return true;
        }
        return false;
    };
    c3_chart_internal_fn.getDataLabelLength = function (min, max, key) {
        var $$ = this,
            lengths = [0, 0],
            paddingCoef = 1.3;
        $$.selectChart.select('svg').selectAll('.dummy').data([min, max]).enter().append('text').text(function (d) {
            return $$.dataLabelFormat(d.id)(d);
        }).each(function (d, i) {
            lengths[i] = this.getBoundingClientRect()[key] * paddingCoef;
        }).remove();
        return lengths;
    };
    c3_chart_internal_fn.isNoneArc = function (d) {
        return this.hasTarget(this.data.targets, d.id);
    }, c3_chart_internal_fn.isArc = function (d) {
        return 'data' in d && this.hasTarget(this.data.targets, d.data.id);
    };
    c3_chart_internal_fn.findSameXOfValues = function (values, index) {
        var i,
            targetX = values[index].x,
            sames = [];
        for (i = index - 1; i >= 0; i--) {
            if (targetX !== values[i].x) {
                break;
            }
            sames.push(values[i]);
        }
        for (i = index; i < values.length; i++) {
            if (targetX !== values[i].x) {
                break;
            }
            sames.push(values[i]);
        }
        return sames;
    };

    c3_chart_internal_fn.findClosestFromTargets = function (targets, pos) {
        var $$ = this,
            candidates;

        // map to array of closest points of each target
        candidates = targets.map(function (target) {
            return $$.findClosest(target.values, pos);
        });

        // decide closest point and return
        return $$.findClosest(candidates, pos);
    };
    c3_chart_internal_fn.findClosest = function (values, pos) {
        var $$ = this,
            minDist = $$.config.point_sensitivity,
            closest;

        // find mouseovering bar
        values.filter(function (v) {
            return v && $$.isBarType(v.id);
        }).forEach(function (v) {
            var shape = $$.main.select('.' + CLASS.bars + $$.getTargetSelectorSuffix(v.id) + ' .' + CLASS.bar + '-' + v.index).node();
            if (!closest && $$.isWithinBar(shape)) {
                closest = v;
            }
        });

        // find closest point from non-bar
        values.filter(function (v) {
            return v && !$$.isBarType(v.id);
        }).forEach(function (v) {
            var d = $$.dist(v, pos);
            if (d < minDist) {
                minDist = d;
                closest = v;
            }
        });

        return closest;
    };
    c3_chart_internal_fn.dist = function (data, pos) {
        var $$ = this,
            config = $$.config,
            xIndex = config.axis_rotated ? 1 : 0,
            yIndex = config.axis_rotated ? 0 : 1,
            y = $$.circleY(data, data.index),
            x = $$.x(data.x);
        return Math.sqrt(Math.pow(x - pos[xIndex], 2) + Math.pow(y - pos[yIndex], 2));
    };
    c3_chart_internal_fn.convertValuesToStep = function (values) {
        var converted = [].concat(values),
            i;

        if (!this.isCategorized()) {
            return values;
        }

        for (i = values.length + 1; 0 < i; i--) {
            converted[i] = converted[i - 1];
        }

        converted[0] = {
            x: converted[0].x - 1,
            value: converted[0].value,
            id: converted[0].id
        };
        converted[values.length + 1] = {
            x: converted[values.length].x + 1,
            value: converted[values.length].value,
            id: converted[values.length].id
        };

        return converted;
    };
    c3_chart_internal_fn.updateDataAttributes = function (name, attrs) {
        var $$ = this,
            config = $$.config,
            current = config['data_' + name];
        if (typeof attrs === 'undefined') {
            return current;
        }
        Object.keys(attrs).forEach(function (id) {
            current[id] = attrs[id];
        });
        $$.redraw({ withLegend: true });
        return current;
    };

    c3_chart_internal_fn.convertUrlToData = function (url, mimeType, headers, keys, done) {
        var $$ = this,
            type = mimeType ? mimeType : 'csv';
        var req = $$.d3.xhr(url);
        if (headers) {
            Object.keys(headers).forEach(function (header) {
                req.header(header, headers[header]);
            });
        }
        req.get(function (error, data) {
            var d;
            if (!data) {
                throw new Error(error.responseURL + ' ' + error.status + ' (' + error.statusText + ')');
            }
            if (type === 'json') {
                d = $$.convertJsonToData(JSON.parse(data.response), keys);
            } else if (type === 'tsv') {
                d = $$.convertTsvToData(data.response);
            } else {
                d = $$.convertCsvToData(data.response);
            }
            done.call($$, d);
        });
    };
    c3_chart_internal_fn.convertXsvToData = function (xsv, parser) {
        var rows = parser.parseRows(xsv),
            d;
        if (rows.length === 1) {
            d = [{}];
            rows[0].forEach(function (id) {
                d[0][id] = null;
            });
        } else {
            d = parser.parse(xsv);
        }
        return d;
    };
    c3_chart_internal_fn.convertCsvToData = function (csv) {
        return this.convertXsvToData(csv, this.d3.csv);
    };
    c3_chart_internal_fn.convertTsvToData = function (tsv) {
        return this.convertXsvToData(tsv, this.d3.tsv);
    };
    c3_chart_internal_fn.convertJsonToData = function (json, keys) {
        var $$ = this,
            new_rows = [],
            targetKeys,
            data;
        if (keys) {
            // when keys specified, json would be an array that includes objects
            if (keys.x) {
                targetKeys = keys.value.concat(keys.x);
                $$.config.data_x = keys.x;
            } else {
                targetKeys = keys.value;
            }
            new_rows.push(targetKeys);
            json.forEach(function (o) {
                var new_row = [];
                targetKeys.forEach(function (key) {
                    // convert undefined to null because undefined data will be removed in convertDataToTargets()
                    var v = $$.findValueInJson(o, key);
                    if (isUndefined(v)) {
                        v = null;
                    }
                    new_row.push(v);
                });
                new_rows.push(new_row);
            });
            data = $$.convertRowsToData(new_rows);
        } else {
            Object.keys(json).forEach(function (key) {
                new_rows.push([key].concat(json[key]));
            });
            data = $$.convertColumnsToData(new_rows);
        }
        return data;
    };
    c3_chart_internal_fn.findValueInJson = function (object, path) {
        path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties (replace [] with .)
        path = path.replace(/^\./, ''); // strip a leading dot
        var pathArray = path.split('.');
        for (var i = 0; i < pathArray.length; ++i) {
            var k = pathArray[i];
            if (k in object) {
                object = object[k];
            } else {
                return;
            }
        }
        return object;
    };
    c3_chart_internal_fn.convertRowsToData = function (rows) {
        var keys = rows[0],
            new_row = {},
            new_rows = [],
            i,
            j;
        for (i = 1; i < rows.length; i++) {
            new_row = {};
            for (j = 0; j < rows[i].length; j++) {
                if (isUndefined(rows[i][j])) {
                    throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
                }
                new_row[keys[j]] = rows[i][j];
            }
            new_rows.push(new_row);
        }
        return new_rows;
    };
    c3_chart_internal_fn.convertColumnsToData = function (columns) {
        var new_rows = [],
            i,
            j,
            key;
        for (i = 0; i < columns.length; i++) {
            key = columns[i][0];
            for (j = 1; j < columns[i].length; j++) {
                if (isUndefined(new_rows[j - 1])) {
                    new_rows[j - 1] = {};
                }
                if (isUndefined(columns[i][j])) {
                    throw new Error("Source data is missing a component at (" + i + "," + j + ")!");
                }
                new_rows[j - 1][key] = columns[i][j];
            }
        }
        return new_rows;
    };
    c3_chart_internal_fn.convertDataToTargets = function (data, appendXs) {
        var $$ = this,
            config = $$.config,
            ids = $$.d3.keys(data[0]).filter($$.isNotX, $$),
            xs = $$.d3.keys(data[0]).filter($$.isX, $$),
            targets;

        // save x for update data by load when custom x and c3.x API
        ids.forEach(function (id) {
            var xKey = $$.getXKey(id);

            if ($$.isCustomX() || $$.isTimeSeries()) {
                // if included in input data
                if (xs.indexOf(xKey) >= 0) {
                    $$.data.xs[id] = (appendXs && $$.data.xs[id] ? $$.data.xs[id] : []).concat(data.map(function (d) {
                        return d[xKey];
                    }).filter(isValue).map(function (rawX, i) {
                        return $$.generateTargetX(rawX, id, i);
                    }));
                }
                // if not included in input data, find from preloaded data of other id's x
                else if (config.data_x) {
                        $$.data.xs[id] = $$.getOtherTargetXs();
                    }
                    // if not included in input data, find from preloaded data
                    else if (notEmpty(config.data_xs)) {
                            $$.data.xs[id] = $$.getXValuesOfXKey(xKey, $$.data.targets);
                        }
                // MEMO: if no x included, use same x of current will be used
            } else {
                $$.data.xs[id] = data.map(function (d, i) {
                    return i;
                });
            }
        });

        // check x is defined
        ids.forEach(function (id) {
            if (!$$.data.xs[id]) {
                throw new Error('x is not defined for id = "' + id + '".');
            }
        });

        // convert to target
        targets = ids.map(function (id, index) {
            var convertedId = config.data_idConverter(id);
            return {
                id: convertedId,
                id_org: id,
                values: data.map(function (d, i) {
                    var xKey = $$.getXKey(id),
                        rawX = d[xKey],
                        value = d[id] !== null && !isNaN(d[id]) ? +d[id] : null,
                        x;
                    // use x as categories if custom x and categorized
                    if ($$.isCustomX() && $$.isCategorized() && index === 0 && !isUndefined(rawX)) {
                        if (index === 0 && i === 0) {
                            config.axis_x_categories = [];
                        }
                        x = config.axis_x_categories.indexOf(rawX);
                        if (x === -1) {
                            x = config.axis_x_categories.length;
                            config.axis_x_categories.push(rawX);
                        }
                    } else {
                        x = $$.generateTargetX(rawX, id, i);
                    }
                    // mark as x = undefined if value is undefined and filter to remove after mapped
                    if (isUndefined(d[id]) || $$.data.xs[id].length <= i) {
                        x = undefined;
                    }
                    return { x: x, value: value, id: convertedId };
                }).filter(function (v) {
                    return isDefined(v.x);
                })
            };
        });

        // finish targets
        targets.forEach(function (t) {
            var i;
            // sort values by its x
            if (config.data_xSort) {
                t.values = t.values.sort(function (v1, v2) {
                    var x1 = v1.x || v1.x === 0 ? v1.x : Infinity,
                        x2 = v2.x || v2.x === 0 ? v2.x : Infinity;
                    return x1 - x2;
                });
            }
            // indexing each value
            i = 0;
            t.values.forEach(function (v) {
                v.index = i++;
            });
            // this needs to be sorted because its index and value.index is identical
            $$.data.xs[t.id].sort(function (v1, v2) {
                return v1 - v2;
            });
        });

        // cache information about values
        $$.hasNegativeValue = $$.hasNegativeValueInTargets(targets);
        $$.hasPositiveValue = $$.hasPositiveValueInTargets(targets);

        // set target types
        if (config.data_type) {
            $$.setTargetType($$.mapToIds(targets).filter(function (id) {
                return !(id in config.data_types);
            }), config.data_type);
        }

        // cache as original id keyed
        targets.forEach(function (d) {
            $$.addCache(d.id_org, d);
        });

        return targets;
    };

    c3_chart_internal_fn.load = function (targets, args) {
        var $$ = this;
        if (targets) {
            // filter loading targets if needed
            if (args.filter) {
                targets = targets.filter(args.filter);
            }
            // set type if args.types || args.type specified
            if (args.type || args.types) {
                targets.forEach(function (t) {
                    var type = args.types && args.types[t.id] ? args.types[t.id] : args.type;
                    $$.setTargetType(t.id, type);
                });
            }
            // Update/Add data
            $$.data.targets.forEach(function (d) {
                for (var i = 0; i < targets.length; i++) {
                    if (d.id === targets[i].id) {
                        d.values = targets[i].values;
                        targets.splice(i, 1);
                        break;
                    }
                }
            });
            $$.data.targets = $$.data.targets.concat(targets); // add remained
        }

        // Set targets
        $$.updateTargets($$.data.targets);

        // Redraw with new targets
        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });

        if (args.done) {
            args.done();
        }
    };
    c3_chart_internal_fn.loadFromArgs = function (args) {
        var $$ = this;
        if (args.data) {
            $$.load($$.convertDataToTargets(args.data), args);
        } else if (args.url) {
            $$.convertUrlToData(args.url, args.mimeType, args.headers, args.keys, function (data) {
                $$.load($$.convertDataToTargets(data), args);
            });
        } else if (args.json) {
            $$.load($$.convertDataToTargets($$.convertJsonToData(args.json, args.keys)), args);
        } else if (args.rows) {
            $$.load($$.convertDataToTargets($$.convertRowsToData(args.rows)), args);
        } else if (args.columns) {
            $$.load($$.convertDataToTargets($$.convertColumnsToData(args.columns)), args);
        } else {
            $$.load(null, args);
        }
    };
    c3_chart_internal_fn.unload = function (targetIds, done) {
        var $$ = this;
        if (!done) {
            done = function done() {};
        }
        // filter existing target
        targetIds = targetIds.filter(function (id) {
            return $$.hasTarget($$.data.targets, id);
        });
        // If no target, call done and return
        if (!targetIds || targetIds.length === 0) {
            done();
            return;
        }
        $$.svg.selectAll(targetIds.map(function (id) {
            return $$.selectorTarget(id);
        })).transition().style('opacity', 0).remove().call($$.endall, done);
        targetIds.forEach(function (id) {
            // Reset fadein for future load
            $$.withoutFadeIn[id] = false;
            // Remove target's elements
            if ($$.legend) {
                $$.legend.selectAll('.' + CLASS.legendItem + $$.getTargetSelectorSuffix(id)).remove();
            }
            // Remove target
            $$.data.targets = $$.data.targets.filter(function (t) {
                return t.id !== id;
            });
        });
    };

    c3_chart_internal_fn.categoryName = function (i) {
        var config = this.config;
        return i < config.axis_x_categories.length ? config.axis_x_categories[i] : i;
    };

    c3_chart_internal_fn.initEventRect = function () {
        var $$ = this;
        $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.eventRects).style('fill-opacity', 0);
    };
    c3_chart_internal_fn.redrawEventRect = function () {
        var $$ = this,
            config = $$.config,
            eventRectUpdate,
            maxDataCountTarget,
            isMultipleX = $$.isMultipleX();

        // rects for mouseover
        var eventRects = $$.main.select('.' + CLASS.eventRects).style('cursor', config.zoom_enabled ? config.axis_rotated ? 'ns-resize' : 'ew-resize' : null).classed(CLASS.eventRectsMultiple, isMultipleX).classed(CLASS.eventRectsSingle, !isMultipleX);

        // clear old rects
        eventRects.selectAll('.' + CLASS.eventRect).remove();

        // open as public variable
        $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);

        if (isMultipleX) {
            eventRectUpdate = $$.eventRect.data([0]);
            // enter : only one rect will be added
            $$.generateEventRectsForMultipleXs(eventRectUpdate.enter());
            // update
            $$.updateEventRect(eventRectUpdate);
            // exit : not needed because always only one rect exists
        } else {
            // Set data and update $$.eventRect
            maxDataCountTarget = $$.getMaxDataCountTarget($$.data.targets);
            eventRects.datum(maxDataCountTarget ? maxDataCountTarget.values : []);
            $$.eventRect = eventRects.selectAll('.' + CLASS.eventRect);
            eventRectUpdate = $$.eventRect.data(function (d) {
                return d;
            });
            // enter
            $$.generateEventRectsForSingleX(eventRectUpdate.enter());
            // update
            $$.updateEventRect(eventRectUpdate);
            // exit
            eventRectUpdate.exit().remove();
        }
    };
    c3_chart_internal_fn.updateEventRect = function (eventRectUpdate) {
        var $$ = this,
            config = $$.config,
            x,
            y,
            w,
            h,
            rectW,
            rectX;

        // set update selection if null
        eventRectUpdate = eventRectUpdate || $$.eventRect.data(function (d) {
            return d;
        });

        if ($$.isMultipleX()) {
            // TODO: rotated not supported yet
            x = 0;
            y = 0;
            w = $$.width;
            h = $$.height;
        } else {
            if (($$.isCustomX() || $$.isTimeSeries()) && !$$.isCategorized()) {

                // update index for x that is used by prevX and nextX
                $$.updateXs();

                rectW = function rectW(d) {
                    var prevX = $$.getPrevX(d.index),
                        nextX = $$.getNextX(d.index);

                    // if there this is a single data point make the eventRect full width (or height)
                    if (prevX === null && nextX === null) {
                        return config.axis_rotated ? $$.height : $$.width;
                    }

                    if (prevX === null) {
                        prevX = $$.x.domain()[0];
                    }
                    if (nextX === null) {
                        nextX = $$.x.domain()[1];
                    }

                    return Math.max(0, ($$.x(nextX) - $$.x(prevX)) / 2);
                };
                rectX = function rectX(d) {
                    var prevX = $$.getPrevX(d.index),
                        nextX = $$.getNextX(d.index),
                        thisX = $$.data.xs[d.id][d.index];

                    // if there this is a single data point position the eventRect at 0
                    if (prevX === null && nextX === null) {
                        return 0;
                    }

                    if (prevX === null) {
                        prevX = $$.x.domain()[0];
                    }

                    return ($$.x(thisX) + $$.x(prevX)) / 2;
                };
            } else {
                rectW = $$.getEventRectWidth();
                rectX = function rectX(d) {
                    return $$.x(d.x) - rectW / 2;
                };
            }
            x = config.axis_rotated ? 0 : rectX;
            y = config.axis_rotated ? rectX : 0;
            w = config.axis_rotated ? $$.width : rectW;
            h = config.axis_rotated ? rectW : $$.height;
        }

        eventRectUpdate.attr('class', $$.classEvent.bind($$)).attr("x", x).attr("y", y).attr("width", w).attr("height", h);
    };
    c3_chart_internal_fn.generateEventRectsForSingleX = function (eventRectEnter) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config;
        eventRectEnter.append("rect").attr("class", $$.classEvent.bind($$)).style("cursor", config.data_selection_enabled && config.data_selection_grouped ? "pointer" : null).on('mouseover', function (d) {
            var index = d.index;

            if ($$.dragging || $$.flowing) {
                return;
            } // do nothing while dragging/flowing
            if ($$.hasArcType()) {
                return;
            }

            // Expand shapes for selection
            if (config.point_focus_expand_enabled) {
                $$.expandCircles(index, null, true);
            }
            $$.expandBars(index, null, true);

            // Call event handler
            $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
                config.data_onmouseover.call($$.api, d);
            });
        }).on('mouseout', function (d) {
            var index = d.index;
            if (!$$.config) {
                return;
            } // chart is destroyed
            if ($$.hasArcType()) {
                return;
            }
            $$.hideXGridFocus();
            $$.hideTooltip();
            // Undo expanded shapes
            $$.unexpandCircles();
            $$.unexpandBars();
            // Call event handler
            $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
                config.data_onmouseout.call($$.api, d);
            });
        }).on('mousemove', function (d) {
            var selectedData,
                index = d.index,
                eventRect = $$.svg.select('.' + CLASS.eventRect + '-' + index);

            if ($$.dragging || $$.flowing) {
                return;
            } // do nothing while dragging/flowing
            if ($$.hasArcType()) {
                return;
            }

            if ($$.isStepType(d) && $$.config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
                index -= 1;
            }

            // Show tooltip
            selectedData = $$.filterTargetsToShow($$.data.targets).map(function (t) {
                return $$.addName($$.getValueOnIndex(t.values, index));
            });

            if (config.tooltip_grouped) {
                $$.showTooltip(selectedData, this);
                $$.showXGridFocus(selectedData);
            }

            if (config.tooltip_grouped && (!config.data_selection_enabled || config.data_selection_grouped)) {
                return;
            }

            $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function () {
                d3.select(this).classed(CLASS.EXPANDED, true);
                if (config.data_selection_enabled) {
                    eventRect.style('cursor', config.data_selection_grouped ? 'pointer' : null);
                }
                if (!config.tooltip_grouped) {
                    $$.hideXGridFocus();
                    $$.hideTooltip();
                    if (!config.data_selection_grouped) {
                        $$.unexpandCircles(index);
                        $$.unexpandBars(index);
                    }
                }
            }).filter(function (d) {
                return $$.isWithinShape(this, d);
            }).each(function (d) {
                if (config.data_selection_enabled && (config.data_selection_grouped || config.data_selection_isselectable(d))) {
                    eventRect.style('cursor', 'pointer');
                }
                if (!config.tooltip_grouped) {
                    $$.showTooltip([d], this);
                    $$.showXGridFocus([d]);
                    if (config.point_focus_expand_enabled) {
                        $$.expandCircles(index, d.id, true);
                    }
                    $$.expandBars(index, d.id, true);
                }
            });
        }).on('click', function (d) {
            var index = d.index;
            if ($$.hasArcType() || !$$.toggleShape) {
                return;
            }
            if ($$.cancelClick) {
                $$.cancelClick = false;
                return;
            }
            if ($$.isStepType(d) && config.line_step_type === 'step-after' && d3.mouse(this)[0] < $$.x($$.getXValue(d.id, index))) {
                index -= 1;
            }
            $$.main.selectAll('.' + CLASS.shape + '-' + index).each(function (d) {
                if (config.data_selection_grouped || $$.isWithinShape(this, d)) {
                    $$.toggleShape(this, d, index);
                    $$.config.data_onclick.call($$.api, d, this);
                }
            });
        }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
            $$.drag(d3.mouse(this));
        }).on('dragstart', function () {
            $$.dragstart(d3.mouse(this));
        }).on('dragend', function () {
            $$.dragend();
        }) : function () {});
    };

    c3_chart_internal_fn.generateEventRectsForMultipleXs = function (eventRectEnter) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config;

        function mouseout() {
            $$.svg.select('.' + CLASS.eventRect).style('cursor', null);
            $$.hideXGridFocus();
            $$.hideTooltip();
            $$.unexpandCircles();
            $$.unexpandBars();
        }

        eventRectEnter.append('rect').attr('x', 0).attr('y', 0).attr('width', $$.width).attr('height', $$.height).attr('class', CLASS.eventRect).on('mouseout', function () {
            if (!$$.config) {
                return;
            } // chart is destroyed
            if ($$.hasArcType()) {
                return;
            }
            mouseout();
        }).on('mousemove', function () {
            var targetsToShow = $$.filterTargetsToShow($$.data.targets);
            var mouse, closest, sameXData, selectedData;

            if ($$.dragging) {
                return;
            } // do nothing when dragging
            if ($$.hasArcType(targetsToShow)) {
                return;
            }

            mouse = d3.mouse(this);
            closest = $$.findClosestFromTargets(targetsToShow, mouse);

            if ($$.mouseover && (!closest || closest.id !== $$.mouseover.id)) {
                config.data_onmouseout.call($$.api, $$.mouseover);
                $$.mouseover = undefined;
            }

            if (!closest) {
                mouseout();
                return;
            }

            if ($$.isScatterType(closest) || !config.tooltip_grouped) {
                sameXData = [closest];
            } else {
                sameXData = $$.filterByX(targetsToShow, closest.x);
            }

            // show tooltip when cursor is close to some point
            selectedData = sameXData.map(function (d) {
                return $$.addName(d);
            });
            $$.showTooltip(selectedData, this);

            // expand points
            if (config.point_focus_expand_enabled) {
                $$.expandCircles(closest.index, closest.id, true);
            }
            $$.expandBars(closest.index, closest.id, true);

            // Show xgrid focus line
            $$.showXGridFocus(selectedData);

            // Show cursor as pointer if point is close to mouse position
            if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
                $$.svg.select('.' + CLASS.eventRect).style('cursor', 'pointer');
                if (!$$.mouseover) {
                    config.data_onmouseover.call($$.api, closest);
                    $$.mouseover = closest;
                }
            }
        }).on('click', function () {
            var targetsToShow = $$.filterTargetsToShow($$.data.targets);
            var mouse, closest;
            if ($$.hasArcType(targetsToShow)) {
                return;
            }

            mouse = d3.mouse(this);
            closest = $$.findClosestFromTargets(targetsToShow, mouse);
            if (!closest) {
                return;
            }
            // select if selection enabled
            if ($$.isBarType(closest.id) || $$.dist(closest, mouse) < config.point_sensitivity) {
                $$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(closest.id)).selectAll('.' + CLASS.shape + '-' + closest.index).each(function () {
                    if (config.data_selection_grouped || $$.isWithinShape(this, closest)) {
                        $$.toggleShape(this, closest, closest.index);
                        $$.config.data_onclick.call($$.api, closest, this);
                    }
                });
            }
        }).call(config.data_selection_draggable && $$.drag ? d3.behavior.drag().origin(Object).on('drag', function () {
            $$.drag(d3.mouse(this));
        }).on('dragstart', function () {
            $$.dragstart(d3.mouse(this));
        }).on('dragend', function () {
            $$.dragend();
        }) : function () {});
    };
    c3_chart_internal_fn.dispatchEvent = function (type, index, mouse) {
        var $$ = this,
            selector = '.' + CLASS.eventRect + (!$$.isMultipleX() ? '-' + index : ''),
            eventRect = $$.main.select(selector).node(),
            box = eventRect.getBoundingClientRect(),
            x = box.left + (mouse ? mouse[0] : 0),
            y = box.top + (mouse ? mouse[1] : 0),
            event = document.createEvent("MouseEvents");

        event.initMouseEvent(type, true, true, window, 0, x, y, x, y, false, false, false, false, 0, null);
        eventRect.dispatchEvent(event);
    };

    c3_chart_internal_fn.getCurrentWidth = function () {
        var $$ = this,
            config = $$.config;
        return config.size_width ? config.size_width : $$.getParentWidth();
    };
    c3_chart_internal_fn.getCurrentHeight = function () {
        var $$ = this,
            config = $$.config,
            h = config.size_height ? config.size_height : $$.getParentHeight();
        return h > 0 ? h : 320 / ($$.hasType('gauge') && !config.gauge_fullCircle ? 2 : 1);
    };
    c3_chart_internal_fn.getCurrentPaddingTop = function () {
        var $$ = this,
            config = $$.config,
            padding = isValue(config.padding_top) ? config.padding_top : 0;
        if ($$.title && $$.title.node()) {
            padding += $$.getTitlePadding();
        }
        return padding;
    };
    c3_chart_internal_fn.getCurrentPaddingBottom = function () {
        var config = this.config;
        return isValue(config.padding_bottom) ? config.padding_bottom : 0;
    };
    c3_chart_internal_fn.getCurrentPaddingLeft = function (withoutRecompute) {
        var $$ = this,
            config = $$.config;
        if (isValue(config.padding_left)) {
            return config.padding_left;
        } else if (config.axis_rotated) {
            return !config.axis_x_show ? 1 : Math.max(ceil10($$.getAxisWidthByAxisId('x', withoutRecompute)), 40);
        } else if (!config.axis_y_show || config.axis_y_inner) {
            // && !config.axis_rotated
            return $$.axis.getYAxisLabelPosition().isOuter ? 30 : 1;
        } else {
            return ceil10($$.getAxisWidthByAxisId('y', withoutRecompute));
        }
    };
    c3_chart_internal_fn.getCurrentPaddingRight = function () {
        var $$ = this,
            config = $$.config,
            defaultPadding = 10,
            legendWidthOnRight = $$.isLegendRight ? $$.getLegendWidth() + 20 : 0;
        if (isValue(config.padding_right)) {
            return config.padding_right + 1; // 1 is needed not to hide tick line
        } else if (config.axis_rotated) {
            return defaultPadding + legendWidthOnRight;
        } else if (!config.axis_y2_show || config.axis_y2_inner) {
            // && !config.axis_rotated
            return 2 + legendWidthOnRight + ($$.axis.getY2AxisLabelPosition().isOuter ? 20 : 0);
        } else {
            return ceil10($$.getAxisWidthByAxisId('y2')) + legendWidthOnRight;
        }
    };

    c3_chart_internal_fn.getParentRectValue = function (key) {
        var parent = this.selectChart.node(),
            v;
        while (parent && parent.tagName !== 'BODY') {
            try {
                v = parent.getBoundingClientRect()[key];
            } catch (e) {
                if (key === 'width') {
                    // In IE in certain cases getBoundingClientRect
                    // will cause an "unspecified error"
                    v = parent.offsetWidth;
                }
            }
            if (v) {
                break;
            }
            parent = parent.parentNode;
        }
        return v;
    };
    c3_chart_internal_fn.getParentWidth = function () {
        return this.getParentRectValue('width');
    };
    c3_chart_internal_fn.getParentHeight = function () {
        var h = this.selectChart.style('height');
        return h.indexOf('px') > 0 ? +h.replace('px', '') : 0;
    };

    c3_chart_internal_fn.getSvgLeft = function (withoutRecompute) {
        var $$ = this,
            config = $$.config,
            hasLeftAxisRect = config.axis_rotated || !config.axis_rotated && !config.axis_y_inner,
            leftAxisClass = config.axis_rotated ? CLASS.axisX : CLASS.axisY,
            leftAxis = $$.main.select('.' + leftAxisClass).node(),
            svgRect = leftAxis && hasLeftAxisRect ? leftAxis.getBoundingClientRect() : { right: 0 },
            chartRect = $$.selectChart.node().getBoundingClientRect(),
            hasArc = $$.hasArcType(),
            svgLeft = svgRect.right - chartRect.left - (hasArc ? 0 : $$.getCurrentPaddingLeft(withoutRecompute));
        return svgLeft > 0 ? svgLeft : 0;
    };

    c3_chart_internal_fn.getAxisWidthByAxisId = function (id, withoutRecompute) {
        var $$ = this,
            position = $$.axis.getLabelPositionById(id);
        return $$.axis.getMaxTickWidth(id, withoutRecompute) + (position.isInner ? 20 : 40);
    };
    c3_chart_internal_fn.getHorizontalAxisHeight = function (axisId) {
        var $$ = this,
            config = $$.config,
            h = 30;
        if (axisId === 'x' && !config.axis_x_show) {
            return 8;
        }
        if (axisId === 'x' && config.axis_x_height) {
            return config.axis_x_height;
        }
        if (axisId === 'y' && !config.axis_y_show) {
            return config.legend_show && !$$.isLegendRight && !$$.isLegendInset ? 10 : 1;
        }
        if (axisId === 'y2' && !config.axis_y2_show) {
            return $$.rotated_padding_top;
        }
        // Calculate x axis height when tick rotated
        if (axisId === 'x' && !config.axis_rotated && config.axis_x_tick_rotate) {
            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_x_tick_rotate) / 180);
        }
        // Calculate y axis height when tick rotated
        if (axisId === 'y' && config.axis_rotated && config.axis_y_tick_rotate) {
            h = 30 + $$.axis.getMaxTickWidth(axisId) * Math.cos(Math.PI * (90 - config.axis_y_tick_rotate) / 180);
        }
        return h + ($$.axis.getLabelPositionById(axisId).isInner ? 0 : 10) + (axisId === 'y2' ? -10 : 0);
    };

    c3_chart_internal_fn.getEventRectWidth = function () {
        return Math.max(0, this.xAxis.tickInterval());
    };

    c3_chart_internal_fn.getShapeIndices = function (typeFilter) {
        var $$ = this,
            config = $$.config,
            indices = {},
            i = 0,
            j,
            k;
        $$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$)).forEach(function (d) {
            for (j = 0; j < config.data_groups.length; j++) {
                if (config.data_groups[j].indexOf(d.id) < 0) {
                    continue;
                }
                for (k = 0; k < config.data_groups[j].length; k++) {
                    if (config.data_groups[j][k] in indices) {
                        indices[d.id] = indices[config.data_groups[j][k]];
                        break;
                    }
                }
            }
            if (isUndefined(indices[d.id])) {
                indices[d.id] = i++;
            }
        });
        indices.__max__ = i - 1;
        return indices;
    };
    c3_chart_internal_fn.getShapeX = function (offset, targetsNum, indices, isSub) {
        var $$ = this,
            scale = isSub ? $$.subX : $$.x;
        return function (d) {
            var index = d.id in indices ? indices[d.id] : 0;
            return d.x || d.x === 0 ? scale(d.x) - offset * (targetsNum / 2 - index) : 0;
        };
    };
    c3_chart_internal_fn.getShapeY = function (isSub) {
        var $$ = this;
        return function (d) {
            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id);
            return scale(d.value);
        };
    };
    c3_chart_internal_fn.getShapeOffset = function (typeFilter, indices, isSub) {
        var $$ = this,
            targets = $$.orderTargets($$.filterTargetsToShow($$.data.targets.filter(typeFilter, $$))),
            targetIds = targets.map(function (t) {
            return t.id;
        });
        return function (d, i) {
            var scale = isSub ? $$.getSubYScale(d.id) : $$.getYScale(d.id),
                y0 = scale(0),
                offset = y0;
            targets.forEach(function (t) {
                var values = $$.isStepType(d) ? $$.convertValuesToStep(t.values) : t.values;
                if (t.id === d.id || indices[t.id] !== indices[d.id]) {
                    return;
                }
                if (targetIds.indexOf(t.id) < targetIds.indexOf(d.id)) {
                    // check if the x values line up
                    if (typeof values[i] === 'undefined' || +values[i].x !== +d.x) {
                        // "+" for timeseries
                        // if not, try to find the value that does line up
                        i = -1;
                        values.forEach(function (v, j) {
                            if (v.x === d.x) {
                                i = j;
                            }
                        });
                    }
                    if (i in values && values[i].value * d.value >= 0) {
                        offset += scale(values[i].value) - y0;
                    }
                }
            });
            return offset;
        };
    };
    c3_chart_internal_fn.isWithinShape = function (that, d) {
        var $$ = this,
            shape = $$.d3.select(that),
            isWithin;
        if (!$$.isTargetToShow(d.id)) {
            isWithin = false;
        } else if (that.nodeName === 'circle') {
            isWithin = $$.isStepType(d) ? $$.isWithinStep(that, $$.getYScale(d.id)(d.value)) : $$.isWithinCircle(that, $$.pointSelectR(d) * 1.5);
        } else if (that.nodeName === 'path') {
            isWithin = shape.classed(CLASS.bar) ? $$.isWithinBar(that) : true;
        }
        return isWithin;
    };

    c3_chart_internal_fn.getInterpolate = function (d) {
        var $$ = this,
            interpolation = $$.isInterpolationType($$.config.spline_interpolation_type) ? $$.config.spline_interpolation_type : 'cardinal';
        return $$.isSplineType(d) ? interpolation : $$.isStepType(d) ? $$.config.line_step_type : "linear";
    };

    c3_chart_internal_fn.initLine = function () {
        var $$ = this;
        $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);
    };
    c3_chart_internal_fn.updateTargetsForLine = function (targets) {
        var $$ = this,
            config = $$.config,
            mainLineUpdate,
            mainLineEnter,
            classChartLine = $$.classChartLine.bind($$),
            classLines = $$.classLines.bind($$),
            classAreas = $$.classAreas.bind($$),
            classCircles = $$.classCircles.bind($$),
            classFocus = $$.classFocus.bind($$);
        mainLineUpdate = $$.main.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', function (d) {
            return classChartLine(d) + classFocus(d);
        });
        mainLineEnter = mainLineUpdate.enter().append('g').attr('class', classChartLine).style('opacity', 0).style("pointer-events", "none");
        // Lines for each data
        mainLineEnter.append('g').attr("class", classLines);
        // Areas
        mainLineEnter.append('g').attr('class', classAreas);
        // Circles for each data point on lines
        mainLineEnter.append('g').attr("class", function (d) {
            return $$.generateClass(CLASS.selectedCircles, d.id);
        });
        mainLineEnter.append('g').attr("class", classCircles).style("cursor", function (d) {
            return config.data_selection_isselectable(d) ? "pointer" : null;
        });
        // Update date for selected circles
        targets.forEach(function (t) {
            $$.main.selectAll('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(t.id)).selectAll('.' + CLASS.selectedCircle).each(function (d) {
                d.value = t.values[d.index].value;
            });
        });
        // MEMO: can not keep same color...
        //mainLineUpdate.exit().remove();
    };
    c3_chart_internal_fn.updateLine = function (durationForExit) {
        var $$ = this;
        $$.mainLine = $$.main.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
        $$.mainLine.enter().append('path').attr('class', $$.classLine.bind($$)).style("stroke", $$.color);
        $$.mainLine.style("opacity", $$.initialOpacity.bind($$)).style('shape-rendering', function (d) {
            return $$.isStepType(d) ? 'crispEdges' : '';
        }).attr('transform', null);
        $$.mainLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawLine = function (drawLine, withTransition) {
        return [(withTransition ? this.mainLine.transition(Math.random().toString()) : this.mainLine).attr("d", drawLine).style("stroke", this.color).style("opacity", 1)];
    };
    c3_chart_internal_fn.generateDrawLine = function (lineIndices, isSub) {
        var $$ = this,
            config = $$.config,
            line = $$.d3.svg.line(),
            getPoints = $$.generateGetLinePoints(lineIndices, isSub),
            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
            xValue = function xValue(d) {
            return (isSub ? $$.subxx : $$.xx).call($$, d);
        },
            yValue = function yValue(d, i) {
            return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)(d.value);
        };

        line = config.axis_rotated ? line.x(yValue).y(xValue) : line.x(xValue).y(yValue);
        if (!config.line_connectNull) {
            line = line.defined(function (d) {
                return d.value != null;
            });
        }
        return function (d) {
            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
                x = isSub ? $$.x : $$.subX,
                y = yScaleGetter.call($$, d.id),
                x0 = 0,
                y0 = 0,
                path;
            if ($$.isLineType(d)) {
                if (config.data_regions[d.id]) {
                    path = $$.lineWithRegions(values, x, y, config.data_regions[d.id]);
                } else {
                    if ($$.isStepType(d)) {
                        values = $$.convertValuesToStep(values);
                    }
                    path = line.interpolate($$.getInterpolate(d))(values);
                }
            } else {
                if (values[0]) {
                    x0 = x(values[0].x);
                    y0 = y(values[0].value);
                }
                path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
            }
            return path ? path : "M 0 0";
        };
    };
    c3_chart_internal_fn.generateGetLinePoints = function (lineIndices, isSub) {
        // partial duplication of generateGetBarPoints
        var $$ = this,
            config = $$.config,
            lineTargetsNum = lineIndices.__max__ + 1,
            x = $$.getShapeX(0, lineTargetsNum, lineIndices, !!isSub),
            y = $$.getShapeY(!!isSub),
            lineOffset = $$.getShapeOffset($$.isLineType, lineIndices, !!isSub),
            yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function (d, i) {
            var y0 = yScale.call($$, d.id)(0),
                offset = lineOffset(d, i) || y0,
                // offset is for stacked area chart
            posX = x(d),
                posY = y(d);
            // fix posY not to overflow opposite quadrant
            if (config.axis_rotated) {
                if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                    posY = y0;
                }
            }
            // 1 point that marks the line position
            return [[posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
            [posX, posY - (y0 - offset)], // needed for compatibility
            [posX, posY - (y0 - offset)] // needed for compatibility
            ];
        };
    };

    c3_chart_internal_fn.lineWithRegions = function (d, x, y, _regions) {
        var $$ = this,
            config = $$.config,
            prev = -1,
            i,
            j,
            s = "M",
            sWithRegion,
            xp,
            yp,
            dx,
            dy,
            dd,
            diff,
            diffx2,
            xOffset = $$.isCategorized() ? 0.5 : 0,
            xValue,
            yValue,
            regions = [];

        function isWithinRegions(x, regions) {
            var i;
            for (i = 0; i < regions.length; i++) {
                if (regions[i].start < x && x <= regions[i].end) {
                    return true;
                }
            }
            return false;
        }

        // Check start/end of regions
        if (isDefined(_regions)) {
            for (i = 0; i < _regions.length; i++) {
                regions[i] = {};
                if (isUndefined(_regions[i].start)) {
                    regions[i].start = d[0].x;
                } else {
                    regions[i].start = $$.isTimeSeries() ? $$.parseDate(_regions[i].start) : _regions[i].start;
                }
                if (isUndefined(_regions[i].end)) {
                    regions[i].end = d[d.length - 1].x;
                } else {
                    regions[i].end = $$.isTimeSeries() ? $$.parseDate(_regions[i].end) : _regions[i].end;
                }
            }
        }

        // Set scales
        xValue = config.axis_rotated ? function (d) {
            return y(d.value);
        } : function (d) {
            return x(d.x);
        };
        yValue = config.axis_rotated ? function (d) {
            return x(d.x);
        } : function (d) {
            return y(d.value);
        };

        // Define svg generator function for region
        function generateM(points) {
            return 'M' + points[0][0] + ' ' + points[0][1] + ' ' + points[1][0] + ' ' + points[1][1];
        }
        if ($$.isTimeSeries()) {
            sWithRegion = function sWithRegion(d0, d1, j, diff) {
                var x0 = d0.x.getTime(),
                    x_diff = d1.x - d0.x,
                    xv0 = new Date(x0 + x_diff * j),
                    xv1 = new Date(x0 + x_diff * (j + diff)),
                    points;
                if (config.axis_rotated) {
                    points = [[y(yp(j)), x(xv0)], [y(yp(j + diff)), x(xv1)]];
                } else {
                    points = [[x(xv0), y(yp(j))], [x(xv1), y(yp(j + diff))]];
                }
                return generateM(points);
            };
        } else {
            sWithRegion = function sWithRegion(d0, d1, j, diff) {
                var points;
                if (config.axis_rotated) {
                    points = [[y(yp(j), true), x(xp(j))], [y(yp(j + diff), true), x(xp(j + diff))]];
                } else {
                    points = [[x(xp(j), true), y(yp(j))], [x(xp(j + diff), true), y(yp(j + diff))]];
                }
                return generateM(points);
            };
        }

        // Generate
        for (i = 0; i < d.length; i++) {

            // Draw as normal
            if (isUndefined(regions) || !isWithinRegions(d[i].x, regions)) {
                s += " " + xValue(d[i]) + " " + yValue(d[i]);
            }
            // Draw with region // TODO: Fix for horizotal charts
            else {
                    xp = $$.getScale(d[i - 1].x + xOffset, d[i].x + xOffset, $$.isTimeSeries());
                    yp = $$.getScale(d[i - 1].value, d[i].value);

                    dx = x(d[i].x) - x(d[i - 1].x);
                    dy = y(d[i].value) - y(d[i - 1].value);
                    dd = Math.sqrt(Math.pow(dx, 2) + Math.pow(dy, 2));
                    diff = 2 / dd;
                    diffx2 = diff * 2;

                    for (j = diff; j <= 1; j += diffx2) {
                        s += sWithRegion(d[i - 1], d[i], j, diff);
                    }
                }
            prev = d[i].x;
        }

        return s;
    };

    c3_chart_internal_fn.updateArea = function (durationForExit) {
        var $$ = this,
            d3 = $$.d3;
        $$.mainArea = $$.main.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
        $$.mainArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
            $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
        });
        $$.mainArea.style("opacity", $$.orgAreaOpacity);
        $$.mainArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawArea = function (drawArea, withTransition) {
        return [(withTransition ? this.mainArea.transition(Math.random().toString()) : this.mainArea).attr("d", drawArea).style("fill", this.color).style("opacity", this.orgAreaOpacity)];
    };
    c3_chart_internal_fn.generateDrawArea = function (areaIndices, isSub) {
        var $$ = this,
            config = $$.config,
            area = $$.d3.svg.area(),
            getPoints = $$.generateGetAreaPoints(areaIndices, isSub),
            yScaleGetter = isSub ? $$.getSubYScale : $$.getYScale,
            xValue = function xValue(d) {
            return (isSub ? $$.subxx : $$.xx).call($$, d);
        },
            value0 = function value0(d, i) {
            return config.data_groups.length > 0 ? getPoints(d, i)[0][1] : yScaleGetter.call($$, d.id)($$.getAreaBaseValue(d.id));
        },
            value1 = function value1(d, i) {
            return config.data_groups.length > 0 ? getPoints(d, i)[1][1] : yScaleGetter.call($$, d.id)(d.value);
        };

        area = config.axis_rotated ? area.x0(value0).x1(value1).y(xValue) : area.x(xValue).y0(config.area_above ? 0 : value0).y1(value1);
        if (!config.line_connectNull) {
            area = area.defined(function (d) {
                return d.value !== null;
            });
        }

        return function (d) {
            var values = config.line_connectNull ? $$.filterRemoveNull(d.values) : d.values,
                x0 = 0,
                y0 = 0,
                path;
            if ($$.isAreaType(d)) {
                if ($$.isStepType(d)) {
                    values = $$.convertValuesToStep(values);
                }
                path = area.interpolate($$.getInterpolate(d))(values);
            } else {
                if (values[0]) {
                    x0 = $$.x(values[0].x);
                    y0 = $$.getYScale(d.id)(values[0].value);
                }
                path = config.axis_rotated ? "M " + y0 + " " + x0 : "M " + x0 + " " + y0;
            }
            return path ? path : "M 0 0";
        };
    };
    c3_chart_internal_fn.getAreaBaseValue = function () {
        return 0;
    };
    c3_chart_internal_fn.generateGetAreaPoints = function (areaIndices, isSub) {
        // partial duplication of generateGetBarPoints
        var $$ = this,
            config = $$.config,
            areaTargetsNum = areaIndices.__max__ + 1,
            x = $$.getShapeX(0, areaTargetsNum, areaIndices, !!isSub),
            y = $$.getShapeY(!!isSub),
            areaOffset = $$.getShapeOffset($$.isAreaType, areaIndices, !!isSub),
            yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function (d, i) {
            var y0 = yScale.call($$, d.id)(0),
                offset = areaOffset(d, i) || y0,
                // offset is for stacked area chart
            posX = x(d),
                posY = y(d);
            // fix posY not to overflow opposite quadrant
            if (config.axis_rotated) {
                if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                    posY = y0;
                }
            }
            // 1 point that marks the area position
            return [[posX, offset], [posX, posY - (y0 - offset)], [posX, posY - (y0 - offset)], // needed for compatibility
            [posX, offset] // needed for compatibility
            ];
        };
    };

    c3_chart_internal_fn.updateCircle = function () {
        var $$ = this;
        $$.mainCircle = $$.main.selectAll('.' + CLASS.circles).selectAll('.' + CLASS.circle).data($$.lineOrScatterData.bind($$));
        $$.mainCircle.enter().append("circle").attr("class", $$.classCircle.bind($$)).attr("r", $$.pointR.bind($$)).style("fill", $$.color);
        $$.mainCircle.style("opacity", $$.initialOpacityForCircle.bind($$));
        $$.mainCircle.exit().remove();
    };
    c3_chart_internal_fn.redrawCircle = function (cx, cy, withTransition) {
        var selectedCircles = this.main.selectAll('.' + CLASS.selectedCircle);
        return [(withTransition ? this.mainCircle.transition(Math.random().toString()) : this.mainCircle).style('opacity', this.opacityForCircle.bind(this)).style("fill", this.color).attr("cx", cx).attr("cy", cy), (withTransition ? selectedCircles.transition(Math.random().toString()) : selectedCircles).attr("cx", cx).attr("cy", cy)];
    };
    c3_chart_internal_fn.circleX = function (d) {
        return d.x || d.x === 0 ? this.x(d.x) : null;
    };
    c3_chart_internal_fn.updateCircleY = function () {
        var $$ = this,
            lineIndices,
            getPoints;
        if ($$.config.data_groups.length > 0) {
            lineIndices = $$.getShapeIndices($$.isLineType), getPoints = $$.generateGetLinePoints(lineIndices);
            $$.circleY = function (d, i) {
                return getPoints(d, i)[0][1];
            };
        } else {
            $$.circleY = function (d) {
                return $$.getYScale(d.id)(d.value);
            };
        }
    };
    c3_chart_internal_fn.getCircles = function (i, id) {
        var $$ = this;
        return (id ? $$.main.selectAll('.' + CLASS.circles + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.circle + (isValue(i) ? '-' + i : ''));
    };
    c3_chart_internal_fn.expandCircles = function (i, id, reset) {
        var $$ = this,
            r = $$.pointExpandedR.bind($$);
        if (reset) {
            $$.unexpandCircles();
        }
        $$.getCircles(i, id).classed(CLASS.EXPANDED, true).attr('r', r);
    };
    c3_chart_internal_fn.unexpandCircles = function (i) {
        var $$ = this,
            r = $$.pointR.bind($$);
        $$.getCircles(i).filter(function () {
            return $$.d3.select(this).classed(CLASS.EXPANDED);
        }).classed(CLASS.EXPANDED, false).attr('r', r);
    };
    c3_chart_internal_fn.pointR = function (d) {
        var $$ = this,
            config = $$.config;
        return $$.isStepType(d) ? 0 : isFunction(config.point_r) ? config.point_r(d) : config.point_r;
    };
    c3_chart_internal_fn.pointExpandedR = function (d) {
        var $$ = this,
            config = $$.config;
        return config.point_focus_expand_enabled ? config.point_focus_expand_r ? config.point_focus_expand_r : $$.pointR(d) * 1.75 : $$.pointR(d);
    };
    c3_chart_internal_fn.pointSelectR = function (d) {
        var $$ = this,
            config = $$.config;
        return isFunction(config.point_select_r) ? config.point_select_r(d) : config.point_select_r ? config.point_select_r : $$.pointR(d) * 4;
    };
    c3_chart_internal_fn.isWithinCircle = function (that, r) {
        var d3 = this.d3,
            mouse = d3.mouse(that),
            d3_this = d3.select(that),
            cx = +d3_this.attr("cx"),
            cy = +d3_this.attr("cy");
        return Math.sqrt(Math.pow(cx - mouse[0], 2) + Math.pow(cy - mouse[1], 2)) < r;
    };
    c3_chart_internal_fn.isWithinStep = function (that, y) {
        return Math.abs(y - this.d3.mouse(that)[1]) < 30;
    };

    c3_chart_internal_fn.initBar = function () {
        var $$ = this;
        $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);
    };
    c3_chart_internal_fn.updateTargetsForBar = function (targets) {
        var $$ = this,
            config = $$.config,
            mainBarUpdate,
            mainBarEnter,
            classChartBar = $$.classChartBar.bind($$),
            classBars = $$.classBars.bind($$),
            classFocus = $$.classFocus.bind($$);
        mainBarUpdate = $$.main.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', function (d) {
            return classChartBar(d) + classFocus(d);
        });
        mainBarEnter = mainBarUpdate.enter().append('g').attr('class', classChartBar).style('opacity', 0).style("pointer-events", "none");
        // Bars for each data
        mainBarEnter.append('g').attr("class", classBars).style("cursor", function (d) {
            return config.data_selection_isselectable(d) ? "pointer" : null;
        });
    };
    c3_chart_internal_fn.updateBar = function (durationForExit) {
        var $$ = this,
            barData = $$.barData.bind($$),
            classBar = $$.classBar.bind($$),
            initialOpacity = $$.initialOpacity.bind($$),
            color = function color(d) {
            return $$.color(d.id);
        };
        $$.mainBar = $$.main.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data(barData);
        $$.mainBar.enter().append('path').attr("class", classBar).style("stroke", color).style("fill", color);
        $$.mainBar.style("opacity", initialOpacity);
        $$.mainBar.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawBar = function (drawBar, withTransition) {
        return [(withTransition ? this.mainBar.transition(Math.random().toString()) : this.mainBar).attr('d', drawBar).style("fill", this.color).style("opacity", 1)];
    };
    c3_chart_internal_fn.getBarW = function (axis, barTargetsNum) {
        var $$ = this,
            config = $$.config,
            w = typeof config.bar_width === 'number' ? config.bar_width : barTargetsNum ? axis.tickInterval() * config.bar_width_ratio / barTargetsNum : 0;
        return config.bar_width_max && w > config.bar_width_max ? config.bar_width_max : w;
    };
    c3_chart_internal_fn.getBars = function (i, id) {
        var $$ = this;
        return (id ? $$.main.selectAll('.' + CLASS.bars + $$.getTargetSelectorSuffix(id)) : $$.main).selectAll('.' + CLASS.bar + (isValue(i) ? '-' + i : ''));
    };
    c3_chart_internal_fn.expandBars = function (i, id, reset) {
        var $$ = this;
        if (reset) {
            $$.unexpandBars();
        }
        $$.getBars(i, id).classed(CLASS.EXPANDED, true);
    };
    c3_chart_internal_fn.unexpandBars = function (i) {
        var $$ = this;
        $$.getBars(i).classed(CLASS.EXPANDED, false);
    };
    c3_chart_internal_fn.generateDrawBar = function (barIndices, isSub) {
        var $$ = this,
            config = $$.config,
            getPoints = $$.generateGetBarPoints(barIndices, isSub);
        return function (d, i) {
            // 4 points that make a bar
            var points = getPoints(d, i);

            // switch points if axis is rotated, not applicable for sub chart
            var indexX = config.axis_rotated ? 1 : 0;
            var indexY = config.axis_rotated ? 0 : 1;

            var path = 'M ' + points[0][indexX] + ',' + points[0][indexY] + ' ' + 'L' + points[1][indexX] + ',' + points[1][indexY] + ' ' + 'L' + points[2][indexX] + ',' + points[2][indexY] + ' ' + 'L' + points[3][indexX] + ',' + points[3][indexY] + ' ' + 'z';

            return path;
        };
    };
    c3_chart_internal_fn.generateGetBarPoints = function (barIndices, isSub) {
        var $$ = this,
            axis = isSub ? $$.subXAxis : $$.xAxis,
            barTargetsNum = barIndices.__max__ + 1,
            barW = $$.getBarW(axis, barTargetsNum),
            barX = $$.getShapeX(barW, barTargetsNum, barIndices, !!isSub),
            barY = $$.getShapeY(!!isSub),
            barOffset = $$.getShapeOffset($$.isBarType, barIndices, !!isSub),
            yScale = isSub ? $$.getSubYScale : $$.getYScale;
        return function (d, i) {
            var y0 = yScale.call($$, d.id)(0),
                offset = barOffset(d, i) || y0,
                // offset is for stacked bar chart
            posX = barX(d),
                posY = barY(d);
            // fix posY not to overflow opposite quadrant
            if ($$.config.axis_rotated) {
                if (0 < d.value && posY < y0 || d.value < 0 && y0 < posY) {
                    posY = y0;
                }
            }
            // 4 points that make a bar
            return [[posX, offset], [posX, posY - (y0 - offset)], [posX + barW, posY - (y0 - offset)], [posX + barW, offset]];
        };
    };
    c3_chart_internal_fn.isWithinBar = function (that) {
        var mouse = this.d3.mouse(that),
            box = that.getBoundingClientRect(),
            seg0 = that.pathSegList.getItem(0),
            seg1 = that.pathSegList.getItem(1),
            x = Math.min(seg0.x, seg1.x),
            y = Math.min(seg0.y, seg1.y),
            w = box.width,
            h = box.height,
            offset = 2,
            sx = x - offset,
            ex = x + w + offset,
            sy = y + h + offset,
            ey = y - offset;
        return sx < mouse[0] && mouse[0] < ex && ey < mouse[1] && mouse[1] < sy;
    };

    c3_chart_internal_fn.initText = function () {
        var $$ = this;
        $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartTexts);
        $$.mainText = $$.d3.selectAll([]);
    };
    c3_chart_internal_fn.updateTargetsForText = function (targets) {
        var $$ = this,
            mainTextUpdate,
            mainTextEnter,
            classChartText = $$.classChartText.bind($$),
            classTexts = $$.classTexts.bind($$),
            classFocus = $$.classFocus.bind($$);
        mainTextUpdate = $$.main.select('.' + CLASS.chartTexts).selectAll('.' + CLASS.chartText).data(targets).attr('class', function (d) {
            return classChartText(d) + classFocus(d);
        });
        mainTextEnter = mainTextUpdate.enter().append('g').attr('class', classChartText).style('opacity', 0).style("pointer-events", "none");
        mainTextEnter.append('g').attr('class', classTexts);
    };
    c3_chart_internal_fn.updateText = function (durationForExit) {
        var $$ = this,
            config = $$.config,
            barOrLineData = $$.barOrLineData.bind($$),
            classText = $$.classText.bind($$);
        $$.mainText = $$.main.selectAll('.' + CLASS.texts).selectAll('.' + CLASS.text).data(barOrLineData);
        $$.mainText.enter().append('text').attr("class", classText).attr('text-anchor', function (d) {
            return config.axis_rotated ? d.value < 0 ? 'end' : 'start' : 'middle';
        }).style("stroke", 'none').style("fill", function (d) {
            return $$.color(d);
        }).style("fill-opacity", 0);
        $$.mainText.text(function (d, i, j) {
            return $$.dataLabelFormat(d.id)(d.value, d.id, i, j);
        });
        $$.mainText.exit().transition().duration(durationForExit).style('fill-opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawText = function (xForText, yForText, forFlow, withTransition) {
        return [(withTransition ? this.mainText.transition() : this.mainText).attr('x', xForText).attr('y', yForText).style("fill", this.color).style("fill-opacity", forFlow ? 0 : this.opacityForText.bind(this))];
    };
    c3_chart_internal_fn.getTextRect = function (text, cls, element) {
        var dummy = this.d3.select('body').append('div').classed('c3', true),
            svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0),
            font = this.d3.select(element).style('font'),
            rect;
        svg.selectAll('.dummy').data([text]).enter().append('text').classed(cls ? cls : "", true).style('font', font).text(text).each(function () {
            rect = this.getBoundingClientRect();
        });
        dummy.remove();
        return rect;
    };
    c3_chart_internal_fn.generateXYForText = function (areaIndices, barIndices, lineIndices, forX) {
        var $$ = this,
            getAreaPoints = $$.generateGetAreaPoints(areaIndices, false),
            getBarPoints = $$.generateGetBarPoints(barIndices, false),
            getLinePoints = $$.generateGetLinePoints(lineIndices, false),
            getter = forX ? $$.getXForText : $$.getYForText;
        return function (d, i) {
            var getPoints = $$.isAreaType(d) ? getAreaPoints : $$.isBarType(d) ? getBarPoints : getLinePoints;
            return getter.call($$, getPoints(d, i), d, this);
        };
    };
    c3_chart_internal_fn.getXForText = function (points, d, textElement) {
        var $$ = this,
            box = textElement.getBoundingClientRect(),
            xPos,
            padding;
        if ($$.config.axis_rotated) {
            padding = $$.isBarType(d) ? 4 : 6;
            xPos = points[2][1] + padding * (d.value < 0 ? -1 : 1);
        } else {
            xPos = $$.hasType('bar') ? (points[2][0] + points[0][0]) / 2 : points[0][0];
        }
        // show labels regardless of the domain if value is null
        if (d.value === null) {
            if (xPos > $$.width) {
                xPos = $$.width - box.width;
            } else if (xPos < 0) {
                xPos = 4;
            }
        }
        return xPos;
    };
    c3_chart_internal_fn.getYForText = function (points, d, textElement) {
        var $$ = this,
            box = textElement.getBoundingClientRect(),
            yPos;
        if ($$.config.axis_rotated) {
            yPos = (points[0][0] + points[2][0] + box.height * 0.6) / 2;
        } else {
            yPos = points[2][1];
            if (d.value < 0 || d.value === 0 && !$$.hasPositiveValue) {
                yPos += box.height;
                if ($$.isBarType(d) && $$.isSafari()) {
                    yPos -= 3;
                } else if (!$$.isBarType(d) && $$.isChrome()) {
                    yPos += 3;
                }
            } else {
                yPos += $$.isBarType(d) ? -3 : -6;
            }
        }
        // show labels regardless of the domain if value is null
        if (d.value === null && !$$.config.axis_rotated) {
            if (yPos < box.height) {
                yPos = box.height;
            } else if (yPos > this.height) {
                yPos = this.height - 4;
            }
        }
        return yPos;
    };

    c3_chart_internal_fn.setTargetType = function (targetIds, type) {
        var $$ = this,
            config = $$.config;
        $$.mapToTargetIds(targetIds).forEach(function (id) {
            $$.withoutFadeIn[id] = type === config.data_types[id];
            config.data_types[id] = type;
        });
        if (!targetIds) {
            config.data_type = type;
        }
    };
    c3_chart_internal_fn.hasType = function (type, targets) {
        var $$ = this,
            types = $$.config.data_types,
            has = false;
        targets = targets || $$.data.targets;
        if (targets && targets.length) {
            targets.forEach(function (target) {
                var t = types[target.id];
                if (t && t.indexOf(type) >= 0 || !t && type === 'line') {
                    has = true;
                }
            });
        } else if (Object.keys(types).length) {
            Object.keys(types).forEach(function (id) {
                if (types[id] === type) {
                    has = true;
                }
            });
        } else {
            has = $$.config.data_type === type;
        }
        return has;
    };
    c3_chart_internal_fn.hasArcType = function (targets) {
        return this.hasType('pie', targets) || this.hasType('donut', targets) || this.hasType('gauge', targets);
    };
    c3_chart_internal_fn.isLineType = function (d) {
        var config = this.config,
            id = isString(d) ? d : d.id;
        return !config.data_types[id] || ['line', 'spline', 'area', 'area-spline', 'step', 'area-step'].indexOf(config.data_types[id]) >= 0;
    };
    c3_chart_internal_fn.isStepType = function (d) {
        var id = isString(d) ? d : d.id;
        return ['step', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
    };
    c3_chart_internal_fn.isSplineType = function (d) {
        var id = isString(d) ? d : d.id;
        return ['spline', 'area-spline'].indexOf(this.config.data_types[id]) >= 0;
    };
    c3_chart_internal_fn.isAreaType = function (d) {
        var id = isString(d) ? d : d.id;
        return ['area', 'area-spline', 'area-step'].indexOf(this.config.data_types[id]) >= 0;
    };
    c3_chart_internal_fn.isBarType = function (d) {
        var id = isString(d) ? d : d.id;
        return this.config.data_types[id] === 'bar';
    };
    c3_chart_internal_fn.isScatterType = function (d) {
        var id = isString(d) ? d : d.id;
        return this.config.data_types[id] === 'scatter';
    };
    c3_chart_internal_fn.isPieType = function (d) {
        var id = isString(d) ? d : d.id;
        return this.config.data_types[id] === 'pie';
    };
    c3_chart_internal_fn.isGaugeType = function (d) {
        var id = isString(d) ? d : d.id;
        return this.config.data_types[id] === 'gauge';
    };
    c3_chart_internal_fn.isDonutType = function (d) {
        var id = isString(d) ? d : d.id;
        return this.config.data_types[id] === 'donut';
    };
    c3_chart_internal_fn.isArcType = function (d) {
        return this.isPieType(d) || this.isDonutType(d) || this.isGaugeType(d);
    };
    c3_chart_internal_fn.lineData = function (d) {
        return this.isLineType(d) ? [d] : [];
    };
    c3_chart_internal_fn.arcData = function (d) {
        return this.isArcType(d.data) ? [d] : [];
    };
    /* not used
     function scatterData(d) {
     return isScatterType(d) ? d.values : [];
     }
     */
    c3_chart_internal_fn.barData = function (d) {
        return this.isBarType(d) ? d.values : [];
    };
    c3_chart_internal_fn.lineOrScatterData = function (d) {
        return this.isLineType(d) || this.isScatterType(d) ? d.values : [];
    };
    c3_chart_internal_fn.barOrLineData = function (d) {
        return this.isBarType(d) || this.isLineType(d) ? d.values : [];
    };
    c3_chart_internal_fn.isInterpolationType = function (type) {
        return ['linear', 'linear-closed', 'basis', 'basis-open', 'basis-closed', 'bundle', 'cardinal', 'cardinal-open', 'cardinal-closed', 'monotone'].indexOf(type) >= 0;
    };

    c3_chart_internal_fn.initGrid = function () {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3;
        $$.grid = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid);
        if (config.grid_x_show) {
            $$.grid.append("g").attr("class", CLASS.xgrids);
        }
        if (config.grid_y_show) {
            $$.grid.append('g').attr('class', CLASS.ygrids);
        }
        if (config.grid_focus_show) {
            $$.grid.append('g').attr("class", CLASS.xgridFocus).append('line').attr('class', CLASS.xgridFocus);
        }
        $$.xgrid = d3.selectAll([]);
        if (!config.grid_lines_front) {
            $$.initGridLines();
        }
    };
    c3_chart_internal_fn.initGridLines = function () {
        var $$ = this,
            d3 = $$.d3;
        $$.gridLines = $$.main.append('g').attr("clip-path", $$.clipPathForGrid).attr('class', CLASS.grid + ' ' + CLASS.gridLines);
        $$.gridLines.append('g').attr("class", CLASS.xgridLines);
        $$.gridLines.append('g').attr('class', CLASS.ygridLines);
        $$.xgridLines = d3.selectAll([]);
    };
    c3_chart_internal_fn.updateXGrid = function (withoutUpdate) {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3,
            xgridData = $$.generateGridData(config.grid_x_type, $$.x),
            tickOffset = $$.isCategorized() ? $$.xAxis.tickOffset() : 0;

        $$.xgridAttr = config.axis_rotated ? {
            'x1': 0,
            'x2': $$.width,
            'y1': function y1(d) {
                return $$.x(d) - tickOffset;
            },
            'y2': function y2(d) {
                return $$.x(d) - tickOffset;
            }
        } : {
            'x1': function x1(d) {
                return $$.x(d) + tickOffset;
            },
            'x2': function x2(d) {
                return $$.x(d) + tickOffset;
            },
            'y1': 0,
            'y2': $$.height
        };

        $$.xgrid = $$.main.select('.' + CLASS.xgrids).selectAll('.' + CLASS.xgrid).data(xgridData);
        $$.xgrid.enter().append('line').attr("class", CLASS.xgrid);
        if (!withoutUpdate) {
            $$.xgrid.attr($$.xgridAttr).style("opacity", function () {
                return +d3.select(this).attr(config.axis_rotated ? 'y1' : 'x1') === (config.axis_rotated ? $$.height : 0) ? 0 : 1;
            });
        }
        $$.xgrid.exit().remove();
    };

    c3_chart_internal_fn.updateYGrid = function () {
        var $$ = this,
            config = $$.config,
            gridValues = $$.yAxis.tickValues() || $$.y.ticks(config.grid_y_ticks);
        $$.ygrid = $$.main.select('.' + CLASS.ygrids).selectAll('.' + CLASS.ygrid).data(gridValues);
        $$.ygrid.enter().append('line').attr('class', CLASS.ygrid);
        $$.ygrid.attr("x1", config.axis_rotated ? $$.y : 0).attr("x2", config.axis_rotated ? $$.y : $$.width).attr("y1", config.axis_rotated ? 0 : $$.y).attr("y2", config.axis_rotated ? $$.height : $$.y);
        $$.ygrid.exit().remove();
        $$.smoothLines($$.ygrid, 'grid');
    };

    c3_chart_internal_fn.gridTextAnchor = function (d) {
        return d.position ? d.position : "end";
    };
    c3_chart_internal_fn.gridTextDx = function (d) {
        return d.position === 'start' ? 4 : d.position === 'middle' ? 0 : -4;
    };
    c3_chart_internal_fn.xGridTextX = function (d) {
        return d.position === 'start' ? -this.height : d.position === 'middle' ? -this.height / 2 : 0;
    };
    c3_chart_internal_fn.yGridTextX = function (d) {
        return d.position === 'start' ? 0 : d.position === 'middle' ? this.width / 2 : this.width;
    };
    c3_chart_internal_fn.updateGrid = function (duration) {
        var $$ = this,
            main = $$.main,
            config = $$.config,
            xgridLine,
            ygridLine,
            yv;

        // hide if arc type
        $$.grid.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

        main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
        if (config.grid_x_show) {
            $$.updateXGrid();
        }
        $$.xgridLines = main.select('.' + CLASS.xgridLines).selectAll('.' + CLASS.xgridLine).data(config.grid_x_lines);
        // enter
        xgridLine = $$.xgridLines.enter().append('g').attr("class", function (d) {
            return CLASS.xgridLine + (d['class'] ? ' ' + d['class'] : '');
        });
        xgridLine.append('line').style("opacity", 0);
        xgridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "" : "rotate(-90)").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
        // udpate
        // done in d3.transition() of the end of this function
        // exit
        $$.xgridLines.exit().transition().duration(duration).style("opacity", 0).remove();

        // Y-Grid
        if (config.grid_y_show) {
            $$.updateYGrid();
        }
        $$.ygridLines = main.select('.' + CLASS.ygridLines).selectAll('.' + CLASS.ygridLine).data(config.grid_y_lines);
        // enter
        ygridLine = $$.ygridLines.enter().append('g').attr("class", function (d) {
            return CLASS.ygridLine + (d['class'] ? ' ' + d['class'] : '');
        });
        ygridLine.append('line').style("opacity", 0);
        ygridLine.append('text').attr("text-anchor", $$.gridTextAnchor).attr("transform", config.axis_rotated ? "rotate(-90)" : "").attr('dx', $$.gridTextDx).attr('dy', -5).style("opacity", 0);
        // update
        yv = $$.yv.bind($$);
        $$.ygridLines.select('line').transition().duration(duration).attr("x1", config.axis_rotated ? yv : 0).attr("x2", config.axis_rotated ? yv : $$.width).attr("y1", config.axis_rotated ? 0 : yv).attr("y2", config.axis_rotated ? $$.height : yv).style("opacity", 1);
        $$.ygridLines.select('text').transition().duration(duration).attr("x", config.axis_rotated ? $$.xGridTextX.bind($$) : $$.yGridTextX.bind($$)).attr("y", yv).text(function (d) {
            return d.text;
        }).style("opacity", 1);
        // exit
        $$.ygridLines.exit().transition().duration(duration).style("opacity", 0).remove();
    };
    c3_chart_internal_fn.redrawGrid = function (withTransition) {
        var $$ = this,
            config = $$.config,
            xv = $$.xv.bind($$),
            lines = $$.xgridLines.select('line'),
            texts = $$.xgridLines.select('text');
        return [(withTransition ? lines.transition() : lines).attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv).attr("y1", config.axis_rotated ? xv : 0).attr("y2", config.axis_rotated ? xv : $$.height).style("opacity", 1), (withTransition ? texts.transition() : texts).attr("x", config.axis_rotated ? $$.yGridTextX.bind($$) : $$.xGridTextX.bind($$)).attr("y", xv).text(function (d) {
            return d.text;
        }).style("opacity", 1)];
    };
    c3_chart_internal_fn.showXGridFocus = function (selectedData) {
        var $$ = this,
            config = $$.config,
            dataToShow = selectedData.filter(function (d) {
            return d && isValue(d.value);
        }),
            focusEl = $$.main.selectAll('line.' + CLASS.xgridFocus),
            xx = $$.xx.bind($$);
        if (!config.tooltip_show) {
            return;
        }
        // Hide when scatter plot exists
        if ($$.hasType('scatter') || $$.hasArcType()) {
            return;
        }
        focusEl.style("visibility", "visible").data([dataToShow[0]]).attr(config.axis_rotated ? 'y1' : 'x1', xx).attr(config.axis_rotated ? 'y2' : 'x2', xx);
        $$.smoothLines(focusEl, 'grid');
    };
    c3_chart_internal_fn.hideXGridFocus = function () {
        this.main.select('line.' + CLASS.xgridFocus).style("visibility", "hidden");
    };
    c3_chart_internal_fn.updateXgridFocus = function () {
        var $$ = this,
            config = $$.config;
        $$.main.select('line.' + CLASS.xgridFocus).attr("x1", config.axis_rotated ? 0 : -10).attr("x2", config.axis_rotated ? $$.width : -10).attr("y1", config.axis_rotated ? -10 : 0).attr("y2", config.axis_rotated ? -10 : $$.height);
    };
    c3_chart_internal_fn.generateGridData = function (type, scale) {
        var $$ = this,
            gridData = [],
            xDomain,
            firstYear,
            lastYear,
            i,
            tickNum = $$.main.select("." + CLASS.axisX).selectAll('.tick').size();
        if (type === 'year') {
            xDomain = $$.getXDomain();
            firstYear = xDomain[0].getFullYear();
            lastYear = xDomain[1].getFullYear();
            for (i = firstYear; i <= lastYear; i++) {
                gridData.push(new Date(i + '-01-01 00:00:00'));
            }
        } else {
            gridData = scale.ticks(10);
            if (gridData.length > tickNum) {
                // use only int
                gridData = gridData.filter(function (d) {
                    return ("" + d).indexOf('.') < 0;
                });
            }
        }
        return gridData;
    };
    c3_chart_internal_fn.getGridFilterToRemove = function (params) {
        return params ? function (line) {
            var found = false;
            [].concat(params).forEach(function (param) {
                if ('value' in param && line.value === param.value || 'class' in param && line['class'] === param['class']) {
                    found = true;
                }
            });
            return found;
        } : function () {
            return true;
        };
    };
    c3_chart_internal_fn.removeGridLines = function (params, forX) {
        var $$ = this,
            config = $$.config,
            toRemove = $$.getGridFilterToRemove(params),
            toShow = function toShow(line) {
            return !toRemove(line);
        },
            classLines = forX ? CLASS.xgridLines : CLASS.ygridLines,
            classLine = forX ? CLASS.xgridLine : CLASS.ygridLine;
        $$.main.select('.' + classLines).selectAll('.' + classLine).filter(toRemove).transition().duration(config.transition_duration).style('opacity', 0).remove();
        if (forX) {
            config.grid_x_lines = config.grid_x_lines.filter(toShow);
        } else {
            config.grid_y_lines = config.grid_y_lines.filter(toShow);
        }
    };

    c3_chart_internal_fn.initTooltip = function () {
        var $$ = this,
            config = $$.config,
            i;
        $$.tooltip = $$.selectChart.style("position", "relative").append("div").attr('class', CLASS.tooltipContainer).style("position", "absolute").style("pointer-events", "none").style("display", "none");
        // Show tooltip if needed
        if (config.tooltip_init_show) {
            if ($$.isTimeSeries() && isString(config.tooltip_init_x)) {
                config.tooltip_init_x = $$.parseDate(config.tooltip_init_x);
                for (i = 0; i < $$.data.targets[0].values.length; i++) {
                    if ($$.data.targets[0].values[i].x - config.tooltip_init_x === 0) {
                        break;
                    }
                }
                config.tooltip_init_x = i;
            }
            $$.tooltip.html(config.tooltip_contents.call($$, $$.data.targets.map(function (d) {
                return $$.addName(d.values[config.tooltip_init_x]);
            }), $$.axis.getXAxisTickFormat(), $$.getYFormat($$.hasArcType()), $$.color));
            $$.tooltip.style("top", config.tooltip_init_position.top).style("left", config.tooltip_init_position.left).style("display", "block");
        }
    };
    c3_chart_internal_fn.getTooltipContent = function (d, defaultTitleFormat, defaultValueFormat, color) {
        var $$ = this,
            config = $$.config,
            titleFormat = config.tooltip_format_title || defaultTitleFormat,
            nameFormat = config.tooltip_format_name || function (name) {
            return name;
        },
            valueFormat = config.tooltip_format_value || defaultValueFormat,
            text,
            i,
            title,
            value,
            name,
            bgcolor,
            orderAsc = $$.isOrderAsc();

        if (config.data_groups.length === 0) {
            d.sort(function (a, b) {
                var v1 = a ? a.value : null,
                    v2 = b ? b.value : null;
                return orderAsc ? v1 - v2 : v2 - v1;
            });
        } else {
            var ids = $$.orderTargets($$.data.targets).map(function (i) {
                return i.id;
            });
            d.sort(function (a, b) {
                var v1 = a ? a.value : null,
                    v2 = b ? b.value : null;
                if (v1 > 0 && v2 > 0) {
                    v1 = a ? ids.indexOf(a.id) : null;
                    v2 = b ? ids.indexOf(b.id) : null;
                }
                return orderAsc ? v1 - v2 : v2 - v1;
            });
        }

        for (i = 0; i < d.length; i++) {
            if (!(d[i] && (d[i].value || d[i].value === 0))) {
                continue;
            }

            if (!text) {
                title = sanitise(titleFormat ? titleFormat(d[i].x) : d[i].x);
                text = "<table class='" + $$.CLASS.tooltip + "'>" + (title || title === 0 ? "<tr><th colspan='2'>" + title + "</th></tr>" : "");
            }

            value = sanitise(valueFormat(d[i].value, d[i].ratio, d[i].id, d[i].index, d));
            if (value !== undefined) {
                // Skip elements when their name is set to null
                if (d[i].name === null) {
                    continue;
                }
                name = sanitise(nameFormat(d[i].name, d[i].ratio, d[i].id, d[i].index));
                bgcolor = $$.levelColor ? $$.levelColor(d[i].value) : color(d[i].id);

                text += "<tr class='" + $$.CLASS.tooltipName + "-" + $$.getTargetSelectorSuffix(d[i].id) + "'>";
                text += "<td class='name'><span style='background-color:" + bgcolor + "'></span>" + name + "</td>";
                text += "<td class='value'>" + value + "</td>";
                text += "</tr>";
            }
        }
        return text + "</table>";
    };
    c3_chart_internal_fn.tooltipPosition = function (dataToShow, tWidth, tHeight, element) {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3;
        var svgLeft, tooltipLeft, tooltipRight, tooltipTop, chartRight;
        var forArc = $$.hasArcType(),
            mouse = d3.mouse(element);
        // Determin tooltip position
        if (forArc) {
            tooltipLeft = ($$.width - ($$.isLegendRight ? $$.getLegendWidth() : 0)) / 2 + mouse[0];
            tooltipTop = $$.height / 2 + mouse[1] + 20;
        } else {
            svgLeft = $$.getSvgLeft(true);
            if (config.axis_rotated) {
                tooltipLeft = svgLeft + mouse[0] + 100;
                tooltipRight = tooltipLeft + tWidth;
                chartRight = $$.currentWidth - $$.getCurrentPaddingRight();
                tooltipTop = $$.x(dataToShow[0].x) + 20;
            } else {
                tooltipLeft = svgLeft + $$.getCurrentPaddingLeft(true) + $$.x(dataToShow[0].x) + 20;
                tooltipRight = tooltipLeft + tWidth;
                chartRight = svgLeft + $$.currentWidth - $$.getCurrentPaddingRight();
                tooltipTop = mouse[1] + 15;
            }

            if (tooltipRight > chartRight) {
                // 20 is needed for Firefox to keep tooltip width
                tooltipLeft -= tooltipRight - chartRight + 20;
            }
            if (tooltipTop + tHeight > $$.currentHeight) {
                tooltipTop -= tHeight + 30;
            }
        }
        if (tooltipTop < 0) {
            tooltipTop = 0;
        }
        return { top: tooltipTop, left: tooltipLeft };
    };
    c3_chart_internal_fn.showTooltip = function (selectedData, element) {
        var $$ = this,
            config = $$.config;
        var tWidth, tHeight, position;
        var forArc = $$.hasArcType(),
            dataToShow = selectedData.filter(function (d) {
            return d && isValue(d.value);
        }),
            positionFunction = config.tooltip_position || c3_chart_internal_fn.tooltipPosition;
        if (dataToShow.length === 0 || !config.tooltip_show) {
            return;
        }
        $$.tooltip.html(config.tooltip_contents.call($$, selectedData, $$.axis.getXAxisTickFormat(), $$.getYFormat(forArc), $$.color)).style("display", "block");

        // Get tooltip dimensions
        tWidth = $$.tooltip.property('offsetWidth');
        tHeight = $$.tooltip.property('offsetHeight');

        position = positionFunction.call(this, dataToShow, tWidth, tHeight, element);
        // Set tooltip
        $$.tooltip.style("top", position.top + "px").style("left", position.left + 'px');
    };
    c3_chart_internal_fn.hideTooltip = function () {
        this.tooltip.style("display", "none");
    };

    c3_chart_internal_fn.initLegend = function () {
        var $$ = this;
        $$.legendItemTextBox = {};
        $$.legendHasRendered = false;
        $$.legend = $$.svg.append("g").attr("transform", $$.getTranslate('legend'));
        if (!$$.config.legend_show) {
            $$.legend.style('visibility', 'hidden');
            $$.hiddenLegendIds = $$.mapToIds($$.data.targets);
            return;
        }
        // MEMO: call here to update legend box and tranlate for all
        // MEMO: translate will be upated by this, so transform not needed in updateLegend()
        $$.updateLegendWithDefaults();
    };
    c3_chart_internal_fn.updateLegendWithDefaults = function () {
        var $$ = this;
        $$.updateLegend($$.mapToIds($$.data.targets), { withTransform: false, withTransitionForTransform: false, withTransition: false });
    };
    c3_chart_internal_fn.updateSizeForLegend = function (legendHeight, legendWidth) {
        var $$ = this,
            config = $$.config,
            insetLegendPosition = {
            top: $$.isLegendTop ? $$.getCurrentPaddingTop() + config.legend_inset_y + 5.5 : $$.currentHeight - legendHeight - $$.getCurrentPaddingBottom() - config.legend_inset_y,
            left: $$.isLegendLeft ? $$.getCurrentPaddingLeft() + config.legend_inset_x + 0.5 : $$.currentWidth - legendWidth - $$.getCurrentPaddingRight() - config.legend_inset_x + 0.5
        };

        $$.margin3 = {
            top: $$.isLegendRight ? 0 : $$.isLegendInset ? insetLegendPosition.top : $$.currentHeight - legendHeight,
            right: NaN,
            bottom: 0,
            left: $$.isLegendRight ? $$.currentWidth - legendWidth : $$.isLegendInset ? insetLegendPosition.left : 0
        };
    };
    c3_chart_internal_fn.transformLegend = function (withTransition) {
        var $$ = this;
        (withTransition ? $$.legend.transition() : $$.legend).attr("transform", $$.getTranslate('legend'));
    };
    c3_chart_internal_fn.updateLegendStep = function (step) {
        this.legendStep = step;
    };
    c3_chart_internal_fn.updateLegendItemWidth = function (w) {
        this.legendItemWidth = w;
    };
    c3_chart_internal_fn.updateLegendItemHeight = function (h) {
        this.legendItemHeight = h;
    };
    c3_chart_internal_fn.getLegendWidth = function () {
        var $$ = this;
        return $$.config.legend_show ? $$.isLegendRight || $$.isLegendInset ? $$.legendItemWidth * ($$.legendStep + 1) : $$.currentWidth : 0;
    };
    c3_chart_internal_fn.getLegendHeight = function () {
        var $$ = this,
            h = 0;
        if ($$.config.legend_show) {
            if ($$.isLegendRight) {
                h = $$.currentHeight;
            } else {
                h = Math.max(20, $$.legendItemHeight) * ($$.legendStep + 1);
            }
        }
        return h;
    };
    c3_chart_internal_fn.opacityForLegend = function (legendItem) {
        return legendItem.classed(CLASS.legendItemHidden) ? null : 1;
    };
    c3_chart_internal_fn.opacityForUnfocusedLegend = function (legendItem) {
        return legendItem.classed(CLASS.legendItemHidden) ? null : 0.3;
    };
    c3_chart_internal_fn.toggleFocusLegend = function (targetIds, focus) {
        var $$ = this;
        targetIds = $$.mapToTargetIds(targetIds);
        $$.legend.selectAll('.' + CLASS.legendItem).filter(function (id) {
            return targetIds.indexOf(id) >= 0;
        }).classed(CLASS.legendItemFocused, focus).transition().duration(100).style('opacity', function () {
            var opacity = focus ? $$.opacityForLegend : $$.opacityForUnfocusedLegend;
            return opacity.call($$, $$.d3.select(this));
        });
    };
    c3_chart_internal_fn.revertLegend = function () {
        var $$ = this,
            d3 = $$.d3;
        $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemFocused, false).transition().duration(100).style('opacity', function () {
            return $$.opacityForLegend(d3.select(this));
        });
    };
    c3_chart_internal_fn.showLegend = function (targetIds) {
        var $$ = this,
            config = $$.config;
        if (!config.legend_show) {
            config.legend_show = true;
            $$.legend.style('visibility', 'visible');
            if (!$$.legendHasRendered) {
                $$.updateLegendWithDefaults();
            }
        }
        $$.removeHiddenLegendIds(targetIds);
        $$.legend.selectAll($$.selectorLegends(targetIds)).style('visibility', 'visible').transition().style('opacity', function () {
            return $$.opacityForLegend($$.d3.select(this));
        });
    };
    c3_chart_internal_fn.hideLegend = function (targetIds) {
        var $$ = this,
            config = $$.config;
        if (config.legend_show && isEmpty(targetIds)) {
            config.legend_show = false;
            $$.legend.style('visibility', 'hidden');
        }
        $$.addHiddenLegendIds(targetIds);
        $$.legend.selectAll($$.selectorLegends(targetIds)).style('opacity', 0).style('visibility', 'hidden');
    };
    c3_chart_internal_fn.clearLegendItemTextBoxCache = function () {
        this.legendItemTextBox = {};
    };
    c3_chart_internal_fn.updateLegend = function (targetIds, options, transitions) {
        var $$ = this,
            config = $$.config;
        var xForLegend, xForLegendText, xForLegendRect, yForLegend, yForLegendText, yForLegendRect, x1ForLegendTile, x2ForLegendTile, yForLegendTile;
        var paddingTop = 4,
            paddingRight = 10,
            maxWidth = 0,
            maxHeight = 0,
            posMin = 10,
            tileWidth = config.legend_item_tile_width + 5;
        var l,
            totalLength = 0,
            offsets = {},
            widths = {},
            heights = {},
            margins = [0],
            steps = {},
            step = 0;
        var withTransition, withTransitionForTransform;
        var texts, rects, tiles, background;

        // Skip elements when their name is set to null
        targetIds = targetIds.filter(function (id) {
            return !isDefined(config.data_names[id]) || config.data_names[id] !== null;
        });

        options = options || {};
        withTransition = getOption(options, "withTransition", true);
        withTransitionForTransform = getOption(options, "withTransitionForTransform", true);

        function getTextBox(textElement, id) {
            if (!$$.legendItemTextBox[id]) {
                $$.legendItemTextBox[id] = $$.getTextRect(textElement.textContent, CLASS.legendItem, textElement);
            }
            return $$.legendItemTextBox[id];
        }

        function updatePositions(textElement, id, index) {
            var reset = index === 0,
                isLast = index === targetIds.length - 1,
                box = getTextBox(textElement, id),
                itemWidth = box.width + tileWidth + (isLast && !($$.isLegendRight || $$.isLegendInset) ? 0 : paddingRight) + config.legend_padding,
                itemHeight = box.height + paddingTop,
                itemLength = $$.isLegendRight || $$.isLegendInset ? itemHeight : itemWidth,
                areaLength = $$.isLegendRight || $$.isLegendInset ? $$.getLegendHeight() : $$.getLegendWidth(),
                margin,
                maxLength;

            // MEMO: care about condifion of step, totalLength
            function updateValues(id, withoutStep) {
                if (!withoutStep) {
                    margin = (areaLength - totalLength - itemLength) / 2;
                    if (margin < posMin) {
                        margin = (areaLength - itemLength) / 2;
                        totalLength = 0;
                        step++;
                    }
                }
                steps[id] = step;
                margins[step] = $$.isLegendInset ? 10 : margin;
                offsets[id] = totalLength;
                totalLength += itemLength;
            }

            if (reset) {
                totalLength = 0;
                step = 0;
                maxWidth = 0;
                maxHeight = 0;
            }

            if (config.legend_show && !$$.isLegendToShow(id)) {
                widths[id] = heights[id] = steps[id] = offsets[id] = 0;
                return;
            }

            widths[id] = itemWidth;
            heights[id] = itemHeight;

            if (!maxWidth || itemWidth >= maxWidth) {
                maxWidth = itemWidth;
            }
            if (!maxHeight || itemHeight >= maxHeight) {
                maxHeight = itemHeight;
            }
            maxLength = $$.isLegendRight || $$.isLegendInset ? maxHeight : maxWidth;

            if (config.legend_equally) {
                Object.keys(widths).forEach(function (id) {
                    widths[id] = maxWidth;
                });
                Object.keys(heights).forEach(function (id) {
                    heights[id] = maxHeight;
                });
                margin = (areaLength - maxLength * targetIds.length) / 2;
                if (margin < posMin) {
                    totalLength = 0;
                    step = 0;
                    targetIds.forEach(function (id) {
                        updateValues(id);
                    });
                } else {
                    updateValues(id, true);
                }
            } else {
                updateValues(id);
            }
        }

        if ($$.isLegendInset) {
            step = config.legend_inset_step ? config.legend_inset_step : targetIds.length;
            $$.updateLegendStep(step);
        }

        if ($$.isLegendRight) {
            xForLegend = function xForLegend(id) {
                return maxWidth * steps[id];
            };
            yForLegend = function yForLegend(id) {
                return margins[steps[id]] + offsets[id];
            };
        } else if ($$.isLegendInset) {
            xForLegend = function xForLegend(id) {
                return maxWidth * steps[id] + 10;
            };
            yForLegend = function yForLegend(id) {
                return margins[steps[id]] + offsets[id];
            };
        } else {
            xForLegend = function xForLegend(id) {
                return margins[steps[id]] + offsets[id];
            };
            yForLegend = function yForLegend(id) {
                return maxHeight * steps[id];
            };
        }
        xForLegendText = function xForLegendText(id, i) {
            return xForLegend(id, i) + 4 + config.legend_item_tile_width;
        };
        yForLegendText = function yForLegendText(id, i) {
            return yForLegend(id, i) + 9;
        };
        xForLegendRect = function xForLegendRect(id, i) {
            return xForLegend(id, i);
        };
        yForLegendRect = function yForLegendRect(id, i) {
            return yForLegend(id, i) - 5;
        };
        x1ForLegendTile = function x1ForLegendTile(id, i) {
            return xForLegend(id, i) - 2;
        };
        x2ForLegendTile = function x2ForLegendTile(id, i) {
            return xForLegend(id, i) - 2 + config.legend_item_tile_width;
        };
        yForLegendTile = function yForLegendTile(id, i) {
            return yForLegend(id, i) + 4;
        };

        // Define g for legend area
        l = $$.legend.selectAll('.' + CLASS.legendItem).data(targetIds).enter().append('g').attr('class', function (id) {
            return $$.generateClass(CLASS.legendItem, id);
        }).style('visibility', function (id) {
            return $$.isLegendToShow(id) ? 'visible' : 'hidden';
        }).style('cursor', 'pointer').on('click', function (id) {
            if (config.legend_item_onclick) {
                config.legend_item_onclick.call($$, id);
            } else {
                if ($$.d3.event.altKey) {
                    $$.api.hide();
                    $$.api.show(id);
                } else {
                    $$.api.toggle(id);
                    $$.isTargetToShow(id) ? $$.api.focus(id) : $$.api.revert();
                }
            }
        }).on('mouseover', function (id) {
            if (config.legend_item_onmouseover) {
                config.legend_item_onmouseover.call($$, id);
            } else {
                $$.d3.select(this).classed(CLASS.legendItemFocused, true);
                if (!$$.transiting && $$.isTargetToShow(id)) {
                    $$.api.focus(id);
                }
            }
        }).on('mouseout', function (id) {
            if (config.legend_item_onmouseout) {
                config.legend_item_onmouseout.call($$, id);
            } else {
                $$.d3.select(this).classed(CLASS.legendItemFocused, false);
                $$.api.revert();
            }
        });
        l.append('text').text(function (id) {
            return isDefined(config.data_names[id]) ? config.data_names[id] : id;
        }).each(function (id, i) {
            updatePositions(this, id, i);
        }).style("pointer-events", "none").attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendText : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendText);
        l.append('rect').attr("class", CLASS.legendItemEvent).style('fill-opacity', 0).attr('x', $$.isLegendRight || $$.isLegendInset ? xForLegendRect : -200).attr('y', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendRect);
        l.append('line').attr('class', CLASS.legendItemTile).style('stroke', $$.color).style("pointer-events", "none").attr('x1', $$.isLegendRight || $$.isLegendInset ? x1ForLegendTile : -200).attr('y1', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('x2', $$.isLegendRight || $$.isLegendInset ? x2ForLegendTile : -200).attr('y2', $$.isLegendRight || $$.isLegendInset ? -200 : yForLegendTile).attr('stroke-width', config.legend_item_tile_height);

        // Set background for inset legend
        background = $$.legend.select('.' + CLASS.legendBackground + ' rect');
        if ($$.isLegendInset && maxWidth > 0 && background.size() === 0) {
            background = $$.legend.insert('g', '.' + CLASS.legendItem).attr("class", CLASS.legendBackground).append('rect');
        }

        texts = $$.legend.selectAll('text').data(targetIds).text(function (id) {
            return isDefined(config.data_names[id]) ? config.data_names[id] : id;
        }) // MEMO: needed for update
        .each(function (id, i) {
            updatePositions(this, id, i);
        });
        (withTransition ? texts.transition() : texts).attr('x', xForLegendText).attr('y', yForLegendText);

        rects = $$.legend.selectAll('rect.' + CLASS.legendItemEvent).data(targetIds);
        (withTransition ? rects.transition() : rects).attr('width', function (id) {
            return widths[id];
        }).attr('height', function (id) {
            return heights[id];
        }).attr('x', xForLegendRect).attr('y', yForLegendRect);

        tiles = $$.legend.selectAll('line.' + CLASS.legendItemTile).data(targetIds);
        (withTransition ? tiles.transition() : tiles).style('stroke', $$.color).attr('x1', x1ForLegendTile).attr('y1', yForLegendTile).attr('x2', x2ForLegendTile).attr('y2', yForLegendTile);

        if (background) {
            (withTransition ? background.transition() : background).attr('height', $$.getLegendHeight() - 12).attr('width', maxWidth * (step + 1) + 10);
        }

        // toggle legend state
        $$.legend.selectAll('.' + CLASS.legendItem).classed(CLASS.legendItemHidden, function (id) {
            return !$$.isTargetToShow(id);
        });

        // Update all to reflect change of legend
        $$.updateLegendItemWidth(maxWidth);
        $$.updateLegendItemHeight(maxHeight);
        $$.updateLegendStep(step);
        // Update size and scale
        $$.updateSizes();
        $$.updateScales();
        $$.updateSvgSize();
        // Update g positions
        $$.transformAll(withTransitionForTransform, transitions);
        $$.legendHasRendered = true;
    };

    c3_chart_internal_fn.initTitle = function () {
        var $$ = this;
        $$.title = $$.svg.append("text").text($$.config.title_text).attr("class", $$.CLASS.title);
    };
    c3_chart_internal_fn.redrawTitle = function () {
        var $$ = this;
        $$.title.attr("x", $$.xForTitle.bind($$)).attr("y", $$.yForTitle.bind($$));
    };
    c3_chart_internal_fn.xForTitle = function () {
        var $$ = this,
            config = $$.config,
            position = config.title_position || 'left',
            x;
        if (position.indexOf('right') >= 0) {
            x = $$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width - config.title_padding.right;
        } else if (position.indexOf('center') >= 0) {
            x = ($$.currentWidth - $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).width) / 2;
        } else {
            // left
            x = config.title_padding.left;
        }
        return x;
    };
    c3_chart_internal_fn.yForTitle = function () {
        var $$ = this;
        return $$.config.title_padding.top + $$.getTextRect($$.title.node().textContent, $$.CLASS.title, $$.title.node()).height;
    };
    c3_chart_internal_fn.getTitlePadding = function () {
        var $$ = this;
        return $$.yForTitle() + $$.config.title_padding.bottom;
    };

    function Axis(owner) {
        API.call(this, owner);
    }

    inherit(API, Axis);

    Axis.prototype.init = function init() {

        var $$ = this.owner,
            config = $$.config,
            main = $$.main;
        $$.axes.x = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisX).attr("clip-path", $$.clipPathForXAxis).attr("transform", $$.getTranslate('x')).style("visibility", config.axis_x_show ? 'visible' : 'hidden');
        $$.axes.x.append("text").attr("class", CLASS.axisXLabel).attr("transform", config.axis_rotated ? "rotate(-90)" : "").style("text-anchor", this.textAnchorForXAxisLabel.bind(this));
        $$.axes.y = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY).attr("clip-path", config.axis_y_inner ? "" : $$.clipPathForYAxis).attr("transform", $$.getTranslate('y')).style("visibility", config.axis_y_show ? 'visible' : 'hidden');
        $$.axes.y.append("text").attr("class", CLASS.axisYLabel).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForYAxisLabel.bind(this));

        $$.axes.y2 = main.append("g").attr("class", CLASS.axis + ' ' + CLASS.axisY2)
        // clip-path?
        .attr("transform", $$.getTranslate('y2')).style("visibility", config.axis_y2_show ? 'visible' : 'hidden');
        $$.axes.y2.append("text").attr("class", CLASS.axisY2Label).attr("transform", config.axis_rotated ? "" : "rotate(-90)").style("text-anchor", this.textAnchorForY2AxisLabel.bind(this));
    };
    Axis.prototype.getXAxis = function getXAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
        var $$ = this.owner,
            config = $$.config,
            axisParams = {
            isCategory: $$.isCategorized(),
            withOuterTick: withOuterTick,
            tickMultiline: config.axis_x_tick_multiline,
            tickWidth: config.axis_x_tick_width,
            tickTextRotate: withoutRotateTickText ? 0 : config.axis_x_tick_rotate,
            withoutTransition: withoutTransition
        },
            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient);

        if ($$.isTimeSeries() && tickValues && typeof tickValues !== "function") {
            tickValues = tickValues.map(function (v) {
                return $$.parseDate(v);
            });
        }

        // Set tick
        axis.tickFormat(tickFormat).tickValues(tickValues);
        if ($$.isCategorized()) {
            axis.tickCentered(config.axis_x_tick_centered);
            if (isEmpty(config.axis_x_tick_culling)) {
                config.axis_x_tick_culling = false;
            }
        }

        return axis;
    };
    Axis.prototype.updateXAxisTickValues = function updateXAxisTickValues(targets, axis) {
        var $$ = this.owner,
            config = $$.config,
            tickValues;
        if (config.axis_x_tick_fit || config.axis_x_tick_count) {
            tickValues = this.generateTickValues($$.mapTargetsToUniqueXs(targets), config.axis_x_tick_count, $$.isTimeSeries());
        }
        if (axis) {
            axis.tickValues(tickValues);
        } else {
            $$.xAxis.tickValues(tickValues);
            $$.subXAxis.tickValues(tickValues);
        }
        return tickValues;
    };
    Axis.prototype.getYAxis = function getYAxis(scale, orient, tickFormat, tickValues, withOuterTick, withoutTransition, withoutRotateTickText) {
        var $$ = this.owner,
            config = $$.config,
            axisParams = {
            withOuterTick: withOuterTick,
            withoutTransition: withoutTransition,
            tickTextRotate: withoutRotateTickText ? 0 : config.axis_y_tick_rotate
        },
            axis = c3_axis($$.d3, axisParams).scale(scale).orient(orient).tickFormat(tickFormat);
        if ($$.isTimeSeriesY()) {
            axis.ticks($$.d3.time[config.axis_y_tick_time_value], config.axis_y_tick_time_interval);
        } else {
            axis.tickValues(tickValues);
        }
        return axis;
    };
    Axis.prototype.getId = function getId(id) {
        var config = this.owner.config;
        return id in config.data_axes ? config.data_axes[id] : 'y';
    };
    Axis.prototype.getXAxisTickFormat = function getXAxisTickFormat() {
        var $$ = this.owner,
            config = $$.config,
            format = $$.isTimeSeries() ? $$.defaultAxisTimeFormat : $$.isCategorized() ? $$.categoryName : function (v) {
            return v < 0 ? v.toFixed(0) : v;
        };
        if (config.axis_x_tick_format) {
            if (isFunction(config.axis_x_tick_format)) {
                format = config.axis_x_tick_format;
            } else if ($$.isTimeSeries()) {
                format = function format(date) {
                    return date ? $$.axisTimeFormat(config.axis_x_tick_format)(date) : "";
                };
            }
        }
        return isFunction(format) ? function (v) {
            return format.call($$, v);
        } : format;
    };
    Axis.prototype.getTickValues = function getTickValues(tickValues, axis) {
        return tickValues ? tickValues : axis ? axis.tickValues() : undefined;
    };
    Axis.prototype.getXAxisTickValues = function getXAxisTickValues() {
        return this.getTickValues(this.owner.config.axis_x_tick_values, this.owner.xAxis);
    };
    Axis.prototype.getYAxisTickValues = function getYAxisTickValues() {
        return this.getTickValues(this.owner.config.axis_y_tick_values, this.owner.yAxis);
    };
    Axis.prototype.getY2AxisTickValues = function getY2AxisTickValues() {
        return this.getTickValues(this.owner.config.axis_y2_tick_values, this.owner.y2Axis);
    };
    Axis.prototype.getLabelOptionByAxisId = function getLabelOptionByAxisId(axisId) {
        var $$ = this.owner,
            config = $$.config,
            option;
        if (axisId === 'y') {
            option = config.axis_y_label;
        } else if (axisId === 'y2') {
            option = config.axis_y2_label;
        } else if (axisId === 'x') {
            option = config.axis_x_label;
        }
        return option;
    };
    Axis.prototype.getLabelText = function getLabelText(axisId) {
        var option = this.getLabelOptionByAxisId(axisId);
        return isString(option) ? option : option ? option.text : null;
    };
    Axis.prototype.setLabelText = function setLabelText(axisId, text) {
        var $$ = this.owner,
            config = $$.config,
            option = this.getLabelOptionByAxisId(axisId);
        if (isString(option)) {
            if (axisId === 'y') {
                config.axis_y_label = text;
            } else if (axisId === 'y2') {
                config.axis_y2_label = text;
            } else if (axisId === 'x') {
                config.axis_x_label = text;
            }
        } else if (option) {
            option.text = text;
        }
    };
    Axis.prototype.getLabelPosition = function getLabelPosition(axisId, defaultPosition) {
        var option = this.getLabelOptionByAxisId(axisId),
            position = option && (typeof option === 'undefined' ? 'undefined' : _typeof(option)) === 'object' && option.position ? option.position : defaultPosition;
        return {
            isInner: position.indexOf('inner') >= 0,
            isOuter: position.indexOf('outer') >= 0,
            isLeft: position.indexOf('left') >= 0,
            isCenter: position.indexOf('center') >= 0,
            isRight: position.indexOf('right') >= 0,
            isTop: position.indexOf('top') >= 0,
            isMiddle: position.indexOf('middle') >= 0,
            isBottom: position.indexOf('bottom') >= 0
        };
    };
    Axis.prototype.getXAxisLabelPosition = function getXAxisLabelPosition() {
        return this.getLabelPosition('x', this.owner.config.axis_rotated ? 'inner-top' : 'inner-right');
    };
    Axis.prototype.getYAxisLabelPosition = function getYAxisLabelPosition() {
        return this.getLabelPosition('y', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
    };
    Axis.prototype.getY2AxisLabelPosition = function getY2AxisLabelPosition() {
        return this.getLabelPosition('y2', this.owner.config.axis_rotated ? 'inner-right' : 'inner-top');
    };
    Axis.prototype.getLabelPositionById = function getLabelPositionById(id) {
        return id === 'y2' ? this.getY2AxisLabelPosition() : id === 'y' ? this.getYAxisLabelPosition() : this.getXAxisLabelPosition();
    };
    Axis.prototype.textForXAxisLabel = function textForXAxisLabel() {
        return this.getLabelText('x');
    };
    Axis.prototype.textForYAxisLabel = function textForYAxisLabel() {
        return this.getLabelText('y');
    };
    Axis.prototype.textForY2AxisLabel = function textForY2AxisLabel() {
        return this.getLabelText('y2');
    };
    Axis.prototype.xForAxisLabel = function xForAxisLabel(forHorizontal, position) {
        var $$ = this.owner;
        if (forHorizontal) {
            return position.isLeft ? 0 : position.isCenter ? $$.width / 2 : $$.width;
        } else {
            return position.isBottom ? -$$.height : position.isMiddle ? -$$.height / 2 : 0;
        }
    };
    Axis.prototype.dxForAxisLabel = function dxForAxisLabel(forHorizontal, position) {
        if (forHorizontal) {
            return position.isLeft ? "0.5em" : position.isRight ? "-0.5em" : "0";
        } else {
            return position.isTop ? "-0.5em" : position.isBottom ? "0.5em" : "0";
        }
    };
    Axis.prototype.textAnchorForAxisLabel = function textAnchorForAxisLabel(forHorizontal, position) {
        if (forHorizontal) {
            return position.isLeft ? 'start' : position.isCenter ? 'middle' : 'end';
        } else {
            return position.isBottom ? 'start' : position.isMiddle ? 'middle' : 'end';
        }
    };
    Axis.prototype.xForXAxisLabel = function xForXAxisLabel() {
        return this.xForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
    };
    Axis.prototype.xForYAxisLabel = function xForYAxisLabel() {
        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
    };
    Axis.prototype.xForY2AxisLabel = function xForY2AxisLabel() {
        return this.xForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
    };
    Axis.prototype.dxForXAxisLabel = function dxForXAxisLabel() {
        return this.dxForAxisLabel(!this.owner.config.axis_rotated, this.getXAxisLabelPosition());
    };
    Axis.prototype.dxForYAxisLabel = function dxForYAxisLabel() {
        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getYAxisLabelPosition());
    };
    Axis.prototype.dxForY2AxisLabel = function dxForY2AxisLabel() {
        return this.dxForAxisLabel(this.owner.config.axis_rotated, this.getY2AxisLabelPosition());
    };
    Axis.prototype.dyForXAxisLabel = function dyForXAxisLabel() {
        var $$ = this.owner,
            config = $$.config,
            position = this.getXAxisLabelPosition();
        if (config.axis_rotated) {
            return position.isInner ? "1.2em" : -25 - this.getMaxTickWidth('x');
        } else {
            return position.isInner ? "-0.5em" : config.axis_x_height ? config.axis_x_height - 10 : "3em";
        }
    };
    Axis.prototype.dyForYAxisLabel = function dyForYAxisLabel() {
        var $$ = this.owner,
            position = this.getYAxisLabelPosition();
        if ($$.config.axis_rotated) {
            return position.isInner ? "-0.5em" : "3em";
        } else {
            return position.isInner ? "1.2em" : -10 - ($$.config.axis_y_inner ? 0 : this.getMaxTickWidth('y') + 10);
        }
    };
    Axis.prototype.dyForY2AxisLabel = function dyForY2AxisLabel() {
        var $$ = this.owner,
            position = this.getY2AxisLabelPosition();
        if ($$.config.axis_rotated) {
            return position.isInner ? "1.2em" : "-2.2em";
        } else {
            return position.isInner ? "-0.5em" : 15 + ($$.config.axis_y2_inner ? 0 : this.getMaxTickWidth('y2') + 15);
        }
    };
    Axis.prototype.textAnchorForXAxisLabel = function textAnchorForXAxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel(!$$.config.axis_rotated, this.getXAxisLabelPosition());
    };
    Axis.prototype.textAnchorForYAxisLabel = function textAnchorForYAxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getYAxisLabelPosition());
    };
    Axis.prototype.textAnchorForY2AxisLabel = function textAnchorForY2AxisLabel() {
        var $$ = this.owner;
        return this.textAnchorForAxisLabel($$.config.axis_rotated, this.getY2AxisLabelPosition());
    };
    Axis.prototype.getMaxTickWidth = function getMaxTickWidth(id, withoutRecompute) {
        var $$ = this.owner,
            config = $$.config,
            maxWidth = 0,
            targetsToShow,
            scale,
            axis,
            dummy,
            svg;
        if (withoutRecompute && $$.currentMaxTickWidths[id]) {
            return $$.currentMaxTickWidths[id];
        }
        if ($$.svg) {
            targetsToShow = $$.filterTargetsToShow($$.data.targets);
            if (id === 'y') {
                scale = $$.y.copy().domain($$.getYDomain(targetsToShow, 'y'));
                axis = this.getYAxis(scale, $$.yOrient, config.axis_y_tick_format, $$.yAxisTickValues, false, true, true);
            } else if (id === 'y2') {
                scale = $$.y2.copy().domain($$.getYDomain(targetsToShow, 'y2'));
                axis = this.getYAxis(scale, $$.y2Orient, config.axis_y2_tick_format, $$.y2AxisTickValues, false, true, true);
            } else {
                scale = $$.x.copy().domain($$.getXDomain(targetsToShow));
                axis = this.getXAxis(scale, $$.xOrient, $$.xAxisTickFormat, $$.xAxisTickValues, false, true, true);
                this.updateXAxisTickValues(targetsToShow, axis);
            }
            dummy = $$.d3.select('body').append('div').classed('c3', true);
            svg = dummy.append("svg").style('visibility', 'hidden').style('position', 'fixed').style('top', 0).style('left', 0), svg.append('g').call(axis).each(function () {
                $$.d3.select(this).selectAll('text').each(function () {
                    var box = this.getBoundingClientRect();
                    if (maxWidth < box.width) {
                        maxWidth = box.width;
                    }
                });
                dummy.remove();
            });
        }
        $$.currentMaxTickWidths[id] = maxWidth <= 0 ? $$.currentMaxTickWidths[id] : maxWidth;
        return $$.currentMaxTickWidths[id];
    };

    Axis.prototype.updateLabels = function updateLabels(withTransition) {
        var $$ = this.owner;
        var axisXLabel = $$.main.select('.' + CLASS.axisX + ' .' + CLASS.axisXLabel),
            axisYLabel = $$.main.select('.' + CLASS.axisY + ' .' + CLASS.axisYLabel),
            axisY2Label = $$.main.select('.' + CLASS.axisY2 + ' .' + CLASS.axisY2Label);
        (withTransition ? axisXLabel.transition() : axisXLabel).attr("x", this.xForXAxisLabel.bind(this)).attr("dx", this.dxForXAxisLabel.bind(this)).attr("dy", this.dyForXAxisLabel.bind(this)).text(this.textForXAxisLabel.bind(this));
        (withTransition ? axisYLabel.transition() : axisYLabel).attr("x", this.xForYAxisLabel.bind(this)).attr("dx", this.dxForYAxisLabel.bind(this)).attr("dy", this.dyForYAxisLabel.bind(this)).text(this.textForYAxisLabel.bind(this));
        (withTransition ? axisY2Label.transition() : axisY2Label).attr("x", this.xForY2AxisLabel.bind(this)).attr("dx", this.dxForY2AxisLabel.bind(this)).attr("dy", this.dyForY2AxisLabel.bind(this)).text(this.textForY2AxisLabel.bind(this));
    };
    Axis.prototype.getPadding = function getPadding(padding, key, defaultValue, domainLength) {
        var p = typeof padding === 'number' ? padding : padding[key];
        if (!isValue(p)) {
            return defaultValue;
        }
        if (padding.unit === 'ratio') {
            return padding[key] * domainLength;
        }
        // assume padding is pixels if unit is not specified
        return this.convertPixelsToAxisPadding(p, domainLength);
    };
    Axis.prototype.convertPixelsToAxisPadding = function convertPixelsToAxisPadding(pixels, domainLength) {
        var $$ = this.owner,
            length = $$.config.axis_rotated ? $$.width : $$.height;
        return domainLength * (pixels / length);
    };
    Axis.prototype.generateTickValues = function generateTickValues(values, tickCount, forTimeSeries) {
        var tickValues = values,
            targetCount,
            start,
            end,
            count,
            interval,
            i,
            tickValue;
        if (tickCount) {
            targetCount = isFunction(tickCount) ? tickCount() : tickCount;
            // compute ticks according to tickCount
            if (targetCount === 1) {
                tickValues = [values[0]];
            } else if (targetCount === 2) {
                tickValues = [values[0], values[values.length - 1]];
            } else if (targetCount > 2) {
                count = targetCount - 2;
                start = values[0];
                end = values[values.length - 1];
                interval = (end - start) / (count + 1);
                // re-construct unique values
                tickValues = [start];
                for (i = 0; i < count; i++) {
                    tickValue = +start + interval * (i + 1);
                    tickValues.push(forTimeSeries ? new Date(tickValue) : tickValue);
                }
                tickValues.push(end);
            }
        }
        if (!forTimeSeries) {
            tickValues = tickValues.sort(function (a, b) {
                return a - b;
            });
        }
        return tickValues;
    };
    Axis.prototype.generateTransitions = function generateTransitions(duration) {
        var $$ = this.owner,
            axes = $$.axes;
        return {
            axisX: duration ? axes.x.transition().duration(duration) : axes.x,
            axisY: duration ? axes.y.transition().duration(duration) : axes.y,
            axisY2: duration ? axes.y2.transition().duration(duration) : axes.y2,
            axisSubX: duration ? axes.subx.transition().duration(duration) : axes.subx
        };
    };
    Axis.prototype.redraw = function redraw(transitions, isHidden) {
        var $$ = this.owner;
        $$.axes.x.style("opacity", isHidden ? 0 : 1);
        $$.axes.y.style("opacity", isHidden ? 0 : 1);
        $$.axes.y2.style("opacity", isHidden ? 0 : 1);
        $$.axes.subx.style("opacity", isHidden ? 0 : 1);
        transitions.axisX.call($$.xAxis);
        transitions.axisY.call($$.yAxis);
        transitions.axisY2.call($$.y2Axis);
        transitions.axisSubX.call($$.subXAxis);
    };

    c3_chart_internal_fn.getClipPath = function (id) {
        var isIE9 = window.navigator.appVersion.toLowerCase().indexOf("msie 9.") >= 0;
        return "url(" + (isIE9 ? "" : document.URL.split('#')[0]) + "#" + id + ")";
    };
    c3_chart_internal_fn.appendClip = function (parent, id) {
        return parent.append("clipPath").attr("id", id).append("rect");
    };
    c3_chart_internal_fn.getAxisClipX = function (forHorizontal) {
        // axis line width + padding for left
        var left = Math.max(30, this.margin.left);
        return forHorizontal ? -(1 + left) : -(left - 1);
    };
    c3_chart_internal_fn.getAxisClipY = function (forHorizontal) {
        return forHorizontal ? -20 : -this.margin.top;
    };
    c3_chart_internal_fn.getXAxisClipX = function () {
        var $$ = this;
        return $$.getAxisClipX(!$$.config.axis_rotated);
    };
    c3_chart_internal_fn.getXAxisClipY = function () {
        var $$ = this;
        return $$.getAxisClipY(!$$.config.axis_rotated);
    };
    c3_chart_internal_fn.getYAxisClipX = function () {
        var $$ = this;
        return $$.config.axis_y_inner ? -1 : $$.getAxisClipX($$.config.axis_rotated);
    };
    c3_chart_internal_fn.getYAxisClipY = function () {
        var $$ = this;
        return $$.getAxisClipY($$.config.axis_rotated);
    };
    c3_chart_internal_fn.getAxisClipWidth = function (forHorizontal) {
        var $$ = this,
            left = Math.max(30, $$.margin.left),
            right = Math.max(30, $$.margin.right);
        // width + axis line width + padding for left/right
        return forHorizontal ? $$.width + 2 + left + right : $$.margin.left + 20;
    };
    c3_chart_internal_fn.getAxisClipHeight = function (forHorizontal) {
        // less than 20 is not enough to show the axis label 'outer' without legend
        return (forHorizontal ? this.margin.bottom : this.margin.top + this.height) + 20;
    };
    c3_chart_internal_fn.getXAxisClipWidth = function () {
        var $$ = this;
        return $$.getAxisClipWidth(!$$.config.axis_rotated);
    };
    c3_chart_internal_fn.getXAxisClipHeight = function () {
        var $$ = this;
        return $$.getAxisClipHeight(!$$.config.axis_rotated);
    };
    c3_chart_internal_fn.getYAxisClipWidth = function () {
        var $$ = this;
        return $$.getAxisClipWidth($$.config.axis_rotated) + ($$.config.axis_y_inner ? 20 : 0);
    };
    c3_chart_internal_fn.getYAxisClipHeight = function () {
        var $$ = this;
        return $$.getAxisClipHeight($$.config.axis_rotated);
    };

    c3_chart_internal_fn.initPie = function () {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config;
        $$.pie = d3.layout.pie().value(function (d) {
            return d.values.reduce(function (a, b) {
                return a + b.value;
            }, 0);
        });
        if (!config.data_order) {
            $$.pie.sort(null);
        }
    };

    c3_chart_internal_fn.updateRadius = function () {
        var $$ = this,
            config = $$.config,
            w = config.gauge_width || config.donut_width;
        $$.radiusExpanded = Math.min($$.arcWidth, $$.arcHeight) / 2;
        $$.radius = $$.radiusExpanded * 0.95;
        $$.innerRadiusRatio = w ? ($$.radius - w) / $$.radius : 0.6;
        $$.innerRadius = $$.hasType('donut') || $$.hasType('gauge') ? $$.radius * $$.innerRadiusRatio : 0;
    };

    c3_chart_internal_fn.updateArc = function () {
        var $$ = this;
        $$.svgArc = $$.getSvgArc();
        $$.svgArcExpanded = $$.getSvgArcExpanded();
        $$.svgArcExpandedSub = $$.getSvgArcExpanded(0.98);
    };

    c3_chart_internal_fn.updateAngle = function (d) {
        var $$ = this,
            config = $$.config,
            found = false,
            index = 0,
            gMin,
            gMax,
            gTic,
            gValue;

        if (!config) {
            return null;
        }

        $$.pie($$.filterTargetsToShow($$.data.targets)).forEach(function (t) {
            if (!found && t.data.id === d.data.id) {
                found = true;
                d = t;
                d.index = index;
            }
            index++;
        });
        if (isNaN(d.startAngle)) {
            d.startAngle = 0;
        }
        if (isNaN(d.endAngle)) {
            d.endAngle = d.startAngle;
        }
        if ($$.isGaugeType(d.data)) {
            gMin = config.gauge_min;
            gMax = config.gauge_max;
            gTic = Math.PI * (config.gauge_fullCircle ? 2 : 1) / (gMax - gMin);
            gValue = d.value < gMin ? 0 : d.value < gMax ? d.value - gMin : gMax - gMin;
            d.startAngle = config.gauge_startingAngle;
            d.endAngle = d.startAngle + gTic * gValue;
        }
        return found ? d : null;
    };

    c3_chart_internal_fn.getSvgArc = function () {
        var $$ = this,
            arc = $$.d3.svg.arc().outerRadius($$.radius).innerRadius($$.innerRadius),
            newArc = function newArc(d, withoutUpdate) {
            var updated;
            if (withoutUpdate) {
                return arc(d);
            } // for interpolate
            updated = $$.updateAngle(d);
            return updated ? arc(updated) : "M 0 0";
        };
        // TODO: extends all function
        newArc.centroid = arc.centroid;
        return newArc;
    };

    c3_chart_internal_fn.getSvgArcExpanded = function (rate) {
        var $$ = this,
            arc = $$.d3.svg.arc().outerRadius($$.radiusExpanded * (rate ? rate : 1)).innerRadius($$.innerRadius);
        return function (d) {
            var updated = $$.updateAngle(d);
            return updated ? arc(updated) : "M 0 0";
        };
    };

    c3_chart_internal_fn.getArc = function (d, withoutUpdate, force) {
        return force || this.isArcType(d.data) ? this.svgArc(d, withoutUpdate) : "M 0 0";
    };

    c3_chart_internal_fn.transformForArcLabel = function (d) {
        var $$ = this,
            config = $$.config,
            updated = $$.updateAngle(d),
            c,
            x,
            y,
            h,
            ratio,
            translate = "";
        if (updated && !$$.hasType('gauge')) {
            c = this.svgArc.centroid(updated);
            x = isNaN(c[0]) ? 0 : c[0];
            y = isNaN(c[1]) ? 0 : c[1];
            h = Math.sqrt(x * x + y * y);
            if ($$.hasType('donut') && config.donut_label_ratio) {
                ratio = isFunction(config.donut_label_ratio) ? config.donut_label_ratio(d, $$.radius, h) : config.donut_label_ratio;
            } else if ($$.hasType('pie') && config.pie_label_ratio) {
                ratio = isFunction(config.pie_label_ratio) ? config.pie_label_ratio(d, $$.radius, h) : config.pie_label_ratio;
            } else {
                ratio = $$.radius && h ? (36 / $$.radius > 0.375 ? 1.175 - 36 / $$.radius : 0.8) * $$.radius / h : 0;
            }
            translate = "translate(" + x * ratio + ',' + y * ratio + ")";
        }
        return translate;
    };

    c3_chart_internal_fn.getArcRatio = function (d) {
        var $$ = this,
            config = $$.config,
            whole = Math.PI * ($$.hasType('gauge') && !config.gauge_fullCircle ? 1 : 2);
        return d ? (d.endAngle - d.startAngle) / whole : null;
    };

    c3_chart_internal_fn.convertToArcData = function (d) {
        return this.addName({
            id: d.data.id,
            value: d.value,
            ratio: this.getArcRatio(d),
            index: d.index
        });
    };

    c3_chart_internal_fn.textForArcLabel = function (d) {
        var $$ = this,
            updated,
            value,
            ratio,
            id,
            format;
        if (!$$.shouldShowArcLabel()) {
            return "";
        }
        updated = $$.updateAngle(d);
        value = updated ? updated.value : null;
        ratio = $$.getArcRatio(updated);
        id = d.data.id;
        if (!$$.hasType('gauge') && !$$.meetsArcLabelThreshold(ratio)) {
            return "";
        }
        format = $$.getArcLabelFormat();
        return format ? format(value, ratio, id) : $$.defaultArcValueFormat(value, ratio);
    };

    c3_chart_internal_fn.expandArc = function (targetIds) {
        var $$ = this,
            interval;

        // MEMO: avoid to cancel transition
        if ($$.transiting) {
            interval = window.setInterval(function () {
                if (!$$.transiting) {
                    window.clearInterval(interval);
                    if ($$.legend.selectAll('.c3-legend-item-focused').size() > 0) {
                        $$.expandArc(targetIds);
                    }
                }
            }, 10);
            return;
        }

        targetIds = $$.mapToTargetIds(targetIds);

        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).each(function (d) {
            if (!$$.shouldExpand(d.data.id)) {
                return;
            }
            $$.d3.select(this).selectAll('path').transition().duration($$.expandDuration(d.data.id)).attr("d", $$.svgArcExpanded).transition().duration($$.expandDuration(d.data.id) * 2).attr("d", $$.svgArcExpandedSub).each(function (d) {
                if ($$.isDonutType(d.data)) {
                    // callback here
                }
            });
        });
    };

    c3_chart_internal_fn.unexpandArc = function (targetIds) {
        var $$ = this;

        if ($$.transiting) {
            return;
        }

        targetIds = $$.mapToTargetIds(targetIds);

        $$.svg.selectAll($$.selectorTargets(targetIds, '.' + CLASS.chartArc)).selectAll('path').transition().duration(function (d) {
            return $$.expandDuration(d.data.id);
        }).attr("d", $$.svgArc);
        $$.svg.selectAll('.' + CLASS.arc).style("opacity", 1);
    };

    c3_chart_internal_fn.expandDuration = function (id) {
        var $$ = this,
            config = $$.config;

        if ($$.isDonutType(id)) {
            return config.donut_expand_duration;
        } else if ($$.isGaugeType(id)) {
            return config.gauge_expand_duration;
        } else if ($$.isPieType(id)) {
            return config.pie_expand_duration;
        } else {
            return 50;
        }
    };

    c3_chart_internal_fn.shouldExpand = function (id) {
        var $$ = this,
            config = $$.config;
        return $$.isDonutType(id) && config.donut_expand || $$.isGaugeType(id) && config.gauge_expand || $$.isPieType(id) && config.pie_expand;
    };

    c3_chart_internal_fn.shouldShowArcLabel = function () {
        var $$ = this,
            config = $$.config,
            shouldShow = true;
        if ($$.hasType('donut')) {
            shouldShow = config.donut_label_show;
        } else if ($$.hasType('pie')) {
            shouldShow = config.pie_label_show;
        }
        // when gauge, always true
        return shouldShow;
    };

    c3_chart_internal_fn.meetsArcLabelThreshold = function (ratio) {
        var $$ = this,
            config = $$.config,
            threshold = $$.hasType('donut') ? config.donut_label_threshold : config.pie_label_threshold;
        return ratio >= threshold;
    };

    c3_chart_internal_fn.getArcLabelFormat = function () {
        var $$ = this,
            config = $$.config,
            format = config.pie_label_format;
        if ($$.hasType('gauge')) {
            format = config.gauge_label_format;
        } else if ($$.hasType('donut')) {
            format = config.donut_label_format;
        }
        return format;
    };

    c3_chart_internal_fn.getArcTitle = function () {
        var $$ = this;
        return $$.hasType('donut') ? $$.config.donut_title : "";
    };

    c3_chart_internal_fn.updateTargetsForArc = function (targets) {
        var $$ = this,
            main = $$.main,
            mainPieUpdate,
            mainPieEnter,
            classChartArc = $$.classChartArc.bind($$),
            classArcs = $$.classArcs.bind($$),
            classFocus = $$.classFocus.bind($$);
        mainPieUpdate = main.select('.' + CLASS.chartArcs).selectAll('.' + CLASS.chartArc).data($$.pie(targets)).attr("class", function (d) {
            return classChartArc(d) + classFocus(d.data);
        });
        mainPieEnter = mainPieUpdate.enter().append("g").attr("class", classChartArc);
        mainPieEnter.append('g').attr('class', classArcs);
        mainPieEnter.append("text").attr("dy", $$.hasType('gauge') ? "-.1em" : ".35em").style("opacity", 0).style("text-anchor", "middle").style("pointer-events", "none");
        // MEMO: can not keep same color..., but not bad to update color in redraw
        //mainPieUpdate.exit().remove();
    };

    c3_chart_internal_fn.initArc = function () {
        var $$ = this;
        $$.arcs = $$.main.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartArcs).attr("transform", $$.getTranslate('arc'));
        $$.arcs.append('text').attr('class', CLASS.chartArcsTitle).style("text-anchor", "middle").text($$.getArcTitle());
    };

    c3_chart_internal_fn.redrawArc = function (duration, durationForExit, withTransform) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config,
            main = $$.main,
            mainArc;
        mainArc = main.selectAll('.' + CLASS.arcs).selectAll('.' + CLASS.arc).data($$.arcData.bind($$));
        mainArc.enter().append('path').attr("class", $$.classArc.bind($$)).style("fill", function (d) {
            return $$.color(d.data);
        }).style("cursor", function (d) {
            return config.interaction_enabled && config.data_selection_isselectable(d) ? "pointer" : null;
        }).style("opacity", 0).each(function (d) {
            if ($$.isGaugeType(d.data)) {
                d.startAngle = d.endAngle = config.gauge_startingAngle;
            }
            this._current = d;
        });
        mainArc.attr("transform", function (d) {
            return !$$.isGaugeType(d.data) && withTransform ? "scale(0)" : "";
        }).style("opacity", function (d) {
            return d === this._current ? 0 : 1;
        }).on('mouseover', config.interaction_enabled ? function (d) {
            var updated, arcData;
            if ($$.transiting) {
                // skip while transiting
                return;
            }
            updated = $$.updateAngle(d);
            if (updated) {
                arcData = $$.convertToArcData(updated);
                // transitions
                $$.expandArc(updated.data.id);
                $$.api.focus(updated.data.id);
                $$.toggleFocusLegend(updated.data.id, true);
                $$.config.data_onmouseover(arcData, this);
            }
        } : null).on('mousemove', config.interaction_enabled ? function (d) {
            var updated = $$.updateAngle(d),
                arcData,
                selectedData;
            if (updated) {
                arcData = $$.convertToArcData(updated), selectedData = [arcData];
                $$.showTooltip(selectedData, this);
            }
        } : null).on('mouseout', config.interaction_enabled ? function (d) {
            var updated, arcData;
            if ($$.transiting) {
                // skip while transiting
                return;
            }
            updated = $$.updateAngle(d);
            if (updated) {
                arcData = $$.convertToArcData(updated);
                // transitions
                $$.unexpandArc(updated.data.id);
                $$.api.revert();
                $$.revertLegend();
                $$.hideTooltip();
                $$.config.data_onmouseout(arcData, this);
            }
        } : null).on('click', config.interaction_enabled ? function (d, i) {
            var updated = $$.updateAngle(d),
                arcData;
            if (updated) {
                arcData = $$.convertToArcData(updated);
                if ($$.toggleShape) {
                    $$.toggleShape(this, arcData, i);
                }
                $$.config.data_onclick.call($$.api, arcData, this);
            }
        } : null).each(function () {
            $$.transiting = true;
        }).transition().duration(duration).attrTween("d", function (d) {
            var updated = $$.updateAngle(d),
                interpolate;
            if (!updated) {
                return function () {
                    return "M 0 0";
                };
            }
            //                if (this._current === d) {
            //                    this._current = {
            //                        startAngle: Math.PI*2,
            //                        endAngle: Math.PI*2,
            //                    };
            //                }
            if (isNaN(this._current.startAngle)) {
                this._current.startAngle = 0;
            }
            if (isNaN(this._current.endAngle)) {
                this._current.endAngle = this._current.startAngle;
            }
            interpolate = d3.interpolate(this._current, updated);
            this._current = interpolate(0);
            return function (t) {
                var interpolated = interpolate(t);
                interpolated.data = d.data; // data.id will be updated by interporator
                return $$.getArc(interpolated, true);
            };
        }).attr("transform", withTransform ? "scale(1)" : "").style("fill", function (d) {
            return $$.levelColor ? $$.levelColor(d.data.values[0].value) : $$.color(d.data.id);
        }) // Where gauge reading color would receive customization.
        .style("opacity", 1).call($$.endall, function () {
            $$.transiting = false;
        });
        mainArc.exit().transition().duration(durationForExit).style('opacity', 0).remove();
        main.selectAll('.' + CLASS.chartArc).select('text').style("opacity", 0).attr('class', function (d) {
            return $$.isGaugeType(d.data) ? CLASS.gaugeValue : '';
        }).text($$.textForArcLabel.bind($$)).attr("transform", $$.transformForArcLabel.bind($$)).style('font-size', function (d) {
            return $$.isGaugeType(d.data) ? Math.round($$.radius / 5) + 'px' : '';
        }).transition().duration(duration).style("opacity", function (d) {
            return $$.isTargetToShow(d.data.id) && $$.isArcType(d.data) ? 1 : 0;
        });
        main.select('.' + CLASS.chartArcsTitle).style("opacity", $$.hasType('donut') || $$.hasType('gauge') ? 1 : 0);

        if ($$.hasType('gauge')) {
            $$.arcs.select('.' + CLASS.chartArcsBackground).attr("d", function () {
                var d = {
                    data: [{ value: config.gauge_max }],
                    startAngle: config.gauge_startingAngle,
                    endAngle: -1 * config.gauge_startingAngle
                };
                return $$.getArc(d, true, true);
            });
            $$.arcs.select('.' + CLASS.chartArcsGaugeUnit).attr("dy", ".75em").text(config.gauge_label_show ? config.gauge_units : '');
            $$.arcs.select('.' + CLASS.chartArcsGaugeMin).attr("dx", -1 * ($$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2)) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? config.gauge_min : '');
            $$.arcs.select('.' + CLASS.chartArcsGaugeMax).attr("dx", $$.innerRadius + ($$.radius - $$.innerRadius) / (config.gauge_fullCircle ? 1 : 2) + "px").attr("dy", "1.2em").text(config.gauge_label_show ? config.gauge_max : '');
        }
    };
    c3_chart_internal_fn.initGauge = function () {
        var arcs = this.arcs;
        if (this.hasType('gauge')) {
            arcs.append('path').attr("class", CLASS.chartArcsBackground);
            arcs.append("text").attr("class", CLASS.chartArcsGaugeUnit).style("text-anchor", "middle").style("pointer-events", "none");
            arcs.append("text").attr("class", CLASS.chartArcsGaugeMin).style("text-anchor", "middle").style("pointer-events", "none");
            arcs.append("text").attr("class", CLASS.chartArcsGaugeMax).style("text-anchor", "middle").style("pointer-events", "none");
        }
    };
    c3_chart_internal_fn.getGaugeLabelHeight = function () {
        return this.config.gauge_label_show ? 20 : 0;
    };

    c3_chart_internal_fn.initRegion = function () {
        var $$ = this;
        $$.region = $$.main.append('g').attr("clip-path", $$.clipPath).attr("class", CLASS.regions);
    };
    c3_chart_internal_fn.updateRegion = function (duration) {
        var $$ = this,
            config = $$.config;

        // hide if arc type
        $$.region.style('visibility', $$.hasArcType() ? 'hidden' : 'visible');

        $$.mainRegion = $$.main.select('.' + CLASS.regions).selectAll('.' + CLASS.region).data(config.regions);
        $$.mainRegion.enter().append('g').append('rect').style("fill-opacity", 0);
        $$.mainRegion.attr('class', $$.classRegion.bind($$));
        $$.mainRegion.exit().transition().duration(duration).style("opacity", 0).remove();
    };
    c3_chart_internal_fn.redrawRegion = function (withTransition) {
        var $$ = this,
            regions = $$.mainRegion.selectAll('rect').each(function () {
            // data is binded to g and it's not transferred to rect (child node) automatically,
            // then data of each rect has to be updated manually.
            // TODO: there should be more efficient way to solve this?
            var parentData = $$.d3.select(this.parentNode).datum();
            $$.d3.select(this).datum(parentData);
        }),
            x = $$.regionX.bind($$),
            y = $$.regionY.bind($$),
            w = $$.regionWidth.bind($$),
            h = $$.regionHeight.bind($$);
        return [(withTransition ? regions.transition() : regions).attr("x", x).attr("y", y).attr("width", w).attr("height", h).style("fill-opacity", function (d) {
            return isValue(d.opacity) ? d.opacity : 0.1;
        })];
    };
    c3_chart_internal_fn.regionX = function (d) {
        var $$ = this,
            config = $$.config,
            xPos,
            yScale = d.axis === 'y' ? $$.y : $$.y2;
        if (d.axis === 'y' || d.axis === 'y2') {
            xPos = config.axis_rotated ? 'start' in d ? yScale(d.start) : 0 : 0;
        } else {
            xPos = config.axis_rotated ? 0 : 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0;
        }
        return xPos;
    };
    c3_chart_internal_fn.regionY = function (d) {
        var $$ = this,
            config = $$.config,
            yPos,
            yScale = d.axis === 'y' ? $$.y : $$.y2;
        if (d.axis === 'y' || d.axis === 'y2') {
            yPos = config.axis_rotated ? 0 : 'end' in d ? yScale(d.end) : 0;
        } else {
            yPos = config.axis_rotated ? 'start' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.start) : d.start) : 0 : 0;
        }
        return yPos;
    };
    c3_chart_internal_fn.regionWidth = function (d) {
        var $$ = this,
            config = $$.config,
            start = $$.regionX(d),
            end,
            yScale = d.axis === 'y' ? $$.y : $$.y2;
        if (d.axis === 'y' || d.axis === 'y2') {
            end = config.axis_rotated ? 'end' in d ? yScale(d.end) : $$.width : $$.width;
        } else {
            end = config.axis_rotated ? $$.width : 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.width;
        }
        return end < start ? 0 : end - start;
    };
    c3_chart_internal_fn.regionHeight = function (d) {
        var $$ = this,
            config = $$.config,
            start = this.regionY(d),
            end,
            yScale = d.axis === 'y' ? $$.y : $$.y2;
        if (d.axis === 'y' || d.axis === 'y2') {
            end = config.axis_rotated ? $$.height : 'start' in d ? yScale(d.start) : $$.height;
        } else {
            end = config.axis_rotated ? 'end' in d ? $$.x($$.isTimeSeries() ? $$.parseDate(d.end) : d.end) : $$.height : $$.height;
        }
        return end < start ? 0 : end - start;
    };
    c3_chart_internal_fn.isRegionOnX = function (d) {
        return !d.axis || d.axis === 'x';
    };

    c3_chart_internal_fn.drag = function (mouse) {
        var $$ = this,
            config = $$.config,
            main = $$.main,
            d3 = $$.d3;
        var sx, sy, mx, my, minX, maxX, minY, maxY;

        if ($$.hasArcType()) {
            return;
        }
        if (!config.data_selection_enabled) {
            return;
        } // do nothing if not selectable
        if (config.zoom_enabled && !$$.zoom.altDomain) {
            return;
        } // skip if zoomable because of conflict drag dehavior
        if (!config.data_selection_multiple) {
            return;
        } // skip when single selection because drag is used for multiple selection

        sx = $$.dragStart[0];
        sy = $$.dragStart[1];
        mx = mouse[0];
        my = mouse[1];
        minX = Math.min(sx, mx);
        maxX = Math.max(sx, mx);
        minY = config.data_selection_grouped ? $$.margin.top : Math.min(sy, my);
        maxY = config.data_selection_grouped ? $$.height : Math.max(sy, my);

        main.select('.' + CLASS.dragarea).attr('x', minX).attr('y', minY).attr('width', maxX - minX).attr('height', maxY - minY);
        // TODO: binary search when multiple xs
        main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).filter(function (d) {
            return config.data_selection_isselectable(d);
        }).each(function (d, i) {
            var shape = d3.select(this),
                isSelected = shape.classed(CLASS.SELECTED),
                isIncluded = shape.classed(CLASS.INCLUDED),
                _x,
                _y,
                _w,
                _h,
                toggle,
                isWithin = false,
                box;
            if (shape.classed(CLASS.circle)) {
                _x = shape.attr("cx") * 1;
                _y = shape.attr("cy") * 1;
                toggle = $$.togglePoint;
                isWithin = minX < _x && _x < maxX && minY < _y && _y < maxY;
            } else if (shape.classed(CLASS.bar)) {
                box = getPathBox(this);
                _x = box.x;
                _y = box.y;
                _w = box.width;
                _h = box.height;
                toggle = $$.togglePath;
                isWithin = !(maxX < _x || _x + _w < minX) && !(maxY < _y || _y + _h < minY);
            } else {
                // line/area selection not supported yet
                return;
            }
            if (isWithin ^ isIncluded) {
                shape.classed(CLASS.INCLUDED, !isIncluded);
                // TODO: included/unincluded callback here
                shape.classed(CLASS.SELECTED, !isSelected);
                toggle.call($$, !isSelected, shape, d, i);
            }
        });
    };

    c3_chart_internal_fn.dragstart = function (mouse) {
        var $$ = this,
            config = $$.config;
        if ($$.hasArcType()) {
            return;
        }
        if (!config.data_selection_enabled) {
            return;
        } // do nothing if not selectable
        $$.dragStart = mouse;
        $$.main.select('.' + CLASS.chart).append('rect').attr('class', CLASS.dragarea).style('opacity', 0.1);
        $$.dragging = true;
    };

    c3_chart_internal_fn.dragend = function () {
        var $$ = this,
            config = $$.config;
        if ($$.hasArcType()) {
            return;
        }
        if (!config.data_selection_enabled) {
            return;
        } // do nothing if not selectable
        $$.main.select('.' + CLASS.dragarea).transition().duration(100).style('opacity', 0).remove();
        $$.main.selectAll('.' + CLASS.shape).classed(CLASS.INCLUDED, false);
        $$.dragging = false;
    };

    c3_chart_internal_fn.selectPoint = function (target, d, i) {
        var $$ = this,
            config = $$.config,
            cx = (config.axis_rotated ? $$.circleY : $$.circleX).bind($$),
            cy = (config.axis_rotated ? $$.circleX : $$.circleY).bind($$),
            r = $$.pointSelectR.bind($$);
        config.data_onselected.call($$.api, d, target.node());
        // add selected-circle on low layer g
        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).data([d]).enter().append('circle').attr("class", function () {
            return $$.generateClass(CLASS.selectedCircle, i);
        }).attr("cx", cx).attr("cy", cy).attr("stroke", function () {
            return $$.color(d);
        }).attr("r", function (d) {
            return $$.pointSelectR(d) * 1.4;
        }).transition().duration(100).attr("r", r);
    };
    c3_chart_internal_fn.unselectPoint = function (target, d, i) {
        var $$ = this;
        $$.config.data_onunselected.call($$.api, d, target.node());
        // remove selected-circle from low layer g
        $$.main.select('.' + CLASS.selectedCircles + $$.getTargetSelectorSuffix(d.id)).selectAll('.' + CLASS.selectedCircle + '-' + i).transition().duration(100).attr('r', 0).remove();
    };
    c3_chart_internal_fn.togglePoint = function (selected, target, d, i) {
        selected ? this.selectPoint(target, d, i) : this.unselectPoint(target, d, i);
    };
    c3_chart_internal_fn.selectPath = function (target, d) {
        var $$ = this;
        $$.config.data_onselected.call($$, d, target.node());
        if ($$.config.interaction_brighten) {
            target.transition().duration(100).style("fill", function () {
                return $$.d3.rgb($$.color(d)).brighter(0.75);
            });
        }
    };
    c3_chart_internal_fn.unselectPath = function (target, d) {
        var $$ = this;
        $$.config.data_onunselected.call($$, d, target.node());
        if ($$.config.interaction_brighten) {
            target.transition().duration(100).style("fill", function () {
                return $$.color(d);
            });
        }
    };
    c3_chart_internal_fn.togglePath = function (selected, target, d, i) {
        selected ? this.selectPath(target, d, i) : this.unselectPath(target, d, i);
    };
    c3_chart_internal_fn.getToggle = function (that, d) {
        var $$ = this,
            toggle;
        if (that.nodeName === 'circle') {
            if ($$.isStepType(d)) {
                // circle is hidden in step chart, so treat as within the click area
                toggle = function toggle() {}; // TODO: how to select step chart?
            } else {
                toggle = $$.togglePoint;
            }
        } else if (that.nodeName === 'path') {
            toggle = $$.togglePath;
        }
        return toggle;
    };
    c3_chart_internal_fn.toggleShape = function (that, d, i) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config,
            shape = d3.select(that),
            isSelected = shape.classed(CLASS.SELECTED),
            toggle = $$.getToggle(that, d).bind($$);

        if (config.data_selection_enabled && config.data_selection_isselectable(d)) {
            if (!config.data_selection_multiple) {
                $$.main.selectAll('.' + CLASS.shapes + (config.data_selection_grouped ? $$.getTargetSelectorSuffix(d.id) : "")).selectAll('.' + CLASS.shape).each(function (d, i) {
                    var shape = d3.select(this);
                    if (shape.classed(CLASS.SELECTED)) {
                        toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                    }
                });
            }
            shape.classed(CLASS.SELECTED, !isSelected);
            toggle(!isSelected, shape, d, i);
        }
    };

    c3_chart_internal_fn.initBrush = function () {
        var $$ = this,
            d3 = $$.d3;
        $$.brush = d3.svg.brush().on("brush", function () {
            $$.redrawForBrush();
        });
        $$.brush.update = function () {
            if ($$.context) {
                $$.context.select('.' + CLASS.brush).call(this);
            }
            return this;
        };
        $$.brush.scale = function (scale) {
            return $$.config.axis_rotated ? this.y(scale) : this.x(scale);
        };
    };
    c3_chart_internal_fn.initSubchart = function () {
        var $$ = this,
            config = $$.config,
            context = $$.context = $$.svg.append("g").attr("transform", $$.getTranslate('context')),
            visibility = config.subchart_show ? 'visible' : 'hidden';

        context.style('visibility', visibility);

        // Define g for chart area
        context.append('g').attr("clip-path", $$.clipPathForSubchart).attr('class', CLASS.chart);

        // Define g for bar chart area
        context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartBars);

        // Define g for line chart area
        context.select('.' + CLASS.chart).append("g").attr("class", CLASS.chartLines);

        // Add extent rect for Brush
        context.append("g").attr("clip-path", $$.clipPath).attr("class", CLASS.brush).call($$.brush);

        // ATTENTION: This must be called AFTER chart added
        // Add Axis
        $$.axes.subx = context.append("g").attr("class", CLASS.axisX).attr("transform", $$.getTranslate('subx')).attr("clip-path", config.axis_rotated ? "" : $$.clipPathForXAxis).style("visibility", config.subchart_axis_x_show ? visibility : 'hidden');
    };
    c3_chart_internal_fn.updateTargetsForSubchart = function (targets) {
        var $$ = this,
            context = $$.context,
            config = $$.config,
            contextLineEnter,
            contextLineUpdate,
            contextBarEnter,
            contextBarUpdate,
            classChartBar = $$.classChartBar.bind($$),
            classBars = $$.classBars.bind($$),
            classChartLine = $$.classChartLine.bind($$),
            classLines = $$.classLines.bind($$),
            classAreas = $$.classAreas.bind($$);

        if (config.subchart_show) {
            //-- Bar --//
            contextBarUpdate = context.select('.' + CLASS.chartBars).selectAll('.' + CLASS.chartBar).data(targets).attr('class', classChartBar);
            contextBarEnter = contextBarUpdate.enter().append('g').style('opacity', 0).attr('class', classChartBar);
            // Bars for each data
            contextBarEnter.append('g').attr("class", classBars);

            //-- Line --//
            contextLineUpdate = context.select('.' + CLASS.chartLines).selectAll('.' + CLASS.chartLine).data(targets).attr('class', classChartLine);
            contextLineEnter = contextLineUpdate.enter().append('g').style('opacity', 0).attr('class', classChartLine);
            // Lines for each data
            contextLineEnter.append("g").attr("class", classLines);
            // Area
            contextLineEnter.append("g").attr("class", classAreas);

            //-- Brush --//
            context.selectAll('.' + CLASS.brush + ' rect').attr(config.axis_rotated ? "width" : "height", config.axis_rotated ? $$.width2 : $$.height2);
        }
    };
    c3_chart_internal_fn.updateBarForSubchart = function (durationForExit) {
        var $$ = this;
        $$.contextBar = $$.context.selectAll('.' + CLASS.bars).selectAll('.' + CLASS.bar).data($$.barData.bind($$));
        $$.contextBar.enter().append('path').attr("class", $$.classBar.bind($$)).style("stroke", 'none').style("fill", $$.color);
        $$.contextBar.style("opacity", $$.initialOpacity.bind($$));
        $$.contextBar.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawBarForSubchart = function (drawBarOnSub, withTransition, duration) {
        (withTransition ? this.contextBar.transition(Math.random().toString()).duration(duration) : this.contextBar).attr('d', drawBarOnSub).style('opacity', 1);
    };
    c3_chart_internal_fn.updateLineForSubchart = function (durationForExit) {
        var $$ = this;
        $$.contextLine = $$.context.selectAll('.' + CLASS.lines).selectAll('.' + CLASS.line).data($$.lineData.bind($$));
        $$.contextLine.enter().append('path').attr('class', $$.classLine.bind($$)).style('stroke', $$.color);
        $$.contextLine.style("opacity", $$.initialOpacity.bind($$));
        $$.contextLine.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawLineForSubchart = function (drawLineOnSub, withTransition, duration) {
        (withTransition ? this.contextLine.transition(Math.random().toString()).duration(duration) : this.contextLine).attr("d", drawLineOnSub).style('opacity', 1);
    };
    c3_chart_internal_fn.updateAreaForSubchart = function (durationForExit) {
        var $$ = this,
            d3 = $$.d3;
        $$.contextArea = $$.context.selectAll('.' + CLASS.areas).selectAll('.' + CLASS.area).data($$.lineData.bind($$));
        $$.contextArea.enter().append('path').attr("class", $$.classArea.bind($$)).style("fill", $$.color).style("opacity", function () {
            $$.orgAreaOpacity = +d3.select(this).style('opacity');return 0;
        });
        $$.contextArea.style("opacity", 0);
        $$.contextArea.exit().transition().duration(durationForExit).style('opacity', 0).remove();
    };
    c3_chart_internal_fn.redrawAreaForSubchart = function (drawAreaOnSub, withTransition, duration) {
        (withTransition ? this.contextArea.transition(Math.random().toString()).duration(duration) : this.contextArea).attr("d", drawAreaOnSub).style("fill", this.color).style("opacity", this.orgAreaOpacity);
    };
    c3_chart_internal_fn.redrawSubchart = function (withSubchart, transitions, duration, durationForExit, areaIndices, barIndices, lineIndices) {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config,
            drawAreaOnSub,
            drawBarOnSub,
            drawLineOnSub;

        $$.context.style('visibility', config.subchart_show ? 'visible' : 'hidden');

        // subchart
        if (config.subchart_show) {
            // reflect main chart to extent on subchart if zoomed
            if (d3.event && d3.event.type === 'zoom') {
                $$.brush.extent($$.x.orgDomain()).update();
            }
            // update subchart elements if needed
            if (withSubchart) {

                // extent rect
                if (!$$.brush.empty()) {
                    $$.brush.extent($$.x.orgDomain()).update();
                }
                // setup drawer - MEMO: this must be called after axis updated
                drawAreaOnSub = $$.generateDrawArea(areaIndices, true);
                drawBarOnSub = $$.generateDrawBar(barIndices, true);
                drawLineOnSub = $$.generateDrawLine(lineIndices, true);

                $$.updateBarForSubchart(duration);
                $$.updateLineForSubchart(duration);
                $$.updateAreaForSubchart(duration);

                $$.redrawBarForSubchart(drawBarOnSub, duration, duration);
                $$.redrawLineForSubchart(drawLineOnSub, duration, duration);
                $$.redrawAreaForSubchart(drawAreaOnSub, duration, duration);
            }
        }
    };
    c3_chart_internal_fn.redrawForBrush = function () {
        var $$ = this,
            x = $$.x;
        $$.redraw({
            withTransition: false,
            withY: $$.config.zoom_rescale,
            withSubchart: false,
            withUpdateXDomain: true,
            withDimension: false
        });
        $$.config.subchart_onbrush.call($$.api, x.orgDomain());
    };
    c3_chart_internal_fn.transformContext = function (withTransition, transitions) {
        var $$ = this,
            subXAxis;
        if (transitions && transitions.axisSubX) {
            subXAxis = transitions.axisSubX;
        } else {
            subXAxis = $$.context.select('.' + CLASS.axisX);
            if (withTransition) {
                subXAxis = subXAxis.transition();
            }
        }
        $$.context.attr("transform", $$.getTranslate('context'));
        subXAxis.attr("transform", $$.getTranslate('subx'));
    };
    c3_chart_internal_fn.getDefaultExtent = function () {
        var $$ = this,
            config = $$.config,
            extent = isFunction(config.axis_x_extent) ? config.axis_x_extent($$.getXDomain($$.data.targets)) : config.axis_x_extent;
        if ($$.isTimeSeries()) {
            extent = [$$.parseDate(extent[0]), $$.parseDate(extent[1])];
        }
        return extent;
    };

    c3_chart_internal_fn.initZoom = function () {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config,
            startEvent;

        $$.zoom = d3.behavior.zoom().on("zoomstart", function () {
            startEvent = d3.event.sourceEvent;
            $$.zoom.altDomain = d3.event.sourceEvent.altKey ? $$.x.orgDomain() : null;
            config.zoom_onzoomstart.call($$.api, d3.event.sourceEvent);
        }).on("zoom", function () {
            $$.redrawForZoom.call($$);
        }).on('zoomend', function () {
            var event = d3.event.sourceEvent;
            // if click, do nothing. otherwise, click interaction will be canceled.
            if (event && startEvent.clientX === event.clientX && startEvent.clientY === event.clientY) {
                return;
            }
            $$.redrawEventRect();
            $$.updateZoom();
            config.zoom_onzoomend.call($$.api, $$.x.orgDomain());
        });
        $$.zoom.scale = function (scale) {
            return config.axis_rotated ? this.y(scale) : this.x(scale);
        };
        $$.zoom.orgScaleExtent = function () {
            var extent = config.zoom_extent ? config.zoom_extent : [1, 10];
            return [extent[0], Math.max($$.getMaxDataCount() / extent[1], extent[1])];
        };
        $$.zoom.updateScaleExtent = function () {
            var ratio = diffDomain($$.x.orgDomain()) / diffDomain($$.getZoomDomain()),
                extent = this.orgScaleExtent();
            this.scaleExtent([extent[0] * ratio, extent[1] * ratio]);
            return this;
        };
    };
    c3_chart_internal_fn.getZoomDomain = function () {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3,
            min = d3.min([$$.orgXDomain[0], config.zoom_x_min]),
            max = d3.max([$$.orgXDomain[1], config.zoom_x_max]);
        return [min, max];
    };
    c3_chart_internal_fn.updateZoom = function () {
        var $$ = this,
            z = $$.config.zoom_enabled ? $$.zoom : function () {};
        $$.main.select('.' + CLASS.zoomRect).call(z).on("dblclick.zoom", null);
        $$.main.selectAll('.' + CLASS.eventRect).call(z).on("dblclick.zoom", null);
    };
    c3_chart_internal_fn.redrawForZoom = function () {
        var $$ = this,
            d3 = $$.d3,
            config = $$.config,
            zoom = $$.zoom,
            x = $$.x;
        if (!config.zoom_enabled) {
            return;
        }
        if ($$.filterTargetsToShow($$.data.targets).length === 0) {
            return;
        }
        if (d3.event.sourceEvent.type === 'mousemove' && zoom.altDomain) {
            x.domain(zoom.altDomain);
            zoom.scale(x).updateScaleExtent();
            return;
        }
        if ($$.isCategorized() && x.orgDomain()[0] === $$.orgXDomain[0]) {
            x.domain([$$.orgXDomain[0] - 1e-10, x.orgDomain()[1]]);
        }
        $$.redraw({
            withTransition: false,
            withY: config.zoom_rescale,
            withSubchart: false,
            withEventRect: false,
            withDimension: false
        });
        if (d3.event.sourceEvent.type === 'mousemove') {
            $$.cancelClick = true;
        }
        config.zoom_onzoom.call($$.api, x.orgDomain());
    };

    c3_chart_internal_fn.generateColor = function () {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3,
            colors = config.data_colors,
            pattern = notEmpty(config.color_pattern) ? config.color_pattern : d3.scale.category10().range(),
            callback = config.data_color,
            ids = [];

        return function (d) {
            var id = d.id || d.data && d.data.id || d,
                color;

            // if callback function is provided
            if (colors[id] instanceof Function) {
                color = colors[id](d);
            }
            // if specified, choose that color
            else if (colors[id]) {
                    color = colors[id];
                }
                // if not specified, choose from pattern
                else {
                        if (ids.indexOf(id) < 0) {
                            ids.push(id);
                        }
                        color = pattern[ids.indexOf(id) % pattern.length];
                        colors[id] = color;
                    }
            return callback instanceof Function ? callback(color, d) : color;
        };
    };
    c3_chart_internal_fn.generateLevelColor = function () {
        var $$ = this,
            config = $$.config,
            colors = config.color_pattern,
            threshold = config.color_threshold,
            asValue = threshold.unit === 'value',
            values = threshold.values && threshold.values.length ? threshold.values : [],
            max = threshold.max || 100;
        return notEmpty(config.color_threshold) ? function (value) {
            var i,
                v,
                color = colors[colors.length - 1];
            for (i = 0; i < values.length; i++) {
                v = asValue ? value : value * 100 / max;
                if (v < values[i]) {
                    color = colors[i];
                    break;
                }
            }
            return color;
        } : null;
    };

    c3_chart_internal_fn.getYFormat = function (forArc) {
        var $$ = this,
            formatForY = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.yFormat,
            formatForY2 = forArc && !$$.hasType('gauge') ? $$.defaultArcValueFormat : $$.y2Format;
        return function (v, ratio, id) {
            var format = $$.axis.getId(id) === 'y2' ? formatForY2 : formatForY;
            return format.call($$, v, ratio);
        };
    };
    c3_chart_internal_fn.yFormat = function (v) {
        var $$ = this,
            config = $$.config,
            format = config.axis_y_tick_format ? config.axis_y_tick_format : $$.defaultValueFormat;
        return format(v);
    };
    c3_chart_internal_fn.y2Format = function (v) {
        var $$ = this,
            config = $$.config,
            format = config.axis_y2_tick_format ? config.axis_y2_tick_format : $$.defaultValueFormat;
        return format(v);
    };
    c3_chart_internal_fn.defaultValueFormat = function (v) {
        return isValue(v) ? +v : "";
    };
    c3_chart_internal_fn.defaultArcValueFormat = function (v, ratio) {
        return (ratio * 100).toFixed(1) + '%';
    };
    c3_chart_internal_fn.dataLabelFormat = function (targetId) {
        var $$ = this,
            data_labels = $$.config.data_labels,
            format,
            defaultFormat = function defaultFormat(v) {
            return isValue(v) ? +v : "";
        };
        // find format according to axis id
        if (typeof data_labels.format === 'function') {
            format = data_labels.format;
        } else if (_typeof(data_labels.format) === 'object') {
            if (data_labels.format[targetId]) {
                format = data_labels.format[targetId] === true ? defaultFormat : data_labels.format[targetId];
            } else {
                format = function format() {
                    return '';
                };
            }
        } else {
            format = defaultFormat;
        }
        return format;
    };

    c3_chart_internal_fn.hasCaches = function (ids) {
        for (var i = 0; i < ids.length; i++) {
            if (!(ids[i] in this.cache)) {
                return false;
            }
        }
        return true;
    };
    c3_chart_internal_fn.addCache = function (id, target) {
        this.cache[id] = this.cloneTarget(target);
    };
    c3_chart_internal_fn.getCaches = function (ids) {
        var targets = [],
            i;
        for (i = 0; i < ids.length; i++) {
            if (ids[i] in this.cache) {
                targets.push(this.cloneTarget(this.cache[ids[i]]));
            }
        }
        return targets;
    };

    var CLASS = c3_chart_internal_fn.CLASS = {
        target: 'c3-target',
        chart: 'c3-chart',
        chartLine: 'c3-chart-line',
        chartLines: 'c3-chart-lines',
        chartBar: 'c3-chart-bar',
        chartBars: 'c3-chart-bars',
        chartText: 'c3-chart-text',
        chartTexts: 'c3-chart-texts',
        chartArc: 'c3-chart-arc',
        chartArcs: 'c3-chart-arcs',
        chartArcsTitle: 'c3-chart-arcs-title',
        chartArcsBackground: 'c3-chart-arcs-background',
        chartArcsGaugeUnit: 'c3-chart-arcs-gauge-unit',
        chartArcsGaugeMax: 'c3-chart-arcs-gauge-max',
        chartArcsGaugeMin: 'c3-chart-arcs-gauge-min',
        selectedCircle: 'c3-selected-circle',
        selectedCircles: 'c3-selected-circles',
        eventRect: 'c3-event-rect',
        eventRects: 'c3-event-rects',
        eventRectsSingle: 'c3-event-rects-single',
        eventRectsMultiple: 'c3-event-rects-multiple',
        zoomRect: 'c3-zoom-rect',
        brush: 'c3-brush',
        focused: 'c3-focused',
        defocused: 'c3-defocused',
        region: 'c3-region',
        regions: 'c3-regions',
        title: 'c3-title',
        tooltipContainer: 'c3-tooltip-container',
        tooltip: 'c3-tooltip',
        tooltipName: 'c3-tooltip-name',
        shape: 'c3-shape',
        shapes: 'c3-shapes',
        line: 'c3-line',
        lines: 'c3-lines',
        bar: 'c3-bar',
        bars: 'c3-bars',
        circle: 'c3-circle',
        circles: 'c3-circles',
        arc: 'c3-arc',
        arcs: 'c3-arcs',
        area: 'c3-area',
        areas: 'c3-areas',
        empty: 'c3-empty',
        text: 'c3-text',
        texts: 'c3-texts',
        gaugeValue: 'c3-gauge-value',
        grid: 'c3-grid',
        gridLines: 'c3-grid-lines',
        xgrid: 'c3-xgrid',
        xgrids: 'c3-xgrids',
        xgridLine: 'c3-xgrid-line',
        xgridLines: 'c3-xgrid-lines',
        xgridFocus: 'c3-xgrid-focus',
        ygrid: 'c3-ygrid',
        ygrids: 'c3-ygrids',
        ygridLine: 'c3-ygrid-line',
        ygridLines: 'c3-ygrid-lines',
        axis: 'c3-axis',
        axisX: 'c3-axis-x',
        axisXLabel: 'c3-axis-x-label',
        axisY: 'c3-axis-y',
        axisYLabel: 'c3-axis-y-label',
        axisY2: 'c3-axis-y2',
        axisY2Label: 'c3-axis-y2-label',
        legendBackground: 'c3-legend-background',
        legendItem: 'c3-legend-item',
        legendItemEvent: 'c3-legend-item-event',
        legendItemTile: 'c3-legend-item-tile',
        legendItemHidden: 'c3-legend-item-hidden',
        legendItemFocused: 'c3-legend-item-focused',
        dragarea: 'c3-dragarea',
        EXPANDED: '_expanded_',
        SELECTED: '_selected_',
        INCLUDED: '_included_'
    };
    c3_chart_internal_fn.generateClass = function (prefix, targetId) {
        return " " + prefix + " " + prefix + this.getTargetSelectorSuffix(targetId);
    };
    c3_chart_internal_fn.classText = function (d) {
        return this.generateClass(CLASS.text, d.index);
    };
    c3_chart_internal_fn.classTexts = function (d) {
        return this.generateClass(CLASS.texts, d.id);
    };
    c3_chart_internal_fn.classShape = function (d) {
        return this.generateClass(CLASS.shape, d.index);
    };
    c3_chart_internal_fn.classShapes = function (d) {
        return this.generateClass(CLASS.shapes, d.id);
    };
    c3_chart_internal_fn.classLine = function (d) {
        return this.classShape(d) + this.generateClass(CLASS.line, d.id);
    };
    c3_chart_internal_fn.classLines = function (d) {
        return this.classShapes(d) + this.generateClass(CLASS.lines, d.id);
    };
    c3_chart_internal_fn.classCircle = function (d) {
        return this.classShape(d) + this.generateClass(CLASS.circle, d.index);
    };
    c3_chart_internal_fn.classCircles = function (d) {
        return this.classShapes(d) + this.generateClass(CLASS.circles, d.id);
    };
    c3_chart_internal_fn.classBar = function (d) {
        return this.classShape(d) + this.generateClass(CLASS.bar, d.index);
    };
    c3_chart_internal_fn.classBars = function (d) {
        return this.classShapes(d) + this.generateClass(CLASS.bars, d.id);
    };
    c3_chart_internal_fn.classArc = function (d) {
        return this.classShape(d.data) + this.generateClass(CLASS.arc, d.data.id);
    };
    c3_chart_internal_fn.classArcs = function (d) {
        return this.classShapes(d.data) + this.generateClass(CLASS.arcs, d.data.id);
    };
    c3_chart_internal_fn.classArea = function (d) {
        return this.classShape(d) + this.generateClass(CLASS.area, d.id);
    };
    c3_chart_internal_fn.classAreas = function (d) {
        return this.classShapes(d) + this.generateClass(CLASS.areas, d.id);
    };
    c3_chart_internal_fn.classRegion = function (d, i) {
        return this.generateClass(CLASS.region, i) + ' ' + ('class' in d ? d['class'] : '');
    };
    c3_chart_internal_fn.classEvent = function (d) {
        return this.generateClass(CLASS.eventRect, d.index);
    };
    c3_chart_internal_fn.classTarget = function (id) {
        var $$ = this;
        var additionalClassSuffix = $$.config.data_classes[id],
            additionalClass = '';
        if (additionalClassSuffix) {
            additionalClass = ' ' + CLASS.target + '-' + additionalClassSuffix;
        }
        return $$.generateClass(CLASS.target, id) + additionalClass;
    };
    c3_chart_internal_fn.classFocus = function (d) {
        return this.classFocused(d) + this.classDefocused(d);
    };
    c3_chart_internal_fn.classFocused = function (d) {
        return ' ' + (this.focusedTargetIds.indexOf(d.id) >= 0 ? CLASS.focused : '');
    };
    c3_chart_internal_fn.classDefocused = function (d) {
        return ' ' + (this.defocusedTargetIds.indexOf(d.id) >= 0 ? CLASS.defocused : '');
    };
    c3_chart_internal_fn.classChartText = function (d) {
        return CLASS.chartText + this.classTarget(d.id);
    };
    c3_chart_internal_fn.classChartLine = function (d) {
        return CLASS.chartLine + this.classTarget(d.id);
    };
    c3_chart_internal_fn.classChartBar = function (d) {
        return CLASS.chartBar + this.classTarget(d.id);
    };
    c3_chart_internal_fn.classChartArc = function (d) {
        return CLASS.chartArc + this.classTarget(d.data.id);
    };
    c3_chart_internal_fn.getTargetSelectorSuffix = function (targetId) {
        return targetId || targetId === 0 ? ('-' + targetId).replace(/[\s?!@#$%^&*()_=+,.<>'":;\[\]\/|~`{}\\]/g, '-') : '';
    };
    c3_chart_internal_fn.selectorTarget = function (id, prefix) {
        return (prefix || '') + '.' + CLASS.target + this.getTargetSelectorSuffix(id);
    };
    c3_chart_internal_fn.selectorTargets = function (ids, prefix) {
        var $$ = this;
        ids = ids || [];
        return ids.length ? ids.map(function (id) {
            return $$.selectorTarget(id, prefix);
        }) : null;
    };
    c3_chart_internal_fn.selectorLegend = function (id) {
        return '.' + CLASS.legendItem + this.getTargetSelectorSuffix(id);
    };
    c3_chart_internal_fn.selectorLegends = function (ids) {
        var $$ = this;
        return ids && ids.length ? ids.map(function (id) {
            return $$.selectorLegend(id);
        }) : null;
    };

    var isValue = c3_chart_internal_fn.isValue = function (v) {
        return v || v === 0;
    },
        isFunction = c3_chart_internal_fn.isFunction = function (o) {
        return typeof o === 'function';
    },
        isString = c3_chart_internal_fn.isString = function (o) {
        return typeof o === 'string';
    },
        isUndefined = c3_chart_internal_fn.isUndefined = function (v) {
        return typeof v === 'undefined';
    },
        isDefined = c3_chart_internal_fn.isDefined = function (v) {
        return typeof v !== 'undefined';
    },
        ceil10 = c3_chart_internal_fn.ceil10 = function (v) {
        return Math.ceil(v / 10) * 10;
    },
        asHalfPixel = c3_chart_internal_fn.asHalfPixel = function (n) {
        return Math.ceil(n) + 0.5;
    },
        diffDomain = c3_chart_internal_fn.diffDomain = function (d) {
        return d[1] - d[0];
    },
        isEmpty = c3_chart_internal_fn.isEmpty = function (o) {
        return typeof o === 'undefined' || o === null || isString(o) && o.length === 0 || (typeof o === 'undefined' ? 'undefined' : _typeof(o)) === 'object' && Object.keys(o).length === 0;
    },
        notEmpty = c3_chart_internal_fn.notEmpty = function (o) {
        return !c3_chart_internal_fn.isEmpty(o);
    },
        getOption = c3_chart_internal_fn.getOption = function (options, key, defaultValue) {
        return isDefined(options[key]) ? options[key] : defaultValue;
    },
        hasValue = c3_chart_internal_fn.hasValue = function (dict, value) {
        var found = false;
        Object.keys(dict).forEach(function (key) {
            if (dict[key] === value) {
                found = true;
            }
        });
        return found;
    },
        sanitise = c3_chart_internal_fn.sanitise = function (str) {
        return typeof str === 'string' ? str.replace(/</g, '&lt;').replace(/>/g, '&gt;') : str;
    },
        getPathBox = c3_chart_internal_fn.getPathBox = function (path) {
        var box = path.getBoundingClientRect(),
            items = [path.pathSegList.getItem(0), path.pathSegList.getItem(1)],
            minX = items[0].x,
            minY = Math.min(items[0].y, items[1].y);
        return { x: minX, y: minY, width: box.width, height: box.height };
    };

    c3_chart_fn.focus = function (targetIds) {
        var $$ = this.internal,
            candidates;

        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), this.revert();
        this.defocus();
        candidates.classed(CLASS.focused, true).classed(CLASS.defocused, false);
        if ($$.hasArcType()) {
            $$.expandArc(targetIds);
        }
        $$.toggleFocusLegend(targetIds, true);

        $$.focusedTargetIds = targetIds;
        $$.defocusedTargetIds = $$.defocusedTargetIds.filter(function (id) {
            return targetIds.indexOf(id) < 0;
        });
    };

    c3_chart_fn.defocus = function (targetIds) {
        var $$ = this.internal,
            candidates;

        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds.filter($$.isTargetToShow, $$))), candidates.classed(CLASS.focused, false).classed(CLASS.defocused, true);
        if ($$.hasArcType()) {
            $$.unexpandArc(targetIds);
        }
        $$.toggleFocusLegend(targetIds, false);

        $$.focusedTargetIds = $$.focusedTargetIds.filter(function (id) {
            return targetIds.indexOf(id) < 0;
        });
        $$.defocusedTargetIds = targetIds;
    };

    c3_chart_fn.revert = function (targetIds) {
        var $$ = this.internal,
            candidates;

        targetIds = $$.mapToTargetIds(targetIds);
        candidates = $$.svg.selectAll($$.selectorTargets(targetIds)); // should be for all targets

        candidates.classed(CLASS.focused, false).classed(CLASS.defocused, false);
        if ($$.hasArcType()) {
            $$.unexpandArc(targetIds);
        }
        if ($$.config.legend_show) {
            $$.showLegend(targetIds.filter($$.isLegendToShow.bind($$)));
            $$.legend.selectAll($$.selectorLegends(targetIds)).filter(function () {
                return $$.d3.select(this).classed(CLASS.legendItemFocused);
            }).classed(CLASS.legendItemFocused, false);
        }

        $$.focusedTargetIds = [];
        $$.defocusedTargetIds = [];
    };

    c3_chart_fn.show = function (targetIds, options) {
        var $$ = this.internal,
            targets;

        targetIds = $$.mapToTargetIds(targetIds);
        options = options || {};

        $$.removeHiddenTargetIds(targetIds);
        targets = $$.svg.selectAll($$.selectorTargets(targetIds));

        targets.transition().style('opacity', 1, 'important').call($$.endall, function () {
            targets.style('opacity', null).style('opacity', 1);
        });

        if (options.withLegend) {
            $$.showLegend(targetIds);
        }

        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
    };

    c3_chart_fn.hide = function (targetIds, options) {
        var $$ = this.internal,
            targets;

        targetIds = $$.mapToTargetIds(targetIds);
        options = options || {};

        $$.addHiddenTargetIds(targetIds);
        targets = $$.svg.selectAll($$.selectorTargets(targetIds));

        targets.transition().style('opacity', 0, 'important').call($$.endall, function () {
            targets.style('opacity', null).style('opacity', 0);
        });

        if (options.withLegend) {
            $$.hideLegend(targetIds);
        }

        $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
    };

    c3_chart_fn.toggle = function (targetIds, options) {
        var that = this,
            $$ = this.internal;
        $$.mapToTargetIds(targetIds).forEach(function (targetId) {
            $$.isTargetToShow(targetId) ? that.hide(targetId, options) : that.show(targetId, options);
        });
    };

    c3_chart_fn.zoom = function (domain) {
        var $$ = this.internal;
        if (domain) {
            if ($$.isTimeSeries()) {
                domain = domain.map(function (x) {
                    return $$.parseDate(x);
                });
            }
            $$.brush.extent(domain);
            $$.redraw({ withUpdateXDomain: true, withY: $$.config.zoom_rescale });
            $$.config.zoom_onzoom.call(this, $$.x.orgDomain());
        }
        return $$.brush.extent();
    };
    c3_chart_fn.zoom.enable = function (enabled) {
        var $$ = this.internal;
        $$.config.zoom_enabled = enabled;
        $$.updateAndRedraw();
    };
    c3_chart_fn.unzoom = function () {
        var $$ = this.internal;
        $$.brush.clear().update();
        $$.redraw({ withUpdateXDomain: true });
    };

    c3_chart_fn.zoom.max = function (max) {
        var $$ = this.internal,
            config = $$.config,
            d3 = $$.d3;
        if (max === 0 || max) {
            config.zoom_x_max = d3.max([$$.orgXDomain[1], max]);
        } else {
            return config.zoom_x_max;
        }
    };

    c3_chart_fn.zoom.min = function (min) {
        var $$ = this.internal,
            config = $$.config,
            d3 = $$.d3;
        if (min === 0 || min) {
            config.zoom_x_min = d3.min([$$.orgXDomain[0], min]);
        } else {
            return config.zoom_x_min;
        }
    };

    c3_chart_fn.zoom.range = function (range) {
        if (arguments.length) {
            if (isDefined(range.max)) {
                this.domain.max(range.max);
            }
            if (isDefined(range.min)) {
                this.domain.min(range.min);
            }
        } else {
            return {
                max: this.domain.max(),
                min: this.domain.min()
            };
        }
    };

    c3_chart_fn.load = function (args) {
        var $$ = this.internal,
            config = $$.config;
        // update xs if specified
        if (args.xs) {
            $$.addXs(args.xs);
        }
        // update names if exists
        if ('names' in args) {
            c3_chart_fn.data.names.bind(this)(args.names);
        }
        // update classes if exists
        if ('classes' in args) {
            Object.keys(args.classes).forEach(function (id) {
                config.data_classes[id] = args.classes[id];
            });
        }
        // update categories if exists
        if ('categories' in args && $$.isCategorized()) {
            config.axis_x_categories = args.categories;
        }
        // update axes if exists
        if ('axes' in args) {
            Object.keys(args.axes).forEach(function (id) {
                config.data_axes[id] = args.axes[id];
            });
        }
        // update colors if exists
        if ('colors' in args) {
            Object.keys(args.colors).forEach(function (id) {
                config.data_colors[id] = args.colors[id];
            });
        }
        // use cache if exists
        if ('cacheIds' in args && $$.hasCaches(args.cacheIds)) {
            $$.load($$.getCaches(args.cacheIds), args.done);
            return;
        }
        // unload if needed
        if ('unload' in args) {
            // TODO: do not unload if target will load (included in url/rows/columns)
            $$.unload($$.mapToTargetIds(typeof args.unload === 'boolean' && args.unload ? null : args.unload), function () {
                $$.loadFromArgs(args);
            });
        } else {
            $$.loadFromArgs(args);
        }
    };

    c3_chart_fn.unload = function (args) {
        var $$ = this.internal;
        args = args || {};
        if (args instanceof Array) {
            args = { ids: args };
        } else if (typeof args === 'string') {
            args = { ids: [args] };
        }
        $$.unload($$.mapToTargetIds(args.ids), function () {
            $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true, withLegend: true });
            if (args.done) {
                args.done();
            }
        });
    };

    c3_chart_fn.flow = function (args) {
        var $$ = this.internal,
            targets,
            data,
            notfoundIds = [],
            orgDataCount = $$.getMaxDataCount(),
            dataCount,
            domain,
            baseTarget,
            baseValue,
            length = 0,
            tail = 0,
            diff,
            to;

        if (args.json) {
            data = $$.convertJsonToData(args.json, args.keys);
        } else if (args.rows) {
            data = $$.convertRowsToData(args.rows);
        } else if (args.columns) {
            data = $$.convertColumnsToData(args.columns);
        } else {
            return;
        }
        targets = $$.convertDataToTargets(data, true);

        // Update/Add data
        $$.data.targets.forEach(function (t) {
            var found = false,
                i,
                j;
            for (i = 0; i < targets.length; i++) {
                if (t.id === targets[i].id) {
                    found = true;

                    if (t.values[t.values.length - 1]) {
                        tail = t.values[t.values.length - 1].index + 1;
                    }
                    length = targets[i].values.length;

                    for (j = 0; j < length; j++) {
                        targets[i].values[j].index = tail + j;
                        if (!$$.isTimeSeries()) {
                            targets[i].values[j].x = tail + j;
                        }
                    }
                    t.values = t.values.concat(targets[i].values);

                    targets.splice(i, 1);
                    break;
                }
            }
            if (!found) {
                notfoundIds.push(t.id);
            }
        });

        // Append null for not found targets
        $$.data.targets.forEach(function (t) {
            var i, j;
            for (i = 0; i < notfoundIds.length; i++) {
                if (t.id === notfoundIds[i]) {
                    tail = t.values[t.values.length - 1].index + 1;
                    for (j = 0; j < length; j++) {
                        t.values.push({
                            id: t.id,
                            index: tail + j,
                            x: $$.isTimeSeries() ? $$.getOtherTargetX(tail + j) : tail + j,
                            value: null
                        });
                    }
                }
            }
        });

        // Generate null values for new target
        if ($$.data.targets.length) {
            targets.forEach(function (t) {
                var i,
                    missing = [];
                for (i = $$.data.targets[0].values[0].index; i < tail; i++) {
                    missing.push({
                        id: t.id,
                        index: i,
                        x: $$.isTimeSeries() ? $$.getOtherTargetX(i) : i,
                        value: null
                    });
                }
                t.values.forEach(function (v) {
                    v.index += tail;
                    if (!$$.isTimeSeries()) {
                        v.x += tail;
                    }
                });
                t.values = missing.concat(t.values);
            });
        }
        $$.data.targets = $$.data.targets.concat(targets); // add remained

        // check data count because behavior needs to change when it's only one
        dataCount = $$.getMaxDataCount();
        baseTarget = $$.data.targets[0];
        baseValue = baseTarget.values[0];

        // Update length to flow if needed
        if (isDefined(args.to)) {
            length = 0;
            to = $$.isTimeSeries() ? $$.parseDate(args.to) : args.to;
            baseTarget.values.forEach(function (v) {
                if (v.x < to) {
                    length++;
                }
            });
        } else if (isDefined(args.length)) {
            length = args.length;
        }

        // If only one data, update the domain to flow from left edge of the chart
        if (!orgDataCount) {
            if ($$.isTimeSeries()) {
                if (baseTarget.values.length > 1) {
                    diff = baseTarget.values[baseTarget.values.length - 1].x - baseValue.x;
                } else {
                    diff = baseValue.x - $$.getXDomain($$.data.targets)[0];
                }
            } else {
                diff = 1;
            }
            domain = [baseValue.x - diff, baseValue.x];
            $$.updateXDomain(null, true, true, false, domain);
        } else if (orgDataCount === 1) {
            if ($$.isTimeSeries()) {
                diff = (baseTarget.values[baseTarget.values.length - 1].x - baseValue.x) / 2;
                domain = [new Date(+baseValue.x - diff), new Date(+baseValue.x + diff)];
                $$.updateXDomain(null, true, true, false, domain);
            }
        }

        // Set targets
        $$.updateTargets($$.data.targets);

        // Redraw with new targets
        $$.redraw({
            flow: {
                index: baseValue.index,
                length: length,
                duration: isValue(args.duration) ? args.duration : $$.config.transition_duration,
                done: args.done,
                orgDataCount: orgDataCount
            },
            withLegend: true,
            withTransition: orgDataCount > 1,
            withTrimXDomain: false,
            withUpdateXAxis: true
        });
    };

    c3_chart_internal_fn.generateFlow = function (args) {
        var $$ = this,
            config = $$.config,
            d3 = $$.d3;

        return function () {
            var targets = args.targets,
                flow = args.flow,
                drawBar = args.drawBar,
                drawLine = args.drawLine,
                drawArea = args.drawArea,
                cx = args.cx,
                cy = args.cy,
                xv = args.xv,
                xForText = args.xForText,
                yForText = args.yForText,
                duration = args.duration;

            var translateX,
                scaleX = 1,
                transform,
                flowIndex = flow.index,
                flowLength = flow.length,
                flowStart = $$.getValueOnIndex($$.data.targets[0].values, flowIndex),
                flowEnd = $$.getValueOnIndex($$.data.targets[0].values, flowIndex + flowLength),
                orgDomain = $$.x.domain(),
                domain,
                durationForFlow = flow.duration || duration,
                done = flow.done || function () {},
                wait = $$.generateWait();

            var xgrid = $$.xgrid || d3.selectAll([]),
                xgridLines = $$.xgridLines || d3.selectAll([]),
                mainRegion = $$.mainRegion || d3.selectAll([]),
                mainText = $$.mainText || d3.selectAll([]),
                mainBar = $$.mainBar || d3.selectAll([]),
                mainLine = $$.mainLine || d3.selectAll([]),
                mainArea = $$.mainArea || d3.selectAll([]),
                mainCircle = $$.mainCircle || d3.selectAll([]);

            // set flag
            $$.flowing = true;

            // remove head data after rendered
            $$.data.targets.forEach(function (d) {
                d.values.splice(0, flowLength);
            });

            // update x domain to generate axis elements for flow
            domain = $$.updateXDomain(targets, true, true);
            // update elements related to x scale
            if ($$.updateXGrid) {
                $$.updateXGrid(true);
            }

            // generate transform to flow
            if (!flow.orgDataCount) {
                // if empty
                if ($$.data.targets[0].values.length !== 1) {
                    translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
                } else {
                    if ($$.isTimeSeries()) {
                        flowStart = $$.getValueOnIndex($$.data.targets[0].values, 0);
                        flowEnd = $$.getValueOnIndex($$.data.targets[0].values, $$.data.targets[0].values.length - 1);
                        translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
                    } else {
                        translateX = diffDomain(domain) / 2;
                    }
                }
            } else if (flow.orgDataCount === 1 || (flowStart && flowStart.x) === (flowEnd && flowEnd.x)) {
                translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
            } else {
                if ($$.isTimeSeries()) {
                    translateX = $$.x(orgDomain[0]) - $$.x(domain[0]);
                } else {
                    translateX = $$.x(flowStart.x) - $$.x(flowEnd.x);
                }
            }
            scaleX = diffDomain(orgDomain) / diffDomain(domain);
            transform = 'translate(' + translateX + ',0) scale(' + scaleX + ',1)';

            $$.hideXGridFocus();

            d3.transition().ease('linear').duration(durationForFlow).each(function () {
                wait.add($$.axes.x.transition().call($$.xAxis));
                wait.add(mainBar.transition().attr('transform', transform));
                wait.add(mainLine.transition().attr('transform', transform));
                wait.add(mainArea.transition().attr('transform', transform));
                wait.add(mainCircle.transition().attr('transform', transform));
                wait.add(mainText.transition().attr('transform', transform));
                wait.add(mainRegion.filter($$.isRegionOnX).transition().attr('transform', transform));
                wait.add(xgrid.transition().attr('transform', transform));
                wait.add(xgridLines.transition().attr('transform', transform));
            }).call(wait, function () {
                var i,
                    shapes = [],
                    texts = [],
                    eventRects = [];

                // remove flowed elements
                if (flowLength) {
                    for (i = 0; i < flowLength; i++) {
                        shapes.push('.' + CLASS.shape + '-' + (flowIndex + i));
                        texts.push('.' + CLASS.text + '-' + (flowIndex + i));
                        eventRects.push('.' + CLASS.eventRect + '-' + (flowIndex + i));
                    }
                    $$.svg.selectAll('.' + CLASS.shapes).selectAll(shapes).remove();
                    $$.svg.selectAll('.' + CLASS.texts).selectAll(texts).remove();
                    $$.svg.selectAll('.' + CLASS.eventRects).selectAll(eventRects).remove();
                    $$.svg.select('.' + CLASS.xgrid).remove();
                }

                // draw again for removing flowed elements and reverting attr
                xgrid.attr('transform', null).attr($$.xgridAttr);
                xgridLines.attr('transform', null);
                xgridLines.select('line').attr("x1", config.axis_rotated ? 0 : xv).attr("x2", config.axis_rotated ? $$.width : xv);
                xgridLines.select('text').attr("x", config.axis_rotated ? $$.width : 0).attr("y", xv);
                mainBar.attr('transform', null).attr("d", drawBar);
                mainLine.attr('transform', null).attr("d", drawLine);
                mainArea.attr('transform', null).attr("d", drawArea);
                mainCircle.attr('transform', null).attr("cx", cx).attr("cy", cy);
                mainText.attr('transform', null).attr('x', xForText).attr('y', yForText).style('fill-opacity', $$.opacityForText.bind($$));
                mainRegion.attr('transform', null);
                mainRegion.select('rect').filter($$.isRegionOnX).attr("x", $$.regionX.bind($$)).attr("width", $$.regionWidth.bind($$));

                if (config.interaction_enabled) {
                    $$.redrawEventRect();
                }

                // callback for end of flow
                done();

                $$.flowing = false;
            });
        };
    };

    c3_chart_fn.selected = function (targetId) {
        var $$ = this.internal,
            d3 = $$.d3;
        return d3.merge($$.main.selectAll('.' + CLASS.shapes + $$.getTargetSelectorSuffix(targetId)).selectAll('.' + CLASS.shape).filter(function () {
            return d3.select(this).classed(CLASS.SELECTED);
        }).map(function (d) {
            return d.map(function (d) {
                var data = d.__data__;return data.data ? data.data : data;
            });
        }));
    };
    c3_chart_fn.select = function (ids, indices, resetOther) {
        var $$ = this.internal,
            d3 = $$.d3,
            config = $$.config;
        if (!config.data_selection_enabled) {
            return;
        }
        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
            var shape = d3.select(this),
                id = d.data ? d.data.id : d.id,
                toggle = $$.getToggle(this, d).bind($$),
                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
                isTargetIndex = !indices || indices.indexOf(i) >= 0,
                isSelected = shape.classed(CLASS.SELECTED);
            // line/area selection not supported yet
            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
                return;
            }
            if (isTargetId && isTargetIndex) {
                if (config.data_selection_isselectable(d) && !isSelected) {
                    toggle(true, shape.classed(CLASS.SELECTED, true), d, i);
                }
            } else if (isDefined(resetOther) && resetOther) {
                if (isSelected) {
                    toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                }
            }
        });
    };
    c3_chart_fn.unselect = function (ids, indices) {
        var $$ = this.internal,
            d3 = $$.d3,
            config = $$.config;
        if (!config.data_selection_enabled) {
            return;
        }
        $$.main.selectAll('.' + CLASS.shapes).selectAll('.' + CLASS.shape).each(function (d, i) {
            var shape = d3.select(this),
                id = d.data ? d.data.id : d.id,
                toggle = $$.getToggle(this, d).bind($$),
                isTargetId = config.data_selection_grouped || !ids || ids.indexOf(id) >= 0,
                isTargetIndex = !indices || indices.indexOf(i) >= 0,
                isSelected = shape.classed(CLASS.SELECTED);
            // line/area selection not supported yet
            if (shape.classed(CLASS.line) || shape.classed(CLASS.area)) {
                return;
            }
            if (isTargetId && isTargetIndex) {
                if (config.data_selection_isselectable(d)) {
                    if (isSelected) {
                        toggle(false, shape.classed(CLASS.SELECTED, false), d, i);
                    }
                }
            }
        });
    };

    c3_chart_fn.transform = function (type, targetIds) {
        var $$ = this.internal,
            options = ['pie', 'donut'].indexOf(type) >= 0 ? { withTransform: true } : null;
        $$.transformTo(targetIds, type, options);
    };

    c3_chart_internal_fn.transformTo = function (targetIds, type, optionsForRedraw) {
        var $$ = this,
            withTransitionForAxis = !$$.hasArcType(),
            options = optionsForRedraw || { withTransitionForAxis: withTransitionForAxis };
        options.withTransitionForTransform = false;
        $$.transiting = false;
        $$.setTargetType(targetIds, type);
        $$.updateTargets($$.data.targets); // this is needed when transforming to arc
        $$.updateAndRedraw(options);
    };

    c3_chart_fn.groups = function (groups) {
        var $$ = this.internal,
            config = $$.config;
        if (isUndefined(groups)) {
            return config.data_groups;
        }
        config.data_groups = groups;
        $$.redraw();
        return config.data_groups;
    };

    c3_chart_fn.xgrids = function (grids) {
        var $$ = this.internal,
            config = $$.config;
        if (!grids) {
            return config.grid_x_lines;
        }
        config.grid_x_lines = grids;
        $$.redrawWithoutRescale();
        return config.grid_x_lines;
    };
    c3_chart_fn.xgrids.add = function (grids) {
        var $$ = this.internal;
        return this.xgrids($$.config.grid_x_lines.concat(grids ? grids : []));
    };
    c3_chart_fn.xgrids.remove = function (params) {
        // TODO: multiple
        var $$ = this.internal;
        $$.removeGridLines(params, true);
    };

    c3_chart_fn.ygrids = function (grids) {
        var $$ = this.internal,
            config = $$.config;
        if (!grids) {
            return config.grid_y_lines;
        }
        config.grid_y_lines = grids;
        $$.redrawWithoutRescale();
        return config.grid_y_lines;
    };
    c3_chart_fn.ygrids.add = function (grids) {
        var $$ = this.internal;
        return this.ygrids($$.config.grid_y_lines.concat(grids ? grids : []));
    };
    c3_chart_fn.ygrids.remove = function (params) {
        // TODO: multiple
        var $$ = this.internal;
        $$.removeGridLines(params, false);
    };

    c3_chart_fn.regions = function (regions) {
        var $$ = this.internal,
            config = $$.config;
        if (!regions) {
            return config.regions;
        }
        config.regions = regions;
        $$.redrawWithoutRescale();
        return config.regions;
    };
    c3_chart_fn.regions.add = function (regions) {
        var $$ = this.internal,
            config = $$.config;
        if (!regions) {
            return config.regions;
        }
        config.regions = config.regions.concat(regions);
        $$.redrawWithoutRescale();
        return config.regions;
    };
    c3_chart_fn.regions.remove = function (options) {
        var $$ = this.internal,
            config = $$.config,
            duration,
            classes,
            regions;

        options = options || {};
        duration = $$.getOption(options, "duration", config.transition_duration);
        classes = $$.getOption(options, "classes", [CLASS.region]);

        regions = $$.main.select('.' + CLASS.regions).selectAll(classes.map(function (c) {
            return '.' + c;
        }));
        (duration ? regions.transition().duration(duration) : regions).style('opacity', 0).remove();

        config.regions = config.regions.filter(function (region) {
            var found = false;
            if (!region['class']) {
                return true;
            }
            region['class'].split(' ').forEach(function (c) {
                if (classes.indexOf(c) >= 0) {
                    found = true;
                }
            });
            return !found;
        });

        return config.regions;
    };

    c3_chart_fn.data = function (targetIds) {
        var targets = this.internal.data.targets;
        return typeof targetIds === 'undefined' ? targets : targets.filter(function (t) {
            return [].concat(targetIds).indexOf(t.id) >= 0;
        });
    };
    c3_chart_fn.data.shown = function (targetIds) {
        return this.internal.filterTargetsToShow(this.data(targetIds));
    };
    c3_chart_fn.data.values = function (targetId) {
        var targets,
            values = null;
        if (targetId) {
            targets = this.data(targetId);
            values = targets[0] ? targets[0].values.map(function (d) {
                return d.value;
            }) : null;
        }
        return values;
    };
    c3_chart_fn.data.names = function (names) {
        this.internal.clearLegendItemTextBoxCache();
        return this.internal.updateDataAttributes('names', names);
    };
    c3_chart_fn.data.colors = function (colors) {
        return this.internal.updateDataAttributes('colors', colors);
    };
    c3_chart_fn.data.axes = function (axes) {
        return this.internal.updateDataAttributes('axes', axes);
    };

    c3_chart_fn.category = function (i, category) {
        var $$ = this.internal,
            config = $$.config;
        if (arguments.length > 1) {
            config.axis_x_categories[i] = category;
            $$.redraw();
        }
        return config.axis_x_categories[i];
    };
    c3_chart_fn.categories = function (categories) {
        var $$ = this.internal,
            config = $$.config;
        if (!arguments.length) {
            return config.axis_x_categories;
        }
        config.axis_x_categories = categories;
        $$.redraw();
        return config.axis_x_categories;
    };

    // TODO: fix
    c3_chart_fn.color = function (id) {
        var $$ = this.internal;
        return $$.color(id); // more patterns
    };

    c3_chart_fn.x = function (x) {
        var $$ = this.internal;
        if (arguments.length) {
            $$.updateTargetX($$.data.targets, x);
            $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        }
        return $$.data.xs;
    };
    c3_chart_fn.xs = function (xs) {
        var $$ = this.internal;
        if (arguments.length) {
            $$.updateTargetXs($$.data.targets, xs);
            $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        }
        return $$.data.xs;
    };

    c3_chart_fn.axis = function () {};
    c3_chart_fn.axis.labels = function (labels) {
        var $$ = this.internal;
        if (arguments.length) {
            Object.keys(labels).forEach(function (axisId) {
                $$.axis.setLabelText(axisId, labels[axisId]);
            });
            $$.axis.updateLabels();
        }
        // TODO: return some values?
    };
    c3_chart_fn.axis.max = function (max) {
        var $$ = this.internal,
            config = $$.config;
        if (arguments.length) {
            if ((typeof max === 'undefined' ? 'undefined' : _typeof(max)) === 'object') {
                if (isValue(max.x)) {
                    config.axis_x_max = max.x;
                }
                if (isValue(max.y)) {
                    config.axis_y_max = max.y;
                }
                if (isValue(max.y2)) {
                    config.axis_y2_max = max.y2;
                }
            } else {
                config.axis_y_max = config.axis_y2_max = max;
            }
            $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        } else {
            return {
                x: config.axis_x_max,
                y: config.axis_y_max,
                y2: config.axis_y2_max
            };
        }
    };
    c3_chart_fn.axis.min = function (min) {
        var $$ = this.internal,
            config = $$.config;
        if (arguments.length) {
            if ((typeof min === 'undefined' ? 'undefined' : _typeof(min)) === 'object') {
                if (isValue(min.x)) {
                    config.axis_x_min = min.x;
                }
                if (isValue(min.y)) {
                    config.axis_y_min = min.y;
                }
                if (isValue(min.y2)) {
                    config.axis_y2_min = min.y2;
                }
            } else {
                config.axis_y_min = config.axis_y2_min = min;
            }
            $$.redraw({ withUpdateOrgXDomain: true, withUpdateXDomain: true });
        } else {
            return {
                x: config.axis_x_min,
                y: config.axis_y_min,
                y2: config.axis_y2_min
            };
        }
    };
    c3_chart_fn.axis.range = function (range) {
        if (arguments.length) {
            if (isDefined(range.max)) {
                this.axis.max(range.max);
            }
            if (isDefined(range.min)) {
                this.axis.min(range.min);
            }
        } else {
            return {
                max: this.axis.max(),
                min: this.axis.min()
            };
        }
    };

    c3_chart_fn.legend = function () {};
    c3_chart_fn.legend.show = function (targetIds) {
        var $$ = this.internal;
        $$.showLegend($$.mapToTargetIds(targetIds));
        $$.updateAndRedraw({ withLegend: true });
    };
    c3_chart_fn.legend.hide = function (targetIds) {
        var $$ = this.internal;
        $$.hideLegend($$.mapToTargetIds(targetIds));
        $$.updateAndRedraw({ withLegend: true });
    };

    c3_chart_fn.resize = function (size) {
        var $$ = this.internal,
            config = $$.config;
        config.size_width = size ? size.width : null;
        config.size_height = size ? size.height : null;
        this.flush();
    };

    c3_chart_fn.flush = function () {
        var $$ = this.internal;
        $$.updateAndRedraw({ withLegend: true, withTransition: false, withTransitionForTransform: false });
    };

    c3_chart_fn.destroy = function () {
        var $$ = this.internal;

        window.clearInterval($$.intervalForObserveInserted);

        if ($$.resizeTimeout !== undefined) {
            window.clearTimeout($$.resizeTimeout);
        }

        if (window.detachEvent) {
            window.detachEvent('onresize', $$.resizeFunction);
        } else if (window.removeEventListener) {
            window.removeEventListener('resize', $$.resizeFunction);
        } else {
            var wrapper = window.onresize;
            // check if no one else removed our wrapper and remove our resizeFunction from it
            if (wrapper && wrapper.add && wrapper.remove) {
                wrapper.remove($$.resizeFunction);
            }
        }

        $$.selectChart.classed('c3', false).html("");

        // MEMO: this is needed because the reference of some elements will not be released, then memory leak will happen.
        Object.keys($$).forEach(function (key) {
            $$[key] = null;
        });

        return null;
    };

    c3_chart_fn.tooltip = function () {};
    c3_chart_fn.tooltip.show = function (args) {
        var $$ = this.internal,
            index,
            mouse;

        // determine mouse position on the chart
        if (args.mouse) {
            mouse = args.mouse;
        }

        // determine focus data
        if (args.data) {
            if ($$.isMultipleX()) {
                // if multiple xs, target point will be determined by mouse
                mouse = [$$.x(args.data.x), $$.getYScale(args.data.id)(args.data.value)];
                index = null;
            } else {
                // TODO: when tooltip_grouped = false
                index = isValue(args.data.index) ? args.data.index : $$.getIndexByX(args.data.x);
            }
        } else if (typeof args.x !== 'undefined') {
            index = $$.getIndexByX(args.x);
        } else if (typeof args.index !== 'undefined') {
            index = args.index;
        }

        // emulate mouse events to show
        $$.dispatchEvent('mouseover', index, mouse);
        $$.dispatchEvent('mousemove', index, mouse);

        $$.config.tooltip_onshow.call($$, args.data);
    };
    c3_chart_fn.tooltip.hide = function () {
        // TODO: get target data by checking the state of focus
        this.internal.dispatchEvent('mouseout', 0);

        this.internal.config.tooltip_onhide.call(this);
    };

    // Features:
    // 1. category axis
    // 2. ceil values of translate/x/y to int for half pixel antialiasing
    // 3. multiline tick text
    var tickTextCharSize;
    function c3_axis(d3, params) {
        var scale = d3.scale.linear(),
            orient = "bottom",
            innerTickSize = 6,
            outerTickSize,
            tickPadding = 3,
            tickValues = null,
            tickFormat,
            tickArguments;

        var tickOffset = 0,
            tickCulling = true,
            tickCentered;

        params = params || {};
        outerTickSize = params.withOuterTick ? 6 : 0;

        function axisX(selection, x) {
            selection.attr("transform", function (d) {
                return "translate(" + Math.ceil(x(d) + tickOffset) + ", 0)";
            });
        }
        function axisY(selection, y) {
            selection.attr("transform", function (d) {
                return "translate(0," + Math.ceil(y(d)) + ")";
            });
        }
        function scaleExtent(domain) {
            var start = domain[0],
                stop = domain[domain.length - 1];
            return start < stop ? [start, stop] : [stop, start];
        }
        function generateTicks(scale) {
            var i,
                domain,
                ticks = [];
            if (scale.ticks) {
                return scale.ticks.apply(scale, tickArguments);
            }
            domain = scale.domain();
            for (i = Math.ceil(domain[0]); i < domain[1]; i++) {
                ticks.push(i);
            }
            if (ticks.length > 0 && ticks[0] > 0) {
                ticks.unshift(ticks[0] - (ticks[1] - ticks[0]));
            }
            return ticks;
        }
        function copyScale() {
            var newScale = scale.copy(),
                domain;
            if (params.isCategory) {
                domain = scale.domain();
                newScale.domain([domain[0], domain[1] - 1]);
            }
            return newScale;
        }
        function textFormatted(v) {
            var formatted = tickFormat ? tickFormat(v) : v;
            return typeof formatted !== 'undefined' ? formatted : '';
        }
        function getSizeFor1Char(tick) {
            if (tickTextCharSize) {
                return tickTextCharSize;
            }
            var size = {
                h: 11.5,
                w: 5.5
            };
            tick.select('text').text(textFormatted).each(function (d) {
                var box = this.getBoundingClientRect(),
                    text = textFormatted(d),
                    h = box.height,
                    w = text ? box.width / text.length : undefined;
                if (h && w) {
                    size.h = h;
                    size.w = w;
                }
            }).text('');
            tickTextCharSize = size;
            return size;
        }
        function transitionise(selection) {
            return params.withoutTransition ? selection : d3.transition(selection);
        }
        function axis(g) {
            g.each(function () {
                var g = axis.g = d3.select(this);

                var scale0 = this.__chart__ || scale,
                    scale1 = this.__chart__ = copyScale();

                var ticks = tickValues ? tickValues : generateTicks(scale1),
                    tick = g.selectAll(".tick").data(ticks, scale1),
                    tickEnter = tick.enter().insert("g", ".domain").attr("class", "tick").style("opacity", 1e-6),

                // MEMO: No exit transition. The reason is this transition affects max tick width calculation because old tick will be included in the ticks.
                tickExit = tick.exit().remove(),
                    tickUpdate = transitionise(tick).style("opacity", 1),
                    tickTransform,
                    tickX,
                    tickY;

                var range = scale.rangeExtent ? scale.rangeExtent() : scaleExtent(scale.range()),
                    path = g.selectAll(".domain").data([0]),
                    pathUpdate = (path.enter().append("path").attr("class", "domain"), transitionise(path));
                tickEnter.append("line");
                tickEnter.append("text");

                var lineEnter = tickEnter.select("line"),
                    lineUpdate = tickUpdate.select("line"),
                    textEnter = tickEnter.select("text"),
                    textUpdate = tickUpdate.select("text");

                if (params.isCategory) {
                    tickOffset = Math.ceil((scale1(1) - scale1(0)) / 2);
                    tickX = tickCentered ? 0 : tickOffset;
                    tickY = tickCentered ? tickOffset : 0;
                } else {
                    tickOffset = tickX = 0;
                }

                var text,
                    tspan,
                    sizeFor1Char = getSizeFor1Char(g.select('.tick')),
                    counts = [];
                var tickLength = Math.max(innerTickSize, 0) + tickPadding,
                    isVertical = orient === 'left' || orient === 'right';

                // this should be called only when category axis
                function splitTickText(d, maxWidth) {
                    var tickText = textFormatted(d),
                        subtext,
                        spaceIndex,
                        textWidth,
                        splitted = [];

                    if (Object.prototype.toString.call(tickText) === "[object Array]") {
                        return tickText;
                    }

                    if (!maxWidth || maxWidth <= 0) {
                        maxWidth = isVertical ? 95 : params.isCategory ? Math.ceil(scale1(ticks[1]) - scale1(ticks[0])) - 12 : 110;
                    }

                    function split(splitted, text) {
                        spaceIndex = undefined;
                        for (var i = 1; i < text.length; i++) {
                            if (text.charAt(i) === ' ') {
                                spaceIndex = i;
                            }
                            subtext = text.substr(0, i + 1);
                            textWidth = sizeFor1Char.w * subtext.length;
                            // if text width gets over tick width, split by space index or crrent index
                            if (maxWidth < textWidth) {
                                return split(splitted.concat(text.substr(0, spaceIndex ? spaceIndex : i)), text.slice(spaceIndex ? spaceIndex + 1 : i));
                            }
                        }
                        return splitted.concat(text);
                    }

                    return split(splitted, tickText + "");
                }

                function tspanDy(d, i) {
                    var dy = sizeFor1Char.h;
                    if (i === 0) {
                        if (orient === 'left' || orient === 'right') {
                            dy = -((counts[d.index] - 1) * (sizeFor1Char.h / 2) - 3);
                        } else {
                            dy = ".71em";
                        }
                    }
                    return dy;
                }

                function tickSize(d) {
                    var tickPosition = scale(d) + (tickCentered ? 0 : tickOffset);
                    return range[0] < tickPosition && tickPosition < range[1] ? innerTickSize : 0;
                }

                text = tick.select("text");
                tspan = text.selectAll('tspan').data(function (d, i) {
                    var splitted = params.tickMultiline ? splitTickText(d, params.tickWidth) : [].concat(textFormatted(d));
                    counts[i] = splitted.length;
                    return splitted.map(function (s) {
                        return { index: i, splitted: s };
                    });
                });
                tspan.enter().append('tspan');
                tspan.exit().remove();
                tspan.text(function (d) {
                    return d.splitted;
                });

                var rotate = params.tickTextRotate;

                function textAnchorForText(rotate) {
                    if (!rotate) {
                        return 'middle';
                    }
                    return rotate > 0 ? "start" : "end";
                }
                function textTransform(rotate) {
                    if (!rotate) {
                        return '';
                    }
                    return "rotate(" + rotate + ")";
                }
                function dxForText(rotate) {
                    if (!rotate) {
                        return 0;
                    }
                    return 8 * Math.sin(Math.PI * (rotate / 180));
                }
                function yForText(rotate) {
                    if (!rotate) {
                        return tickLength;
                    }
                    return 11.5 - 2.5 * (rotate / 15) * (rotate > 0 ? 1 : -1);
                }

                switch (orient) {
                    case "bottom":
                        {
                            tickTransform = axisX;
                            lineEnter.attr("y2", innerTickSize);
                            textEnter.attr("y", tickLength);
                            lineUpdate.attr("x1", tickX).attr("x2", tickX).attr("y2", tickSize);
                            textUpdate.attr("x", 0).attr("y", yForText(rotate)).style("text-anchor", textAnchorForText(rotate)).attr("transform", textTransform(rotate));
                            tspan.attr('x', 0).attr("dy", tspanDy).attr('dx', dxForText(rotate));
                            pathUpdate.attr("d", "M" + range[0] + "," + outerTickSize + "V0H" + range[1] + "V" + outerTickSize);
                            break;
                        }
                    case "top":
                        {
                            // TODO: rotated tick text
                            tickTransform = axisX;
                            lineEnter.attr("y2", -innerTickSize);
                            textEnter.attr("y", -tickLength);
                            lineUpdate.attr("x2", 0).attr("y2", -innerTickSize);
                            textUpdate.attr("x", 0).attr("y", -tickLength);
                            text.style("text-anchor", "middle");
                            tspan.attr('x', 0).attr("dy", "0em");
                            pathUpdate.attr("d", "M" + range[0] + "," + -outerTickSize + "V0H" + range[1] + "V" + -outerTickSize);
                            break;
                        }
                    case "left":
                        {
                            tickTransform = axisY;
                            lineEnter.attr("x2", -innerTickSize);
                            textEnter.attr("x", -tickLength);
                            lineUpdate.attr("x2", -innerTickSize).attr("y1", tickY).attr("y2", tickY);
                            textUpdate.attr("x", -tickLength).attr("y", tickOffset);
                            text.style("text-anchor", "end");
                            tspan.attr('x', -tickLength).attr("dy", tspanDy);
                            pathUpdate.attr("d", "M" + -outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + -outerTickSize);
                            break;
                        }
                    case "right":
                        {
                            tickTransform = axisY;
                            lineEnter.attr("x2", innerTickSize);
                            textEnter.attr("x", tickLength);
                            lineUpdate.attr("x2", innerTickSize).attr("y2", 0);
                            textUpdate.attr("x", tickLength).attr("y", 0);
                            text.style("text-anchor", "start");
                            tspan.attr('x', tickLength).attr("dy", tspanDy);
                            pathUpdate.attr("d", "M" + outerTickSize + "," + range[0] + "H0V" + range[1] + "H" + outerTickSize);
                            break;
                        }
                }
                if (scale1.rangeBand) {
                    var x = scale1,
                        dx = x.rangeBand() / 2;
                    scale0 = scale1 = function scale1(d) {
                        return x(d) + dx;
                    };
                } else if (scale0.rangeBand) {
                    scale0 = scale1;
                } else {
                    tickExit.call(tickTransform, scale1);
                }
                tickEnter.call(tickTransform, scale0);
                tickUpdate.call(tickTransform, scale1);
            });
        }
        axis.scale = function (x) {
            if (!arguments.length) {
                return scale;
            }
            scale = x;
            return axis;
        };
        axis.orient = function (x) {
            if (!arguments.length) {
                return orient;
            }
            orient = x in { top: 1, right: 1, bottom: 1, left: 1 } ? x + "" : "bottom";
            return axis;
        };
        axis.tickFormat = function (format) {
            if (!arguments.length) {
                return tickFormat;
            }
            tickFormat = format;
            return axis;
        };
        axis.tickCentered = function (isCentered) {
            if (!arguments.length) {
                return tickCentered;
            }
            tickCentered = isCentered;
            return axis;
        };
        axis.tickOffset = function () {
            return tickOffset;
        };
        axis.tickInterval = function () {
            var interval, length;
            if (params.isCategory) {
                interval = tickOffset * 2;
            } else {
                length = axis.g.select('path.domain').node().getTotalLength() - outerTickSize * 2;
                interval = length / axis.g.selectAll('line').size();
            }
            return interval === Infinity ? 0 : interval;
        };
        axis.ticks = function () {
            if (!arguments.length) {
                return tickArguments;
            }
            tickArguments = arguments;
            return axis;
        };
        axis.tickCulling = function (culling) {
            if (!arguments.length) {
                return tickCulling;
            }
            tickCulling = culling;
            return axis;
        };
        axis.tickValues = function (x) {
            if (typeof x === 'function') {
                tickValues = function tickValues() {
                    return x(scale.domain());
                };
            } else {
                if (!arguments.length) {
                    return tickValues;
                }
                tickValues = x;
            }
            return axis;
        };
        return axis;
    }

    c3_chart_internal_fn.isSafari = function () {
        var ua = window.navigator.userAgent;
        return ua.indexOf('Safari') >= 0 && ua.indexOf('Chrome') < 0;
    };
    c3_chart_internal_fn.isChrome = function () {
        var ua = window.navigator.userAgent;
        return ua.indexOf('Chrome') >= 0;
    };

    /* jshint ignore:start */

    // PhantomJS doesn't have support for Function.prototype.bind, which has caused confusion. Use
    // this polyfill to avoid the confusion.
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind#Polyfill

    if (!Function.prototype.bind) {
        Function.prototype.bind = function (oThis) {
            if (typeof this !== 'function') {
                // closest thing possible to the ECMAScript 5
                // internal IsCallable function
                throw new TypeError('Function.prototype.bind - what is trying to be bound is not callable');
            }

            var aArgs = Array.prototype.slice.call(arguments, 1),
                fToBind = this,
                fNOP = function fNOP() {},
                fBound = function fBound() {
                return fToBind.apply(this instanceof fNOP ? this : oThis, aArgs.concat(Array.prototype.slice.call(arguments)));
            };

            fNOP.prototype = this.prototype;
            fBound.prototype = new fNOP();

            return fBound;
        };
    }

    //SVGPathSeg API polyfill
    //https://github.com/progers/pathseg
    //
    //This is a drop-in replacement for the SVGPathSeg and SVGPathSegList APIs that were removed from
    //SVG2 (https://lists.w3.org/Archives/Public/www-svg/2015Jun/0044.html), including the latest spec
    //changes which were implemented in Firefox 43 and Chrome 46.
    //Chrome 48 removes these APIs, so this polyfill is required.

    (function () {
        "use strict";

        if (!("SVGPathSeg" in window)) {
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSeg
            window.SVGPathSeg = function (type, typeAsLetter, owningPathSegList) {
                this.pathSegType = type;
                this.pathSegTypeAsLetter = typeAsLetter;
                this._owningPathSegList = owningPathSegList;
            };

            SVGPathSeg.PATHSEG_UNKNOWN = 0;
            SVGPathSeg.PATHSEG_CLOSEPATH = 1;
            SVGPathSeg.PATHSEG_MOVETO_ABS = 2;
            SVGPathSeg.PATHSEG_MOVETO_REL = 3;
            SVGPathSeg.PATHSEG_LINETO_ABS = 4;
            SVGPathSeg.PATHSEG_LINETO_REL = 5;
            SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS = 6;
            SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL = 7;
            SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS = 8;
            SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL = 9;
            SVGPathSeg.PATHSEG_ARC_ABS = 10;
            SVGPathSeg.PATHSEG_ARC_REL = 11;
            SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS = 12;
            SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL = 13;
            SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS = 14;
            SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL = 15;
            SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS = 16;
            SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL = 17;
            SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS = 18;
            SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL = 19;

            // Notify owning PathSegList on any changes so they can be synchronized back to the path element.
            SVGPathSeg.prototype._segmentChanged = function () {
                if (this._owningPathSegList) this._owningPathSegList.segmentChanged(this);
            };

            window.SVGPathSegClosePath = function (owningPathSegList) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CLOSEPATH, "z", owningPathSegList);
            };
            SVGPathSegClosePath.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegClosePath.prototype.toString = function () {
                return "[object SVGPathSegClosePath]";
            };
            SVGPathSegClosePath.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter;
            };
            SVGPathSegClosePath.prototype.clone = function () {
                return new SVGPathSegClosePath(undefined);
            };

            window.SVGPathSegMovetoAbs = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_ABS, "M", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegMovetoAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegMovetoAbs.prototype.toString = function () {
                return "[object SVGPathSegMovetoAbs]";
            };
            SVGPathSegMovetoAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegMovetoAbs.prototype.clone = function () {
                return new SVGPathSegMovetoAbs(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegMovetoAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegMovetoAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegMovetoRel = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_MOVETO_REL, "m", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegMovetoRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegMovetoRel.prototype.toString = function () {
                return "[object SVGPathSegMovetoRel]";
            };
            SVGPathSegMovetoRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegMovetoRel.prototype.clone = function () {
                return new SVGPathSegMovetoRel(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegMovetoRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegMovetoRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoAbs = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_ABS, "L", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegLinetoAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoAbs.prototype.toString = function () {
                return "[object SVGPathSegLinetoAbs]";
            };
            SVGPathSegLinetoAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegLinetoAbs.prototype.clone = function () {
                return new SVGPathSegLinetoAbs(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegLinetoAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegLinetoAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoRel = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_REL, "l", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegLinetoRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoRel.prototype.toString = function () {
                return "[object SVGPathSegLinetoRel]";
            };
            SVGPathSegLinetoRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegLinetoRel.prototype.clone = function () {
                return new SVGPathSegLinetoRel(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegLinetoRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegLinetoRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoCubicAbs = function (owningPathSegList, x, y, x1, y1, x2, y2) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS, "C", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x1 = x1;
                this._y1 = y1;
                this._x2 = x2;
                this._y2 = y2;
            };
            SVGPathSegCurvetoCubicAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoCubicAbs.prototype.toString = function () {
                return "[object SVGPathSegCurvetoCubicAbs]";
            };
            SVGPathSegCurvetoCubicAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoCubicAbs.prototype.clone = function () {
                return new SVGPathSegCurvetoCubicAbs(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
            };
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x1", { get: function get() {
                    return this._x1;
                }, set: function set(x1) {
                    this._x1 = x1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y1", { get: function get() {
                    return this._y1;
                }, set: function set(y1) {
                    this._y1 = y1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "x2", { get: function get() {
                    return this._x2;
                }, set: function set(x2) {
                    this._x2 = x2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicAbs.prototype, "y2", { get: function get() {
                    return this._y2;
                }, set: function set(y2) {
                    this._y2 = y2;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoCubicRel = function (owningPathSegList, x, y, x1, y1, x2, y2) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL, "c", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x1 = x1;
                this._y1 = y1;
                this._x2 = x2;
                this._y2 = y2;
            };
            SVGPathSegCurvetoCubicRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoCubicRel.prototype.toString = function () {
                return "[object SVGPathSegCurvetoCubicRel]";
            };
            SVGPathSegCurvetoCubicRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoCubicRel.prototype.clone = function () {
                return new SVGPathSegCurvetoCubicRel(undefined, this._x, this._y, this._x1, this._y1, this._x2, this._y2);
            };
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x1", { get: function get() {
                    return this._x1;
                }, set: function set(x1) {
                    this._x1 = x1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y1", { get: function get() {
                    return this._y1;
                }, set: function set(y1) {
                    this._y1 = y1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "x2", { get: function get() {
                    return this._x2;
                }, set: function set(x2) {
                    this._x2 = x2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicRel.prototype, "y2", { get: function get() {
                    return this._y2;
                }, set: function set(y2) {
                    this._y2 = y2;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoQuadraticAbs = function (owningPathSegList, x, y, x1, y1) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS, "Q", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x1 = x1;
                this._y1 = y1;
            };
            SVGPathSegCurvetoQuadraticAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoQuadraticAbs.prototype.toString = function () {
                return "[object SVGPathSegCurvetoQuadraticAbs]";
            };
            SVGPathSegCurvetoQuadraticAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoQuadraticAbs.prototype.clone = function () {
                return new SVGPathSegCurvetoQuadraticAbs(undefined, this._x, this._y, this._x1, this._y1);
            };
            Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "x1", { get: function get() {
                    return this._x1;
                }, set: function set(x1) {
                    this._x1 = x1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticAbs.prototype, "y1", { get: function get() {
                    return this._y1;
                }, set: function set(y1) {
                    this._y1 = y1;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoQuadraticRel = function (owningPathSegList, x, y, x1, y1) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL, "q", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x1 = x1;
                this._y1 = y1;
            };
            SVGPathSegCurvetoQuadraticRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoQuadraticRel.prototype.toString = function () {
                return "[object SVGPathSegCurvetoQuadraticRel]";
            };
            SVGPathSegCurvetoQuadraticRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x1 + " " + this._y1 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoQuadraticRel.prototype.clone = function () {
                return new SVGPathSegCurvetoQuadraticRel(undefined, this._x, this._y, this._x1, this._y1);
            };
            Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "x1", { get: function get() {
                    return this._x1;
                }, set: function set(x1) {
                    this._x1 = x1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticRel.prototype, "y1", { get: function get() {
                    return this._y1;
                }, set: function set(y1) {
                    this._y1 = y1;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegArcAbs = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_ABS, "A", owningPathSegList);
                this._x = x;
                this._y = y;
                this._r1 = r1;
                this._r2 = r2;
                this._angle = angle;
                this._largeArcFlag = largeArcFlag;
                this._sweepFlag = sweepFlag;
            };
            SVGPathSegArcAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegArcAbs.prototype.toString = function () {
                return "[object SVGPathSegArcAbs]";
            };
            SVGPathSegArcAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
            };
            SVGPathSegArcAbs.prototype.clone = function () {
                return new SVGPathSegArcAbs(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
            };
            Object.defineProperty(SVGPathSegArcAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "r1", { get: function get() {
                    return this._r1;
                }, set: function set(r1) {
                    this._r1 = r1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "r2", { get: function get() {
                    return this._r2;
                }, set: function set(r2) {
                    this._r2 = r2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "angle", { get: function get() {
                    return this._angle;
                }, set: function set(angle) {
                    this._angle = angle;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "largeArcFlag", { get: function get() {
                    return this._largeArcFlag;
                }, set: function set(largeArcFlag) {
                    this._largeArcFlag = largeArcFlag;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcAbs.prototype, "sweepFlag", { get: function get() {
                    return this._sweepFlag;
                }, set: function set(sweepFlag) {
                    this._sweepFlag = sweepFlag;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegArcRel = function (owningPathSegList, x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_ARC_REL, "a", owningPathSegList);
                this._x = x;
                this._y = y;
                this._r1 = r1;
                this._r2 = r2;
                this._angle = angle;
                this._largeArcFlag = largeArcFlag;
                this._sweepFlag = sweepFlag;
            };
            SVGPathSegArcRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegArcRel.prototype.toString = function () {
                return "[object SVGPathSegArcRel]";
            };
            SVGPathSegArcRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._r1 + " " + this._r2 + " " + this._angle + " " + (this._largeArcFlag ? "1" : "0") + " " + (this._sweepFlag ? "1" : "0") + " " + this._x + " " + this._y;
            };
            SVGPathSegArcRel.prototype.clone = function () {
                return new SVGPathSegArcRel(undefined, this._x, this._y, this._r1, this._r2, this._angle, this._largeArcFlag, this._sweepFlag);
            };
            Object.defineProperty(SVGPathSegArcRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "r1", { get: function get() {
                    return this._r1;
                }, set: function set(r1) {
                    this._r1 = r1;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "r2", { get: function get() {
                    return this._r2;
                }, set: function set(r2) {
                    this._r2 = r2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "angle", { get: function get() {
                    return this._angle;
                }, set: function set(angle) {
                    this._angle = angle;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "largeArcFlag", { get: function get() {
                    return this._largeArcFlag;
                }, set: function set(largeArcFlag) {
                    this._largeArcFlag = largeArcFlag;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegArcRel.prototype, "sweepFlag", { get: function get() {
                    return this._sweepFlag;
                }, set: function set(sweepFlag) {
                    this._sweepFlag = sweepFlag;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoHorizontalAbs = function (owningPathSegList, x) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS, "H", owningPathSegList);
                this._x = x;
            };
            SVGPathSegLinetoHorizontalAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoHorizontalAbs.prototype.toString = function () {
                return "[object SVGPathSegLinetoHorizontalAbs]";
            };
            SVGPathSegLinetoHorizontalAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x;
            };
            SVGPathSegLinetoHorizontalAbs.prototype.clone = function () {
                return new SVGPathSegLinetoHorizontalAbs(undefined, this._x);
            };
            Object.defineProperty(SVGPathSegLinetoHorizontalAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoHorizontalRel = function (owningPathSegList, x) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL, "h", owningPathSegList);
                this._x = x;
            };
            SVGPathSegLinetoHorizontalRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoHorizontalRel.prototype.toString = function () {
                return "[object SVGPathSegLinetoHorizontalRel]";
            };
            SVGPathSegLinetoHorizontalRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x;
            };
            SVGPathSegLinetoHorizontalRel.prototype.clone = function () {
                return new SVGPathSegLinetoHorizontalRel(undefined, this._x);
            };
            Object.defineProperty(SVGPathSegLinetoHorizontalRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoVerticalAbs = function (owningPathSegList, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS, "V", owningPathSegList);
                this._y = y;
            };
            SVGPathSegLinetoVerticalAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoVerticalAbs.prototype.toString = function () {
                return "[object SVGPathSegLinetoVerticalAbs]";
            };
            SVGPathSegLinetoVerticalAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._y;
            };
            SVGPathSegLinetoVerticalAbs.prototype.clone = function () {
                return new SVGPathSegLinetoVerticalAbs(undefined, this._y);
            };
            Object.defineProperty(SVGPathSegLinetoVerticalAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegLinetoVerticalRel = function (owningPathSegList, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL, "v", owningPathSegList);
                this._y = y;
            };
            SVGPathSegLinetoVerticalRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegLinetoVerticalRel.prototype.toString = function () {
                return "[object SVGPathSegLinetoVerticalRel]";
            };
            SVGPathSegLinetoVerticalRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._y;
            };
            SVGPathSegLinetoVerticalRel.prototype.clone = function () {
                return new SVGPathSegLinetoVerticalRel(undefined, this._y);
            };
            Object.defineProperty(SVGPathSegLinetoVerticalRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoCubicSmoothAbs = function (owningPathSegList, x, y, x2, y2) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS, "S", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x2 = x2;
                this._y2 = y2;
            };
            SVGPathSegCurvetoCubicSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoCubicSmoothAbs.prototype.toString = function () {
                return "[object SVGPathSegCurvetoCubicSmoothAbs]";
            };
            SVGPathSegCurvetoCubicSmoothAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoCubicSmoothAbs.prototype.clone = function () {
                return new SVGPathSegCurvetoCubicSmoothAbs(undefined, this._x, this._y, this._x2, this._y2);
            };
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "x2", { get: function get() {
                    return this._x2;
                }, set: function set(x2) {
                    this._x2 = x2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothAbs.prototype, "y2", { get: function get() {
                    return this._y2;
                }, set: function set(y2) {
                    this._y2 = y2;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoCubicSmoothRel = function (owningPathSegList, x, y, x2, y2) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL, "s", owningPathSegList);
                this._x = x;
                this._y = y;
                this._x2 = x2;
                this._y2 = y2;
            };
            SVGPathSegCurvetoCubicSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoCubicSmoothRel.prototype.toString = function () {
                return "[object SVGPathSegCurvetoCubicSmoothRel]";
            };
            SVGPathSegCurvetoCubicSmoothRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x2 + " " + this._y2 + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoCubicSmoothRel.prototype.clone = function () {
                return new SVGPathSegCurvetoCubicSmoothRel(undefined, this._x, this._y, this._x2, this._y2);
            };
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "x2", { get: function get() {
                    return this._x2;
                }, set: function set(x2) {
                    this._x2 = x2;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoCubicSmoothRel.prototype, "y2", { get: function get() {
                    return this._y2;
                }, set: function set(y2) {
                    this._y2 = y2;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoQuadraticSmoothAbs = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS, "T", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegCurvetoQuadraticSmoothAbs.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoQuadraticSmoothAbs.prototype.toString = function () {
                return "[object SVGPathSegCurvetoQuadraticSmoothAbs]";
            };
            SVGPathSegCurvetoQuadraticSmoothAbs.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoQuadraticSmoothAbs.prototype.clone = function () {
                return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothAbs.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            window.SVGPathSegCurvetoQuadraticSmoothRel = function (owningPathSegList, x, y) {
                SVGPathSeg.call(this, SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL, "t", owningPathSegList);
                this._x = x;
                this._y = y;
            };
            SVGPathSegCurvetoQuadraticSmoothRel.prototype = Object.create(SVGPathSeg.prototype);
            SVGPathSegCurvetoQuadraticSmoothRel.prototype.toString = function () {
                return "[object SVGPathSegCurvetoQuadraticSmoothRel]";
            };
            SVGPathSegCurvetoQuadraticSmoothRel.prototype._asPathString = function () {
                return this.pathSegTypeAsLetter + " " + this._x + " " + this._y;
            };
            SVGPathSegCurvetoQuadraticSmoothRel.prototype.clone = function () {
                return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, this._x, this._y);
            };
            Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, "x", { get: function get() {
                    return this._x;
                }, set: function set(x) {
                    this._x = x;this._segmentChanged();
                }, enumerable: true });
            Object.defineProperty(SVGPathSegCurvetoQuadraticSmoothRel.prototype, "y", { get: function get() {
                    return this._y;
                }, set: function set(y) {
                    this._y = y;this._segmentChanged();
                }, enumerable: true });

            // Add createSVGPathSeg* functions to SVGPathElement.
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathElement.
            SVGPathElement.prototype.createSVGPathSegClosePath = function () {
                return new SVGPathSegClosePath(undefined);
            };
            SVGPathElement.prototype.createSVGPathSegMovetoAbs = function (x, y) {
                return new SVGPathSegMovetoAbs(undefined, x, y);
            };
            SVGPathElement.prototype.createSVGPathSegMovetoRel = function (x, y) {
                return new SVGPathSegMovetoRel(undefined, x, y);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoAbs = function (x, y) {
                return new SVGPathSegLinetoAbs(undefined, x, y);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoRel = function (x, y) {
                return new SVGPathSegLinetoRel(undefined, x, y);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoCubicAbs = function (x, y, x1, y1, x2, y2) {
                return new SVGPathSegCurvetoCubicAbs(undefined, x, y, x1, y1, x2, y2);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoCubicRel = function (x, y, x1, y1, x2, y2) {
                return new SVGPathSegCurvetoCubicRel(undefined, x, y, x1, y1, x2, y2);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticAbs = function (x, y, x1, y1) {
                return new SVGPathSegCurvetoQuadraticAbs(undefined, x, y, x1, y1);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticRel = function (x, y, x1, y1) {
                return new SVGPathSegCurvetoQuadraticRel(undefined, x, y, x1, y1);
            };
            SVGPathElement.prototype.createSVGPathSegArcAbs = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
                return new SVGPathSegArcAbs(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
            };
            SVGPathElement.prototype.createSVGPathSegArcRel = function (x, y, r1, r2, angle, largeArcFlag, sweepFlag) {
                return new SVGPathSegArcRel(undefined, x, y, r1, r2, angle, largeArcFlag, sweepFlag);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoHorizontalAbs = function (x) {
                return new SVGPathSegLinetoHorizontalAbs(undefined, x);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoHorizontalRel = function (x) {
                return new SVGPathSegLinetoHorizontalRel(undefined, x);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoVerticalAbs = function (y) {
                return new SVGPathSegLinetoVerticalAbs(undefined, y);
            };
            SVGPathElement.prototype.createSVGPathSegLinetoVerticalRel = function (y) {
                return new SVGPathSegLinetoVerticalRel(undefined, y);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothAbs = function (x, y, x2, y2) {
                return new SVGPathSegCurvetoCubicSmoothAbs(undefined, x, y, x2, y2);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoCubicSmoothRel = function (x, y, x2, y2) {
                return new SVGPathSegCurvetoCubicSmoothRel(undefined, x, y, x2, y2);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothAbs = function (x, y) {
                return new SVGPathSegCurvetoQuadraticSmoothAbs(undefined, x, y);
            };
            SVGPathElement.prototype.createSVGPathSegCurvetoQuadraticSmoothRel = function (x, y) {
                return new SVGPathSegCurvetoQuadraticSmoothRel(undefined, x, y);
            };
        }

        if (!("SVGPathSegList" in window)) {
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGPathSegList
            window.SVGPathSegList = function (pathElement) {
                this._pathElement = pathElement;
                this._list = this._parsePath(this._pathElement.getAttribute("d"));

                // Use a MutationObserver to catch changes to the path's "d" attribute.
                this._mutationObserverConfig = { "attributes": true, "attributeFilter": ["d"] };
                this._pathElementMutationObserver = new MutationObserver(this._updateListFromPathMutations.bind(this));
                this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
            };

            Object.defineProperty(SVGPathSegList.prototype, "numberOfItems", {
                get: function get() {
                    this._checkPathSynchronizedToList();
                    return this._list.length;
                },
                enumerable: true
            });

            // Add the pathSegList accessors to SVGPathElement.
            // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-InterfaceSVGAnimatedPathData
            Object.defineProperty(SVGPathElement.prototype, "pathSegList", {
                get: function get() {
                    if (!this._pathSegList) this._pathSegList = new SVGPathSegList(this);
                    return this._pathSegList;
                },
                enumerable: true
            });
            // FIXME: The following are not implemented and simply return SVGPathElement.pathSegList.
            Object.defineProperty(SVGPathElement.prototype, "normalizedPathSegList", { get: function get() {
                    return this.pathSegList;
                }, enumerable: true });
            Object.defineProperty(SVGPathElement.prototype, "animatedPathSegList", { get: function get() {
                    return this.pathSegList;
                }, enumerable: true });
            Object.defineProperty(SVGPathElement.prototype, "animatedNormalizedPathSegList", { get: function get() {
                    return this.pathSegList;
                }, enumerable: true });

            // Process any pending mutations to the path element and update the list as needed.
            // This should be the first call of all public functions and is needed because
            // MutationObservers are not synchronous so we can have pending asynchronous mutations.
            SVGPathSegList.prototype._checkPathSynchronizedToList = function () {
                this._updateListFromPathMutations(this._pathElementMutationObserver.takeRecords());
            };

            SVGPathSegList.prototype._updateListFromPathMutations = function (mutationRecords) {
                if (!this._pathElement) return;
                var hasPathMutations = false;
                mutationRecords.forEach(function (record) {
                    if (record.attributeName == "d") hasPathMutations = true;
                });
                if (hasPathMutations) this._list = this._parsePath(this._pathElement.getAttribute("d"));
            };

            // Serialize the list and update the path's 'd' attribute.
            SVGPathSegList.prototype._writeListToPath = function () {
                this._pathElementMutationObserver.disconnect();
                this._pathElement.setAttribute("d", SVGPathSegList._pathSegArrayAsString(this._list));
                this._pathElementMutationObserver.observe(this._pathElement, this._mutationObserverConfig);
            };

            // When a path segment changes the list needs to be synchronized back to the path element.
            SVGPathSegList.prototype.segmentChanged = function (pathSeg) {
                this._writeListToPath();
            };

            SVGPathSegList.prototype.clear = function () {
                this._checkPathSynchronizedToList();

                this._list.forEach(function (pathSeg) {
                    pathSeg._owningPathSegList = null;
                });
                this._list = [];
                this._writeListToPath();
            };

            SVGPathSegList.prototype.initialize = function (newItem) {
                this._checkPathSynchronizedToList();

                this._list = [newItem];
                newItem._owningPathSegList = this;
                this._writeListToPath();
                return newItem;
            };

            SVGPathSegList.prototype._checkValidIndex = function (index) {
                if (isNaN(index) || index < 0 || index >= this.numberOfItems) throw "INDEX_SIZE_ERR";
            };

            SVGPathSegList.prototype.getItem = function (index) {
                this._checkPathSynchronizedToList();

                this._checkValidIndex(index);
                return this._list[index];
            };

            SVGPathSegList.prototype.insertItemBefore = function (newItem, index) {
                this._checkPathSynchronizedToList();

                // Spec: If the index is greater than or equal to numberOfItems, then the new item is appended to the end of the list.
                if (index > this.numberOfItems) index = this.numberOfItems;
                if (newItem._owningPathSegList) {
                    // SVG2 spec says to make a copy.
                    newItem = newItem.clone();
                }
                this._list.splice(index, 0, newItem);
                newItem._owningPathSegList = this;
                this._writeListToPath();
                return newItem;
            };

            SVGPathSegList.prototype.replaceItem = function (newItem, index) {
                this._checkPathSynchronizedToList();

                if (newItem._owningPathSegList) {
                    // SVG2 spec says to make a copy.
                    newItem = newItem.clone();
                }
                this._checkValidIndex(index);
                this._list[index] = newItem;
                newItem._owningPathSegList = this;
                this._writeListToPath();
                return newItem;
            };

            SVGPathSegList.prototype.removeItem = function (index) {
                this._checkPathSynchronizedToList();

                this._checkValidIndex(index);
                var item = this._list[index];
                this._list.splice(index, 1);
                this._writeListToPath();
                return item;
            };

            SVGPathSegList.prototype.appendItem = function (newItem) {
                this._checkPathSynchronizedToList();

                if (newItem._owningPathSegList) {
                    // SVG2 spec says to make a copy.
                    newItem = newItem.clone();
                }
                this._list.push(newItem);
                newItem._owningPathSegList = this;
                // TODO: Optimize this to just append to the existing attribute.
                this._writeListToPath();
                return newItem;
            };

            SVGPathSegList._pathSegArrayAsString = function (pathSegArray) {
                var string = "";
                var first = true;
                pathSegArray.forEach(function (pathSeg) {
                    if (first) {
                        first = false;
                        string += pathSeg._asPathString();
                    } else {
                        string += " " + pathSeg._asPathString();
                    }
                });
                return string;
            };

            // This closely follows SVGPathParser::parsePath from Source/core/svg/SVGPathParser.cpp.
            SVGPathSegList.prototype._parsePath = function (string) {
                if (!string || string.length == 0) return [];

                var owningPathSegList = this;

                var Builder = function Builder() {
                    this.pathSegList = [];
                };

                Builder.prototype.appendSegment = function (pathSeg) {
                    this.pathSegList.push(pathSeg);
                };

                var Source = function Source(string) {
                    this._string = string;
                    this._currentIndex = 0;
                    this._endIndex = this._string.length;
                    this._previousCommand = SVGPathSeg.PATHSEG_UNKNOWN;

                    this._skipOptionalSpaces();
                };

                Source.prototype._isCurrentSpace = function () {
                    var character = this._string[this._currentIndex];
                    return character <= " " && (character == " " || character == "\n" || character == "\t" || character == "\r" || character == "\f");
                };

                Source.prototype._skipOptionalSpaces = function () {
                    while (this._currentIndex < this._endIndex && this._isCurrentSpace()) {
                        this._currentIndex++;
                    }return this._currentIndex < this._endIndex;
                };

                Source.prototype._skipOptionalSpacesOrDelimiter = function () {
                    if (this._currentIndex < this._endIndex && !this._isCurrentSpace() && this._string.charAt(this._currentIndex) != ",") return false;
                    if (this._skipOptionalSpaces()) {
                        if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ",") {
                            this._currentIndex++;
                            this._skipOptionalSpaces();
                        }
                    }
                    return this._currentIndex < this._endIndex;
                };

                Source.prototype.hasMoreData = function () {
                    return this._currentIndex < this._endIndex;
                };

                Source.prototype.peekSegmentType = function () {
                    var lookahead = this._string[this._currentIndex];
                    return this._pathSegTypeFromChar(lookahead);
                };

                Source.prototype._pathSegTypeFromChar = function (lookahead) {
                    switch (lookahead) {
                        case "Z":
                        case "z":
                            return SVGPathSeg.PATHSEG_CLOSEPATH;
                        case "M":
                            return SVGPathSeg.PATHSEG_MOVETO_ABS;
                        case "m":
                            return SVGPathSeg.PATHSEG_MOVETO_REL;
                        case "L":
                            return SVGPathSeg.PATHSEG_LINETO_ABS;
                        case "l":
                            return SVGPathSeg.PATHSEG_LINETO_REL;
                        case "C":
                            return SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS;
                        case "c":
                            return SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL;
                        case "Q":
                            return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS;
                        case "q":
                            return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL;
                        case "A":
                            return SVGPathSeg.PATHSEG_ARC_ABS;
                        case "a":
                            return SVGPathSeg.PATHSEG_ARC_REL;
                        case "H":
                            return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS;
                        case "h":
                            return SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL;
                        case "V":
                            return SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS;
                        case "v":
                            return SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL;
                        case "S":
                            return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS;
                        case "s":
                            return SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL;
                        case "T":
                            return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS;
                        case "t":
                            return SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL;
                        default:
                            return SVGPathSeg.PATHSEG_UNKNOWN;
                    }
                };

                Source.prototype._nextCommandHelper = function (lookahead, previousCommand) {
                    // Check for remaining coordinates in the current command.
                    if ((lookahead == "+" || lookahead == "-" || lookahead == "." || lookahead >= "0" && lookahead <= "9") && previousCommand != SVGPathSeg.PATHSEG_CLOSEPATH) {
                        if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_ABS) return SVGPathSeg.PATHSEG_LINETO_ABS;
                        if (previousCommand == SVGPathSeg.PATHSEG_MOVETO_REL) return SVGPathSeg.PATHSEG_LINETO_REL;
                        return previousCommand;
                    }
                    return SVGPathSeg.PATHSEG_UNKNOWN;
                };

                Source.prototype.initialCommandIsMoveTo = function () {
                    // If the path is empty it is still valid, so return true.
                    if (!this.hasMoreData()) return true;
                    var command = this.peekSegmentType();
                    // Path must start with moveTo.
                    return command == SVGPathSeg.PATHSEG_MOVETO_ABS || command == SVGPathSeg.PATHSEG_MOVETO_REL;
                };

                // Parse a number from an SVG path. This very closely follows genericParseNumber(...) from Source/core/svg/SVGParserUtilities.cpp.
                // Spec: http://www.w3.org/TR/SVG11/single-page.html#paths-PathDataBNF
                Source.prototype._parseNumber = function () {
                    var exponent = 0;
                    var integer = 0;
                    var frac = 1;
                    var decimal = 0;
                    var sign = 1;
                    var expsign = 1;

                    var startIndex = this._currentIndex;

                    this._skipOptionalSpaces();

                    // Read the sign.
                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "+") this._currentIndex++;else if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == "-") {
                        this._currentIndex++;
                        sign = -1;
                    }

                    if (this._currentIndex == this._endIndex || (this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") && this._string.charAt(this._currentIndex) != ".")
                        // The first character of a number must be one of [0-9+-.].
                        return undefined;

                    // Read the integer part, build right-to-left.
                    var startIntPartIndex = this._currentIndex;
                    while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                        this._currentIndex++;
                    } // Advance to first non-digit.

                    if (this._currentIndex != startIntPartIndex) {
                        var scanIntPartIndex = this._currentIndex - 1;
                        var multiplier = 1;
                        while (scanIntPartIndex >= startIntPartIndex) {
                            integer += multiplier * (this._string.charAt(scanIntPartIndex--) - "0");
                            multiplier *= 10;
                        }
                    }

                    // Read the decimals.
                    if (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) == ".") {
                        this._currentIndex++;

                        // There must be a least one digit following the .
                        if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;
                        while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                            decimal += (this._string.charAt(this._currentIndex++) - "0") * (frac *= 0.1);
                        }
                    }

                    // Read the exponent part.
                    if (this._currentIndex != startIndex && this._currentIndex + 1 < this._endIndex && (this._string.charAt(this._currentIndex) == "e" || this._string.charAt(this._currentIndex) == "E") && this._string.charAt(this._currentIndex + 1) != "x" && this._string.charAt(this._currentIndex + 1) != "m") {
                        this._currentIndex++;

                        // Read the sign of the exponent.
                        if (this._string.charAt(this._currentIndex) == "+") {
                            this._currentIndex++;
                        } else if (this._string.charAt(this._currentIndex) == "-") {
                            this._currentIndex++;
                            expsign = -1;
                        }

                        // There must be an exponent.
                        if (this._currentIndex >= this._endIndex || this._string.charAt(this._currentIndex) < "0" || this._string.charAt(this._currentIndex) > "9") return undefined;

                        while (this._currentIndex < this._endIndex && this._string.charAt(this._currentIndex) >= "0" && this._string.charAt(this._currentIndex) <= "9") {
                            exponent *= 10;
                            exponent += this._string.charAt(this._currentIndex) - "0";
                            this._currentIndex++;
                        }
                    }

                    var number = integer + decimal;
                    number *= sign;

                    if (exponent) number *= Math.pow(10, expsign * exponent);

                    if (startIndex == this._currentIndex) return undefined;

                    this._skipOptionalSpacesOrDelimiter();

                    return number;
                };

                Source.prototype._parseArcFlag = function () {
                    if (this._currentIndex >= this._endIndex) return undefined;
                    var flag = false;
                    var flagChar = this._string.charAt(this._currentIndex++);
                    if (flagChar == "0") flag = false;else if (flagChar == "1") flag = true;else return undefined;

                    this._skipOptionalSpacesOrDelimiter();
                    return flag;
                };

                Source.prototype.parseSegment = function () {
                    var lookahead = this._string[this._currentIndex];
                    var command = this._pathSegTypeFromChar(lookahead);
                    if (command == SVGPathSeg.PATHSEG_UNKNOWN) {
                        // Possibly an implicit command. Not allowed if this is the first command.
                        if (this._previousCommand == SVGPathSeg.PATHSEG_UNKNOWN) return null;
                        command = this._nextCommandHelper(lookahead, this._previousCommand);
                        if (command == SVGPathSeg.PATHSEG_UNKNOWN) return null;
                    } else {
                        this._currentIndex++;
                    }

                    this._previousCommand = command;

                    switch (command) {
                        case SVGPathSeg.PATHSEG_MOVETO_REL:
                            return new SVGPathSegMovetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_MOVETO_ABS:
                            return new SVGPathSegMovetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_REL:
                            return new SVGPathSegLinetoRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_ABS:
                            return new SVGPathSegLinetoAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_REL:
                            return new SVGPathSegLinetoHorizontalRel(owningPathSegList, this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_HORIZONTAL_ABS:
                            return new SVGPathSegLinetoHorizontalAbs(owningPathSegList, this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_VERTICAL_REL:
                            return new SVGPathSegLinetoVerticalRel(owningPathSegList, this._parseNumber());
                        case SVGPathSeg.PATHSEG_LINETO_VERTICAL_ABS:
                            return new SVGPathSegLinetoVerticalAbs(owningPathSegList, this._parseNumber());
                        case SVGPathSeg.PATHSEG_CLOSEPATH:
                            this._skipOptionalSpaces();
                            return new SVGPathSegClosePath(owningPathSegList);
                        case SVGPathSeg.PATHSEG_CURVETO_CUBIC_REL:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoCubicRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                        case SVGPathSeg.PATHSEG_CURVETO_CUBIC_ABS:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoCubicAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.x2, points.y2);
                        case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_REL:
                            var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoCubicSmoothRel(owningPathSegList, points.x, points.y, points.x2, points.y2);
                        case SVGPathSeg.PATHSEG_CURVETO_CUBIC_SMOOTH_ABS:
                            var points = { x2: this._parseNumber(), y2: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoCubicSmoothAbs(owningPathSegList, points.x, points.y, points.x2, points.y2);
                        case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_REL:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoQuadraticRel(owningPathSegList, points.x, points.y, points.x1, points.y1);
                        case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_ABS:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegCurvetoQuadraticAbs(owningPathSegList, points.x, points.y, points.x1, points.y1);
                        case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_REL:
                            return new SVGPathSegCurvetoQuadraticSmoothRel(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_CURVETO_QUADRATIC_SMOOTH_ABS:
                            return new SVGPathSegCurvetoQuadraticSmoothAbs(owningPathSegList, this._parseNumber(), this._parseNumber());
                        case SVGPathSeg.PATHSEG_ARC_REL:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegArcRel(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                        case SVGPathSeg.PATHSEG_ARC_ABS:
                            var points = { x1: this._parseNumber(), y1: this._parseNumber(), arcAngle: this._parseNumber(), arcLarge: this._parseArcFlag(), arcSweep: this._parseArcFlag(), x: this._parseNumber(), y: this._parseNumber() };
                            return new SVGPathSegArcAbs(owningPathSegList, points.x, points.y, points.x1, points.y1, points.arcAngle, points.arcLarge, points.arcSweep);
                        default:
                            throw "Unknown path seg type.";
                    }
                };

                var builder = new Builder();
                var source = new Source(string);

                if (!source.initialCommandIsMoveTo()) return [];
                while (source.hasMoreData()) {
                    var pathSeg = source.parseSegment();
                    if (!pathSeg) return [];
                    builder.appendSegment(pathSeg);
                }

                return builder.pathSegList;
            };
        }
    })();

    /* jshint ignore:end */

    if (typeof define === 'function' && define.amd) {
        define("c3", ["d3"], function () {
            return c3;
        });
    } else if ('undefined' !== typeof exports && 'undefined' !== typeof module) {
        module.exports = c3;
    } else {
        window.c3 = c3;
    }
})(window);
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 * jQuery liMarquee v 4.6
 *
 * Copyright 2013, Linnik Yura | LI MASS CODE | http://masscode.ru
 * http://masscode.ru/index.php/k2/item/44-limarquee
 * Free to use
 *
 * Last Update 20.11.2014
 */
(function ($) {
	var methods = {
		init: function init(options) {
			var p = {
				direction: 'left', //Указывает направление движения содержимого контейнера (left | right | up | down)
				loop: -1, //Задает, сколько раз будет прокручиваться содержимое. "-1" для бесконечного воспроизведения движения
				scrolldelay: 0, //Величина задержки в миллисекундах между движениями
				scrollamount: 50, //Скорость движения контента (px/sec)
				circular: true, //Если "true" - строка непрерывная 
				drag: true, //Если "true" - включено перетаскивание строки
				runshort: true, //Если "true" - короткая строка тоже "бегает", "false" - стоит на месте
				hoverstop: true, //true - строка останавливается при наведении курсора мыши, false - строка не останавливается
				inverthover: false, //false - стандартное поведение. Если "true" - строка начинает движение только при наведении курсора
				xml: false //Путь к xml файлу с нужным текстом
			};
			if (options) {
				$.extend(p, options);
			}

			return this.each(function () {
				var enterEvent = 'mouseenter';
				var leaveEvent = 'mouseleave';
				if (p.inverthover) {
					enterEvent = 'mouseleave';
					leaveEvent = 'mouseenter';
				}

				var loop = p.loop,
				    strWrap = $(this).addClass('str_wrap').data({ scrollamount: p.scrollamount }),
				    fMove = false;

				var strWrapStyle = strWrap.attr('style');

				if (strWrapStyle) {
					var wrapStyleArr = strWrapStyle.split(';');
					var startHeight = false;
					for (var i = 0; i < wrapStyleArr.length; i++) {
						var str = $.trim(wrapStyleArr[i]);
						var tested = str.search(/^height/g);
						if (tested != -1) {
							startHeight = parseFloat(strWrap.css('height'));
						}
					}
				}

				var code = function code() {

					strWrap.off('mouseleave');
					strWrap.off('mouseenter');
					strWrap.off('mousemove');
					strWrap.off('mousedown');
					strWrap.off('mouseup');

					if (!$('.str_move', strWrap).length) {
						strWrap.wrapInner($('<div>').addClass('str_move'));
					}

					var strMove = $('.str_move', strWrap).addClass('str_origin'),
					    strMoveClone = strMove.clone().removeClass('str_origin').addClass('str_move_clone'),
					    time = 0;

					if (!p.hoverstop) {
						strWrap.addClass('noStop');
					}

					var circCloneHor = function circCloneHor() {
						strMoveClone.clone().css({
							left: '100%',
							right: 'auto',
							width: strMove.width()
						}).appendTo(strMove);
						strMoveClone.css({
							right: '100%',
							left: 'auto',
							width: strMove.width()
						}).appendTo(strMove);
					};

					var circCloneVert = function circCloneVert() {
						strMoveClone.clone().css({
							top: '100%',
							bottom: 'auto',
							height: strMove.height()
						}).appendTo(strMove);
						strMoveClone.css({
							bottom: '100%',
							top: 'auto',
							height: strMove.height()
						}).appendTo(strMove);
					};

					if (p.direction == 'left') {
						strWrap.height(strMove.outerHeight());
						if (strMove.width() > strWrap.width()) {
							var leftPos = -strMove.width();

							if (p.circular) {

								if (!p.xml) {
									circCloneHor();
									leftPos = -(strMove.width() + (strMove.width() - strWrap.width()));
								}
							}
							if (p.xml) {
								strMove.css({
									left: strWrap.width()
								});
							}
							var strMoveLeft = strWrap.width(),
							    k1 = 0,
							    timeFunc1 = function timeFunc1() {
								var fullS = Math.abs(leftPos),
								    time = fullS / strWrap.data('scrollamount') * 1000;
								if (parseFloat(strMove.css('left')) != 0) {
									fullS = fullS + strWrap.width();
									time = (fullS - (strWrap.width() - parseFloat(strMove.css('left')))) / strWrap.data('scrollamount') * 1000;
								}
								return time;
							},
							    moveFuncId1 = false,
							    moveFunc1 = function moveFunc1() {
								if (loop != 0) {
									strMove.stop(true).animate({
										left: leftPos
									}, timeFunc1(), 'linear', function () {
										$(this).css({
											left: strWrap.width()
										});
										if (loop == -1) {
											moveFuncId1 = setTimeout(moveFunc1, p.scrolldelay);
										} else {
											loop--;
											moveFuncId1 = setTimeout(moveFunc1, p.scrolldelay);
										}
									});
								}
							};
							strWrap.data({
								moveId: moveFuncId1,
								moveF: moveFunc1
							});
							if (!p.inverthover) {
								moveFunc1();
							}

							if (p.hoverstop) {
								strWrap.on(enterEvent, function () {
									$(this).addClass('str_active');
									clearTimeout(moveFuncId1);
									strMove.stop(true);
								}).on(leaveEvent, function () {
									$(this).removeClass('str_active');
									$(this).off('mousemove');
									moveFunc1();
								});

								if (p.drag) {
									strWrap.on('mousedown', function (e) {
										if (p.inverthover) {
											strMove.stop(true);
										}
										//drag
										var dragLeft;
										var dir = 1;
										var newX;
										var oldX = e.clientX;
										//drag

										strMoveLeft = strMove.position().left;
										k1 = strMoveLeft - (e.clientX - strWrap.offset().left);

										$(this).on('mousemove', function (e) {
											fMove = true;

											//drag
											newX = e.clientX;
											if (newX > oldX) {
												dir = 1;
											} else {
												dir = -1;
											}
											oldX = newX;
											dragLeft = k1 + (e.clientX - strWrap.offset().left);

											if (!p.circular) {
												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = strWrap.width();
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > strWrap.width() && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
											} else {
												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = 0;
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > 0 && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
											}

											strMove.stop(true).css({
												left: dragLeft
											});
											//drag

										}).on('mouseup', function () {
											$(this).off('mousemove');
											if (p.inverthover) {
												strMove.trigger('mouseenter');
											}
											setTimeout(function () {
												fMove = false;
											}, 50);
										});
										return false;
									}).on('click', function () {
										if (fMove) {
											return false;
										}
									});
								} else {
									strWrap.addClass('no_drag');
								};
							}
						} else {
							if (p.runshort) {
								strMove.css({
									left: strWrap.width()
								});
								var strMoveLeft = strWrap.width(),
								    k1 = 0,
								    timeFunc = function timeFunc() {
									time = (strMove.width() + strMove.position().left) / strWrap.data('scrollamount') * 1000;
									return time;
								};
								var moveFunc = function moveFunc() {
									var leftPos = -strMove.width();
									strMove.animate({
										left: leftPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											left: strWrap.width()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										}
									});
								};
								strWrap.data({
									moveF: moveFunc
								});
								if (!p.inverthover) {
									moveFunc();
								}
								if (p.hoverstop) {
									strWrap.on(enterEvent, function () {
										$(this).addClass('str_active');
										strMove.stop(true);
									}).on(leaveEvent, function () {
										$(this).removeClass('str_active');
										$(this).off('mousemove');
										moveFunc();
									});

									if (p.drag) {
										strWrap.on('mousedown', function (e) {
											if (p.inverthover) {
												strMove.stop(true);
											}

											//drag
											var dragLeft;
											var dir = 1;
											var newX;
											var oldX = e.clientX;
											//drag

											strMoveLeft = strMove.position().left;
											k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
											$(this).on('mousemove', function (e) {
												fMove = true;

												//drag
												newX = e.clientX;
												if (newX > oldX) {
													dir = 1;
												} else {
													dir = -1;
												}
												oldX = newX;
												dragLeft = k1 + (e.clientX - strWrap.offset().left);

												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = strWrap.width();
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > strWrap.width() && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k1 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}

												strMove.stop(true).css({
													left: dragLeft
												});
											}).on('mouseup', function () {
												if (p.inverthover) {
													strMove.trigger('mouseenter');
												}
												$(this).off('mousemove');
												setTimeout(function () {
													fMove = false;
												}, 50);
											});
											return false;
										}).on('click', function () {
											if (fMove) {
												return false;
											}
										});
									} else {
										strWrap.addClass('no_drag');
									};
								}
							} else {
								strWrap.addClass('str_static');
							}
						};
					};
					if (p.direction == 'right') {
						strWrap.height(strMove.outerHeight());
						strWrap.addClass('str_right');
						strMove.css({
							left: -strMove.width(),
							right: 'auto'
						});

						if (strMove.width() > strWrap.width()) {
							var leftPos = strWrap.width();
							strMove.css({
								left: 0
							});
							if (p.circular) {
								if (!p.xml) {
									circCloneHor();
									//Определяем крайнюю точку
									leftPos = strMove.width();
								}
							}

							var k2 = 0;
							timeFunc = function timeFunc() {
								var fullS = strWrap.width(),
								    //крайняя точка
								time = fullS / strWrap.data('scrollamount') * 1000; //время
								if (parseFloat(strMove.css('left')) != 0) {
									fullS = strMove.width() + strWrap.width();
									time = (fullS - (strMove.width() + parseFloat(strMove.css('left')))) / strWrap.data('scrollamount') * 1000;
								}
								return time;
							};
							var moveFunc = function moveFunc() {

								if (loop != 0) {
									strMove.animate({
										left: leftPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											left: -strMove.width()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};
							};
							strWrap.data({
								moveF: moveFunc
							});

							if (!p.inverthover) {
								moveFunc();
							}
							if (p.hoverstop) {
								strWrap.on(enterEvent, function () {
									$(this).addClass('str_active');
									strMove.stop(true);
								}).on(leaveEvent, function () {
									$(this).removeClass('str_active');
									$(this).off('mousemove');
									moveFunc();
								});

								if (p.drag) {

									strWrap.on('mousedown', function (e) {
										if (p.inverthover) {
											strMove.stop(true);
										}

										//drag
										var dragLeft;
										var dir = 1;
										var newX;
										var oldX = e.clientX;
										//drag

										strMoveLeft = strMove.position().left;
										k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
										$(this).on('mousemove', function (e) {

											fMove = true;

											//drag
											newX = e.clientX;
											if (newX > oldX) {
												dir = 1;
											} else {
												dir = -1;
											}
											oldX = newX;
											dragLeft = k2 + (e.clientX - strWrap.offset().left);

											if (!p.circular) {

												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = strWrap.width();
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > strWrap.width() && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
											} else {
												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = 0;
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > 0 && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
											}

											strMove.stop(true).css({
												left: dragLeft
											});
										}).on('mouseup', function () {
											if (p.inverthover) {
												strMove.trigger('mouseenter');
											}
											$(this).off('mousemove');
											setTimeout(function () {
												fMove = false;
											}, 50);
										});
										return false;
									}).on('click', function () {
										if (fMove) {
											return false;
										}
									});
								} else {
									strWrap.addClass('no_drag');
								};
							}
						} else {

							if (p.runshort) {

								var k2 = 0;
								var timeFunc = function timeFunc() {
									time = (strWrap.width() - strMove.position().left) / strWrap.data('scrollamount') * 1000;
									return time;
								};
								var moveFunc = function moveFunc() {
									var leftPos = strWrap.width();
									strMove.animate({
										left: leftPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											left: -strMove.width()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};

								strWrap.data({
									moveF: moveFunc
								});

								if (!p.inverthover) {
									moveFunc();
								}
								if (p.hoverstop) {
									strWrap.on(enterEvent, function () {
										$(this).addClass('str_active');
										strMove.stop(true);
									}).on(leaveEvent, function () {
										$(this).removeClass('str_active');
										$(this).off('mousemove');
										moveFunc();
									});

									if (p.drag) {
										strWrap.on('mousedown', function (e) {
											if (p.inverthover) {
												strMove.stop(true);
											}

											//drag
											var dragLeft;
											var dir = 1;
											var newX;
											var oldX = e.clientX;
											//drag

											strMoveLeft = strMove.position().left;
											k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
											$(this).on('mousemove', function (e) {
												fMove = true;

												//drag
												newX = e.clientX;
												if (newX > oldX) {
													dir = 1;
												} else {
													dir = -1;
												}
												oldX = newX;
												dragLeft = k2 + (e.clientX - strWrap.offset().left);

												if (dragLeft < -strMove.width() && dir < 0) {
													dragLeft = strWrap.width();
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}
												if (dragLeft > strWrap.width() && dir > 0) {
													dragLeft = -strMove.width();
													strMoveLeft = strMove.position().left;
													k2 = strMoveLeft - (e.clientX - strWrap.offset().left);
												}

												strMove.stop(true).css({
													left: dragLeft
												});
											}).on('mouseup', function () {
												if (p.inverthover) {
													strMove.trigger('mouseenter');
												}
												$(this).off('mousemove');
												setTimeout(function () {
													fMove = false;
												}, 50);
											});
											return false;
										}).on('click', function () {
											if (fMove) {
												return false;
											}
										});
									} else {
										strWrap.addClass('no_drag');
									};
								}
							} else {
								strWrap.addClass('str_static');
							}
						};
					};
					if (p.direction == 'up') {
						strWrap.addClass('str_vertical');

						if (strMove.height() > strWrap.height()) {
							var topPos = -strMove.height();
							if (p.circular) {
								if (!p.xml) {
									circCloneVert();
									topPos = -(strMove.height() + (strMove.height() - strWrap.height()));
								}
							}
							if (p.xml) {
								strMove.css({
									top: strWrap.height()
								});
							}
							var k2 = 0;
							timeFunc = function timeFunc() {
								var fullS = Math.abs(topPos),
								    time = fullS / strWrap.data('scrollamount') * 1000;
								if (parseFloat(strMove.css('top')) != 0) {
									fullS = fullS + strWrap.height();
									time = (fullS - (strWrap.height() - parseFloat(strMove.css('top')))) / strWrap.data('scrollamount') * 1000;
								}

								return time;
							};
							var moveFunc = function moveFunc() {
								if (loop != 0) {
									strMove.animate({
										top: topPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											top: strWrap.height()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};
							};

							strWrap.data({
								moveF: moveFunc
							});

							if (!p.inverthover) {
								moveFunc();
							}
							if (p.hoverstop) {
								strWrap.on(enterEvent, function () {
									$(this).addClass('str_active');
									strMove.stop(true);
								}).on(leaveEvent, function () {
									$(this).removeClass('str_active');
									$(this).off('mousemove');
									moveFunc();
								});

								if (p.drag) {
									strWrap.on('mousedown', function (e) {
										if (p.inverthover) {
											strMove.stop(true);
										}

										//drag
										var dragTop;
										var dir = 1;
										var newY;
										var oldY = e.clientY;
										//drag


										strMoveTop = strMove.position().top;
										k2 = strMoveTop - (e.clientY - strWrap.offset().top);
										$(this).on('mousemove', function (e) {

											fMove = true;

											//drag
											newY = e.clientY;
											if (newY > oldY) {
												dir = 1;
											} else {
												if (newY < oldY) {
													dir = -1;
												}
											}
											oldY = newY;
											dragTop = k2 + e.clientY - strWrap.offset().top;

											if (!p.circular) {
												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = strWrap.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > strWrap.height() && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
											} else {
												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = 0;
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > 0 && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
											}

											strMove.stop(true).css({
												top: dragTop
											});
											//drag

										}).on('mouseup', function () {
											if (p.inverthover) {
												strMove.trigger('mouseenter');
											}
											$(this).off('mousemove');
											setTimeout(function () {
												fMove = false;
											}, 50);
										});
										return false;
									}).on('click', function () {
										if (fMove) {
											return false;
										}
									});
								} else {
									strWrap.addClass('no_drag');
								};
							}
						} else {
							if (p.runshort) {
								strMove.css({
									top: strWrap.height()
								});
								var k2 = 0;
								var timeFunc = function timeFunc() {

									time = (strMove.height() + strMove.position().top) / strWrap.data('scrollamount') * 1000;

									return time;
								};
								var moveFunc = function moveFunc() {
									var topPos = -strMove.height();
									strMove.animate({
										top: topPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											top: strWrap.height()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};
								strWrap.data({
									moveF: moveFunc
								});
								if (!p.inverthover) {
									moveFunc();
								}
								if (p.hoverstop) {
									strWrap.on(enterEvent, function () {
										$(this).addClass('str_active');
										strMove.stop(true);
									}).on(leaveEvent, function () {
										$(this).removeClass('str_active');
										$(this).off('mousemove');
										moveFunc();
									});

									if (p.drag) {
										strWrap.on('mousedown', function (e) {
											if (p.inverthover) {
												strMove.stop(true);
											}

											//drag
											var dragTop;
											var dir = 1;
											var newY;
											var oldY = e.clientY;
											//drag

											strMoveTop = strMove.position().top;
											k2 = strMoveTop - (e.clientY - strWrap.offset().top);
											$(this).on('mousemove', function (e) {

												fMove = true;

												//drag
												newY = e.clientY;
												if (newY > oldY) {
													dir = 1;
												} else {
													if (newY < oldY) {
														dir = -1;
													}
												}
												oldY = newY;
												dragTop = k2 + e.clientY - strWrap.offset().top;

												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = strWrap.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > strWrap.height() && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												//*drag

												strMove.stop(true).css({
													top: dragTop
												});
											}).on('mouseup', function () {
												if (p.inverthover) {
													strMove.trigger('mouseenter');
												}
												$(this).off('mousemove');
												setTimeout(function () {
													fMove = false;
												}, 50);
											});
											return false;
										}).on('click', function () {
											if (fMove) {
												return false;
											}
										});
									} else {
										strWrap.addClass('no_drag');
									};
								}
							} else {
								strWrap.addClass('str_static');
							}
						};
					};
					if (p.direction == 'down') {

						strWrap.addClass('str_vertical').addClass('str_down');
						strMove.css({
							top: -strMove.height(),
							bottom: 'auto'
						});
						if (strMove.height() > strWrap.height()) {
							var topPos = strWrap.height();
							if (p.circular) {
								if (!p.xml) {
									circCloneVert();
									topPos = strMove.height();
								}
							}
							if (p.xml) {
								strMove.css({
									top: -strMove.height()
								});
							}
							var k2 = 0;
							timeFunc = function timeFunc() {
								var fullS = strWrap.height(),
								    //крайняя точка
								time = fullS / strWrap.data('scrollamount') * 1000; //время

								if (parseFloat(strMove.css('top')) != 0) {
									fullS = strMove.height() + strWrap.height();
									time = (fullS - (strMove.height() + parseFloat(strMove.css('top')))) / strWrap.data('scrollamount') * 1000;
								}
								return time;
							};
							var moveFunc = function moveFunc() {

								if (loop != 0) {
									strMove.animate({
										top: topPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											top: -strMove.height()
										});
										if (loop == -1) {

											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};
							};
							strWrap.data({
								moveF: moveFunc
							});
							if (!p.inverthover) {
								moveFunc();
							}
							if (p.hoverstop) {
								strWrap.on(enterEvent, function () {
									$(this).addClass('str_active');
									strMove.stop(true);
								}).on(leaveEvent, function () {
									$(this).removeClass('str_active');
									$(this).off('mousemove');
									moveFunc();
								});

								if (p.drag) {
									strWrap.on('mousedown', function (e) {
										if (p.inverthover) {
											strMove.stop(true);
										}

										//drag
										var dragTop;
										var dir = 1;
										var newY;
										var oldY = e.clientY;
										//drag


										strMoveTop = strMove.position().top;
										k2 = strMoveTop - (e.clientY - strWrap.offset().top);
										$(this).on('mousemove', function (e) {

											fMove = true;

											//drag
											newY = e.clientY;
											if (newY > oldY) {
												dir = 1;
											} else {
												if (newY < oldY) {
													dir = -1;
												}
											}
											oldY = newY;
											dragTop = k2 + e.clientY - strWrap.offset().top;

											if (!p.circular) {
												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = strWrap.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > strWrap.height() && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
											} else {
												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = 0;
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > 0 && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
											}

											strMove.stop(true).css({
												top: dragTop
											});
											//drag

										}).on('mouseup', function () {
											if (p.inverthover) {
												strMove.trigger('mouseenter');
											}
											$(this).off('mousemove');
											setTimeout(function () {
												fMove = false;
											}, 50);
										});
										return false;
									}).on('click', function () {
										if (fMove) {
											return false;
										}
									});
								} else {
									strWrap.addClass('no_drag');
								};
							}
						} else {
							if (p.runshort) {
								var k2 = 0;
								var timeFunc = function timeFunc() {
									time = (strWrap.height() - strMove.position().top) / strWrap.data('scrollamount') * 1000;
									return time;
								};
								var moveFunc = function moveFunc() {
									var topPos = strWrap.height();
									strMove.animate({
										top: topPos
									}, timeFunc(), 'linear', function () {
										$(this).css({
											top: -strMove.height()
										});
										if (loop == -1) {
											setTimeout(moveFunc, p.scrolldelay);
										} else {
											loop--;
											setTimeout(moveFunc, p.scrolldelay);
										};
									});
								};
								strWrap.data({
									moveF: moveFunc
								});
								if (!p.inverthover) {
									moveFunc();
								}
								if (p.hoverstop) {
									strWrap.on(enterEvent, function () {
										$(this).addClass('str_active');
										strMove.stop(true);
									}).on(leaveEvent, function () {
										$(this).removeClass('str_active');
										$(this).off('mousemove');
										moveFunc();
									});

									if (p.drag) {
										strWrap.on('mousedown', function (e) {
											if (p.inverthover) {
												strMove.stop(true);
											}

											//drag
											var dragTop;
											var dir = 1;
											var newY;
											var oldY = e.clientY;
											//drag

											strMoveTop = strMove.position().top;
											k2 = strMoveTop - (e.clientY - strWrap.offset().top);
											$(this).on('mousemove', function (e) {
												fMove = true;

												//drag
												newY = e.clientY;
												if (newY > oldY) {
													dir = 1;
												} else {
													if (newY < oldY) {
														dir = -1;
													}
												}
												oldY = newY;
												dragTop = k2 + e.clientY - strWrap.offset().top;

												if (dragTop < -strMove.height() && dir < 0) {
													dragTop = strWrap.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												if (dragTop > strWrap.height() && dir > 0) {
													dragTop = -strMove.height();
													strMoveTop = strMove.position().top;
													k2 = strMoveTop - (e.clientY - strWrap.offset().top);
												}
												//*drag

												strMove.stop(true).css({
													top: dragTop
												});
											}).on('mouseup', function () {
												if (p.inverthover) {
													strMove.trigger('mouseenter');
												}
												$(this).off('mousemove');
												setTimeout(function () {
													fMove = false;
												}, 50);
											});
											return false;
										}).on('click', function () {
											if (fMove) {
												return false;
											}
										});
									} else {
										strWrap.addClass('no_drag');
									};
								}
							} else {
								strWrap.addClass('str_static');
							}
						};
					};
				};
				if (p.xml) {
					$.ajax({
						url: p.xml,
						dataType: "xml",
						success: function success(xml) {
							var xmlTextEl = $(xml).find('text');
							var xmlTextLength = xmlTextEl.length;
							for (var i = 0; i < xmlTextLength; i++) {
								var xmlElActive = xmlTextEl.eq(i);
								var xmlElContent = xmlElActive.text();
								var xmlItemEl = $('<span>').text(xmlElContent).appendTo(strWrap);

								if (p.direction == 'left' || p.direction == 'right') {
									xmlItemEl.css({ display: 'inline-block', textAlign: 'right' });
									if (i > 0) {
										xmlItemEl.css({ width: strWrap.width() + xmlItemEl.width() });
									}
								}
								if (p.direction == 'down' || p.direction == 'up') {
									xmlItemEl.css({ display: 'block', textAlign: 'left' });
									if (i > 0) {
										xmlItemEl.css({ paddingTop: strWrap.height() });
									}
								}
							}
							code();
						}
					});
				} else {
					code();
				}
				strWrap.data({
					ini: code,
					startheight: startHeight
				});
			});
		},
		update: function update() {
			var el = $(this);
			var str_origin = $('.str_origin', el);
			var str_move_clone = $('.str_move_clone', el);
			str_origin.stop(true);
			str_move_clone.remove();
			el.data('ini')();
		},
		destroy: function destroy() {

			var el = $(this);
			var elMove = $('.str_move', el);
			var startHeight = el.data('startheight');

			$('.str_move_clone', el).remove();
			el.off('mouseenter');
			el.off('mousedown');
			el.off('mouseup');
			el.off('mouseleave');
			el.off('mousemove');
			el.removeClass('noStop').removeClass('str_vertical').removeClass('str_active').removeClass('no_drag').removeClass('str_static').removeClass('str_right').removeClass('str_down');

			var elStyle = el.attr('style');
			if (elStyle) {
				var styleArr = elStyle.split(';');
				for (var i = 0; i < styleArr.length; i++) {
					var str = $.trim(styleArr[i]);
					var tested = str.search(/^height/g);
					if (tested != -1) {
						styleArr[i] = '';
					}
				}
				var newArr = styleArr.join(';');
				var newStyle = newArr.replace(/;+/g, ';');

				if (newStyle == ';') {
					el.removeAttr('style');
				} else {
					el.attr('style', newStyle);
				}

				if (startHeight) {
					el.css({ height: startHeight });
				}
			}
			elMove.stop(true);

			if (elMove.length) {
				var context = elMove.html();
				elMove.remove();
				el.html(context);
			}
		},
		pause: function pause() {
			var el = $(this);
			var elMove = $('.str_move', el);
			elMove.stop(true);
		},
		play: function play() {
			var el = $(this);
			$(this).off('mousemove');
			el.data('moveF')();
		}

	};
	$.fn.liMarquee = function (method) {
		if (methods[method]) {
			return methods[method].apply(this, Array.prototype.slice.call(arguments, 1));
		} else if ((typeof method === 'undefined' ? 'undefined' : _typeof(method)) === 'object' || !method) {
			return methods.init.apply(this, arguments);
		} else {
			$.error('Метод ' + method + ' в jQuery.liMarquee не существует');
		}
	};
})(jQuery);
"use strict";

/*!
 * jQCloud Plugin for jQuery
 *
 * Version 1.0.4
 *
 * Copyright 2011, Luca Ongaro
 * Licensed under the MIT license.
 *
 * Date: 2013-05-09 18:54:22 +0200
*/

(function ($) {
  "use strict";

  $.fn.jQCloud = function (word_array, options) {
    // Reference to the container element
    var $this = this;
    // Namespace word ids to avoid collisions between multiple clouds
    var cloud_namespace = $this.attr('id') || Math.floor(Math.random() * 1000000).toString(36);

    // Default options value
    var default_options = {
      width: $this.width(),
      height: $this.height(),
      center: {
        x: (options && options.width ? options.width : $this.width()) / 2.0,
        y: (options && options.height ? options.height : $this.height()) / 2.0
      },
      delayedMode: word_array.length > 50,
      shape: false, // It defaults to elliptic shape
      encodeURI: true,
      removeOverflowing: true
    };

    options = $.extend(default_options, options || {});

    // Add the "jqcloud" class to the container for easy CSS styling, set container width/height
    $this.addClass("jqcloud").width(options.width).height(options.height);

    // Container's CSS position cannot be 'static'
    if ($this.css("position") === "static") {
      $this.css("position", "relative");
    }

    var drawWordCloud = function drawWordCloud() {
      // Helper function to test if an element overlaps others
      var hitTest = function hitTest(elem, other_elems) {
        // Pairwise overlap detection
        var overlapping = function overlapping(a, b) {
          if (Math.abs(2.0 * a.offsetLeft + a.offsetWidth - 2.0 * b.offsetLeft - b.offsetWidth) < a.offsetWidth + b.offsetWidth) {
            if (Math.abs(2.0 * a.offsetTop + a.offsetHeight - 2.0 * b.offsetTop - b.offsetHeight) < a.offsetHeight + b.offsetHeight) {
              return true;
            }
          }
          return false;
        };
        var i = 0;
        // Check elements for overlap one by one, stop and return false as soon as an overlap is found
        for (i = 0; i < other_elems.length; i++) {
          if (overlapping(elem, other_elems[i])) {
            return true;
          }
        }
        return false;
      };

      // Make sure every weight is a number before sorting
      for (var i = 0; i < word_array.length; i++) {
        word_array[i].weight = parseFloat(word_array[i].weight, 10);
      }

      // Sort word_array from the word with the highest weight to the one with the lowest
      word_array.sort(function (a, b) {
        if (a.weight < b.weight) {
          return 1;
        } else if (a.weight > b.weight) {
          return -1;
        } else {
          return 0;
        }
      });

      var step = options.shape === "rectangular" ? 18.0 : 2.0,
          already_placed_words = [],
          aspect_ratio = options.width / options.height;

      // Function to draw a word, by moving it in spiral until it finds a suitable empty place. This will be iterated on each word.
      var drawOneWord = function drawOneWord(index, word) {
        // Define the ID attribute of the span that will wrap the word, and the associated jQuery selector string
        var word_id = cloud_namespace + "_word_" + index,
            word_selector = "#" + word_id,
            angle = 6.28 * Math.random(),
            radius = 0.0,


        // Only used if option.shape == 'rectangular'
        steps_in_direction = 0.0,
            quarter_turns = 0.0,
            weight = 5,
            custom_class = "",
            inner_html = "",
            word_span;

        // Extend word html options with defaults
        word.html = $.extend(word.html, { id: word_id });

        // If custom class was specified, put them into a variable and remove it from html attrs, to avoid overwriting classes set by jQCloud
        if (word.html && word.html["class"]) {
          custom_class = word.html["class"];
          delete word.html["class"];
        }

        // Check if min(weight) > max(weight) otherwise use default
        if (word_array[0].weight > word_array[word_array.length - 1].weight) {
          // Linearly map the original weight to a discrete scale from 1 to 10
          weight = Math.round((word.weight - word_array[word_array.length - 1].weight) / (word_array[0].weight - word_array[word_array.length - 1].weight) * 9.0) + 1;
        }
        word_span = $('<span>').attr(word.html).addClass('w' + weight + " " + custom_class);

        // Append link if word.url attribute was set
        if (word.link) {
          // If link is a string, then use it as the link href
          if (typeof word.link === "string") {
            word.link = { href: word.link };
          }

          // Extend link html options with defaults
          if (options.encodeURI) {
            word.link = $.extend(word.link, { href: encodeURI(word.link.href).replace(/'/g, "%27") });
          }

          inner_html = $('<a>').attr(word.link).text(word.text);
        } else {
          inner_html = word.text;
        }
        word_span.append(inner_html);

        // Bind handlers to words
        if (!!word.handlers) {
          for (var prop in word.handlers) {
            if (word.handlers.hasOwnProperty(prop) && typeof word.handlers[prop] === 'function') {
              $(word_span).bind(prop, word.handlers[prop]);
            }
          }
        }

        $this.append(word_span);

        var width = word_span.width(),
            height = word_span.height(),
            left = options.center.x - width / 2.0,
            top = options.center.y - height / 2.0;

        // Save a reference to the style property, for better performance
        var word_style = word_span[0].style;
        word_style.position = "absolute";
        word_style.left = left + "px";
        word_style.top = top + "px";

        while (hitTest(word_span[0], already_placed_words)) {
          // option shape is 'rectangular' so move the word in a rectangular spiral
          if (options.shape === "rectangular") {
            steps_in_direction++;
            if (steps_in_direction * step > (1 + Math.floor(quarter_turns / 2.0)) * step * (quarter_turns % 4 % 2 === 0 ? 1 : aspect_ratio)) {
              steps_in_direction = 0.0;
              quarter_turns++;
            }
            switch (quarter_turns % 4) {
              case 1:
                left += step * aspect_ratio + Math.random() * 2.0;
                break;
              case 2:
                top -= step + Math.random() * 2.0;
                break;
              case 3:
                left -= step * aspect_ratio + Math.random() * 2.0;
                break;
              case 0:
                top += step + Math.random() * 2.0;
                break;
            }
          } else {
            // Default settings: elliptic spiral shape
            radius += step;
            angle += (index % 2 === 0 ? 1 : -1) * step;

            left = options.center.x - width / 2.0 + radius * Math.cos(angle) * aspect_ratio;
            top = options.center.y + radius * Math.sin(angle) - height / 2.0;
          }
          word_style.left = left + "px";
          word_style.top = top + "px";
        }

        // Don't render word if part of it would be outside the container
        if (options.removeOverflowing && (left < 0 || top < 0 || left + width > options.width || top + height > options.height)) {
          word_span.remove();
          return;
        }

        already_placed_words.push(word_span[0]);

        // Invoke callback if existing
        if ($.isFunction(word.afterWordRender)) {
          word.afterWordRender.call(word_span);
        }
      };

      var drawOneWordDelayed = function drawOneWordDelayed(index) {
        index = index || 0;
        if (!$this.is(':visible')) {
          // if not visible then do not attempt to draw
          setTimeout(function () {
            drawOneWordDelayed(index);
          }, 10);
          return;
        }
        if (index < word_array.length) {
          drawOneWord(index, word_array[index]);
          setTimeout(function () {
            drawOneWordDelayed(index + 1);
          }, 10);
        } else {
          if ($.isFunction(options.afterCloudRender)) {
            options.afterCloudRender.call($this);
          }
        }
      };

      // Iterate drawOneWord on every word. The way the iteration is done depends on the drawing mode (delayedMode is true or false)
      if (options.delayedMode) {
        drawOneWordDelayed();
      } else {
        $.each(word_array, drawOneWord);
        if ($.isFunction(options.afterCloudRender)) {
          options.afterCloudRender.call($this);
        }
      }
    };

    // Delay execution so that the browser can render the page before the computatively intensive word cloud drawing
    setTimeout(function () {
      drawWordCloud();
    }, 10);
    return $this;
  };
})(jQuery);
'use strict';

define('global:maps:GeoMapGoogleView', ['async!http://maps.google.com/maps/api/js?v=3.22&key=AIzaSyD2WhtWvymVvaSFTjqufGtxBgdEaDQbpEw'], function () {

    return Mn.View.extend({

        template: false,

        onRender: function onRender() {
            this.$el.css({ position: 'absolute', top: 0, left: 0, bottom: 0, right: 0, margin: '-20px' });
        },

        onAttach: function onAttach() {

            var zoom = this.model.get("Zoom"),
                lat = this.model.get("CenterLat"),
                long = this.model.get("CenterLong"),
                flag = zoom && lat && long,
                bounds = new google.maps.LatLngBounds(),
                mapOptions = {
                center: new google.maps.LatLng(lat || 55.76, long || 37.64),
                zoom: zoom || 10,
                mapTypeId: google.maps.MapTypeId.ROADMAP
            },
                map = new google.maps.Map(this.el, mapOptions);

            // для сохранения позиции и масштаба

            function setCenter() {

                var zoom = map.getZoom(),
                    center = map.getCenter();

                if (!this.model.get("ReadOnly")) {
                    var m = new Backbone.Model({
                        widget: {
                            name: this.model.get('title'),
                            type: this.model.get('type'),
                            uid: this.model.id,
                            Visualization: this.model.get('Visualization')
                        },
                        CenterLat: center.lat(),
                        CenterLong: center.lng(),
                        Zoom: zoom
                    });
                    m.url = '/api/widget/' + this.model.id + '/setstate';
                    m.save();
                }
            };

            google.maps.event.addListener(map, "dragend", setCenter.bind(this));
            google.maps.event.addListener(map, "zoom_changed", setCenter.bind(this));

            var shape = {
                coords: [1, 1, 1, 20, 18, 20, 18, 1],
                type: 'poly'
            };

            var infoWindow = new google.maps.InfoWindow();
            var widgetModel = this.model;

            this.collection.each(function (m) {

                if (m.get('latitude') && m.get('longitude')) {

                    var image = {
                        url: m.get('markerurl'),
                        size: new google.maps.Size(17, 32),
                        origin: new google.maps.Point(0, 0),
                        anchor: new google.maps.Point(0, 32)
                    };

                    var position = new google.maps.LatLng(parseFloat(m.get('latitude').replace(",", ".")), parseFloat(m.get('longitude').replace(",", ".")));

                    bounds.extend(position);

                    var marker = new google.maps.Marker({
                        position: position,
                        map: map,
                        icon: image,
                        shape: shape,
                        title: m.get('display_name'),
                        zIndex: 1
                    });

                    google.maps.event.addListener(marker, 'click', function (marker, i) {

                        return function () {

                            widgetModel.trigger('click:item', m);

                            infoWindow.setContent(m.get('display_name'));
                            infoWindow.open(map, marker);
                        };
                    }(marker));
                }
            }, this);

            if (!flag) map.fitBounds(bounds);
        }
    });
});
'use strict';

define('ejChartView', ['i18n!nls/resources.min', 'global.charts.settingsmodel', 'RU'], function (Resources, subsetModel) {

    return Mn.View.extend({

        className: 'g--chart',

        template: _.template(''),

        initialize: function initialize() {

            this.subModel = new subsetModel();

            if (this.options.subset) this.subModel.set(this.options.subset);
        },

        onBeforeRender: function onBeforeRender() {

            this.$el.attr('id', (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase());
        },

        onRender: function onRender() {

            var sModel = this.subModel;

            this.$el.css('display', 'inline-block');

            this._getColor();

            this.ejOptions = {

                //Initializing Series
                series: this.model.get('flow'),

                load: "loadTheme",

                //isResponsive: true, Controls whether Chart has to be responsive while resizing. - для нас не подходит
                locale: Resources.Lang,

                title: {
                    text: sModel.get('chartTitle') || this.model.get('name') || "",
                    enableTrim: true
                },

                size: {
                    width: this.model.get('width'),
                    height: this.model.get('height')
                },

                //Initializing Zooming
                zooming: {
                    enable: true,
                    type: 'x,y',
                    enableMouseWheel: true,
                    enableScrollbar: true,
                    enableDeferredZoom: true
                },

                legend: {
                    visible: sModel.get('legendVisible'),
                    title: {
                        text: sModel.get('legendTitle')
                    },
                    enableScrollbar: false,
                    position: sModel.get('legendPosition'),
                    rowCount: isNaN(parseInt(sModel.get('legendRowCount'))) ? null : parseInt(sModel.get('legendRowCount')),
                    border: {
                        color: sModel.get('legendBorderColor'),
                        width: isNaN(parseInt(sModel.get('legendBorderSize'))) ? 1 : parseInt(sModel.get('legendBorderSize'))
                    }
                },

                chartClick: function (args) {

                    this.triggerMethod('chart:selected', this);
                }.bind(this)
            };

            if (this.model.get('type') === 'pie') {

                this.ejOptions.commonSeriesOptions = {
                    type: this.model.get('type'),
                    enableAnimation: true,

                    tooltip: {
                        visible: sModel.get('tooltipVisible'),
                        format: sModel.get('tooltipFormat')
                    },

                    border: {
                        width: 1,
                        color: 'white'
                    },

                    marker: {
                        dataLabel: {
                            visible: sModel.get('dataLabelVisible'),
                            shape: 'none',
                            connectorLine: { type: 'bezier', color: 'black' },
                            font: { size: '14px' },
                            enableContrastColor: true
                        }
                    },

                    labelPosition: 'outsideExtended',
                    enableSmartLabels: true,
                    startAngle: 145,

                    pieCoefficient: parseFloat(sModel.get('pieSize')),
                    //explodeIndex: isNaN(parseInt(sModel.get('explodedIndex'))) ? null : parseInt(sModel.get('explodedIndex')),
                    explodeAll: sModel.get('explodeAllSegments'),
                    explode: sModel.get('explodeOnMouseOver')

                };
            } else {
                this.ejOptions.primaryXAxis = {
                    visible: sModel.get('primaryXAxisVisible'),
                    title: { text: sModel.get('primaryXAxisTitle') },
                    majorGridLines: { visible: true, color: "#a9a9a9", opacity: 0.12 },
                    labelIntersectAction: sModel.get('primaryXAxislabelIntrsectAction'),
                    valueType: this.model.get('xAxisType').toLowerCase()
                };

                //Initializing Primary Y Axis	
                this.ejOptions.primaryYAxis = {
                    //range: { min: 0, max: 80, interval: 20 },
                    visible: sModel.get('primaryYAxisVisible'),
                    title: { text: sModel.get('primaryYAxisTitle') },
                    //range: this.getRange(),
                    majorGridLines: { visible: true, color: "#a9a9a9", opacity: 0.12 },
                    labelIntersectAction: sModel.get('primaryYAxislabelIntrsectAction'),
                    valueType: this.model.get('yAxisType').toLowerCase()
                };

                //Initializing Common Properties for all the series
                this.ejOptions.commonSeriesOptions = {
                    type: this.model.get('type'),
                    enableAnimation: true,

                    tooltip: {
                        visible: sModel.get('tooltipVisible'),
                        format: sModel.get('tooltipFormat')
                    },

                    marker: {
                        shape: sModel.get('markerShape'),
                        size: {
                            height: sModel.get('markerHeight'), width: sModel.get('markerWidth')
                        },
                        visible: sModel.get('markerVisible'),
                        dataLabel: {
                            opacity: sModel.get('dataLabelOpacity'),
                            textPosition: sModel.get('dataLabelPosition'),
                            visible: sModel.get('dataLabelVisible')
                        }
                    },

                    columnWidth: parseFloat(sModel.get('columnWidth')),

                    width: parseInt(sModel.get('lineWidth'))
                };
            }

            //#4268 volkov для графиков, которые закрашивают области, области сделать полупрозрачными
            if (this.model.get('type').indexOf('area') >= 0) this.ejOptions.commonSeriesOptions.opacity = 0.5;
        },

        onAttach: function onAttach() {

            try {

                this.$el.ejChart(this.ejOptions);
            } catch (e) {

                console.error(e.message, 'chart name - ' + this.model.get('type'));
            }
        },

        _getColor: function _getColor() {

            var p = this.options.palette;
            var colorsValue = p ? p.WidgetParamValue : undefined;

            if (colorsValue) {

                var series = this.model.get('flow').map(function (el) {

                    if (el.fnId && el.fnId !== -1) {

                        var o = _.findWhere(colorsValue, { 'object_id': el.elId });

                        if (o && o.color !== 'none') {
                            el.fill = o.color;

                            el.points.map(function (a) {
                                a.fill = o.color;
                            });
                        }
                    } else {

                        var points = el.points;
                        _.map(points, function (el) {

                            var o = _.findWhere(colorsValue, { 'object_id': el.elId });

                            if (o && o.color !== 'none') el.fill = o.color;
                        });
                    }
                });
            }
        }

    });
});
'use strict';

define('global.charts.settingsmodel', [], function () {

                return Backbone.Model.extend({

                                defaults: function defaults() {

                                                return {

                                                                /* Базовая настройка */

                                                                //Наименование графика
                                                                chartTitle: '',

                                                                /* Настройка подсказки */

                                                                // Показать всплывающую подсказку
                                                                tooltipVisible: true,

                                                                //Формат всплывающей подсказки
                                                                tooltipFormat: '#series.name# : #point.y#',

                                                                // Маркер данных
                                                                markerVisible: true,
                                                                markerShape: 'circle',
                                                                markerHeight: 10,
                                                                markerWidth: 10,

                                                                // Метка данных
                                                                dataLabelVisible: false,
                                                                dataLabelPosition: 'top',
                                                                dataLabelOpacity: 0.5,

                                                                /* Настройка легенды */

                                                                // Показывать легенду
                                                                legendVisible: false,

                                                                // Заголовок легенды
                                                                legendTitle: '',

                                                                // Расположение легенды
                                                                legendPosition: 'Bottom', // Left, Right, Top, Bottom (default)

                                                                // Количество рядов в легенде
                                                                legendRowCount: null, // Number of rows to arrange the legend items.

                                                                // Толщина границы легенды
                                                                legendBorderSize: 0,

                                                                //  Цвет границы легенды
                                                                legendBorderColor: 'transparent',

                                                                /* Настройка осей */

                                                                // exclude pie

                                                                // Показывать ось X
                                                                primaryXAxisVisible: true,

                                                                //  Наименование оси X
                                                                primaryXAxisTitle: '',

                                                                // Расположение меток на оси X
                                                                primaryXAxislabelIntrsectAction: 'Trim',

                                                                // Показывать ось Y
                                                                primaryYAxisVisible: true,

                                                                //  Наименование оси Y
                                                                primaryYAxisTitle: '',

                                                                // Расположение меток на оси Y
                                                                primaryYAxislabelIntrsectAction: 'Trim',

                                                                /*
                                                                
                                                                None	string	no action will be perform in axis labels 
                                                                Rotate90	string	Displays axis labels with 90 degree
                                                                Rotate45	string	Displays axis labels with 45 degree
                                                                Wrap	string	Axis labels will be Wrap
                                                                WrapByword	string	Axis labels will be Wrap by word
                                                                Trim	string	Axis labels will be trimmed
                                                                Hide	string	Axis labels will be hide when overlap to others
                                                                MultipleRows	string	Axis labels will display the next line when overlap to others
                                                                
                                                                */

                                                                /* Настройка колонок */

                                                                // column, bar, stackingColumn100, stackingColumn, bar


                                                                //Ширина колонки
                                                                columnWidth: 0.7, //Было 1

                                                                // Рассотяние между колонками
                                                                columnSpacing: 0,

                                                                /* График */

                                                                // line

                                                                // Ширина линии
                                                                lineWidth: 2,

                                                                /* Настройка секций (круговая диаграмма) */

                                                                // pie

                                                                // series.pieCoefficient - Диаметр круга 0-1
                                                                pieSize: 0.8,

                                                                // Индекс отделенного сегмента
                                                                //explodedIndex: null,

                                                                // Отделять все сегменты
                                                                explodeAllSegments: false,

                                                                // series.explode отделять сегмент при наведении
                                                                explodeOnMouseOver: false,

                                                                /* Настройки цветов */

                                                                colorSettings: false
                                                };
                                }
                });
});
'use strict';

define('services.library.libraryView', ['i18n!nls/resources.min', 'global.request.param', 'g/tree', 'global.grid.dataItemsView'], function (Resources, ParamView, treeView, tableView) {

    var queryModel = new Backbone.Model();

    var query = Backbone.Collection.extend({

        url: '/api/Request/ExecuteV2?page=1',
        sync: function sync(method, model, options) {
            var json = queryModel;
            json.set('page', this.url.split('?')[1].split('=')[1]);
            json.url = this.url;
            Backbone.Collection.prototype.sync.apply(this, ['create', json, options]);
        }

    });

    var parametersView = Mn.CollectionView.extend({

        className: "params-container",

        childView: ParamView,

        childViewOptions: function childViewOptions() {
            return {
                rid: this.options.rid,
                dbase: this.options.dbase
            };
        },

        emptyView: Mn.View.extend({
            template: _.template(Resources.N),
            templateContext: { Resources: Resources }
        })

    });

    return Mn.View.extend({

        className: 'request-library',

        template: templates['services-request-library'],
        templateContext: { Resources: Resources },

        events: {

            "click .run:not([data-icon='icon-loader'])": function clickRunNotDataIconIconLoader() {

                this.ui.run.attr('data-icon', 'icon-loader');
                var data = this.getChildView('params').collection.toJSON();

                queryModel.set({
                    id: parseInt(this.requestID),
                    pars: data
                });

                var collection = new query();

                this.showChildView('result', new tableView({ collection: collection, hideButton: true }));

                collection.fetch({

                    reset: true,

                    success: function () {

                        this.ui.run.attr("data-icon", "icon-next");
                        this.getChildView('result').getChildView('table').getChildView('body').$('.btn-link').remove();
                    }.bind(this),

                    error: function (c, xhr) {

                        var m = xhr.responseJSON ? xhr.responseJSON.msg : null;

                        if (m) this.getChildView('result').$el.html('<i style="color:red">' + Resources.rer + ': <br/>{ ' + m + ' }</i>');else this.getChildView('result').$el.html('<i style="color:red">' + xhr.statusText + '</i>');

                        this.ui.run.attr("data-icon", "icon-next");
                    }.bind(this)

                });
            }
        },

        ui: {
            run: 'button.run',
            result: '.result',
            main: '.main'
        },

        regions: {
            tree: '.left',
            params: { el: '.params', replaceElement: true },
            result: { el: '@ui.result', replaceElement: true }
        },

        onRender: function onRender() {

            this.ui.run.hide();

            var collection = new Backbone.Collection();
            collection.url = '/api/request' + (this.options.widgetType ? '?widgetType=' + this.options.widgetType : '');

            this.showChildView('tree', new treeView({ collection: collection, node: { checkbox: false } }));

            collection.fetch({ reset: true });

            //if (this.options.isDemo) {
            //    this.$el.addClass("isDemo");
            //    this.getChildView('tree').$el.showIndicator();
            //    this.getChildView('tree').collection.fetch({ reset: true });
            //}
            //else {
            //    this.showChildView('authorise', new Authorise);
            //    this.getChildView('authorise').$el.show();
            //    this.ui.main.hide();
            //}
        },

        onChildviewContainerSelectItem: function onChildviewContainerSelectItem(v) {

            var p = v.model.get('parameters') || [];

            if (this.getRegion('result').hasView()) this.getChildView('result').$el.hide();

            if (v.model.get('isdoc')) {

                this.requestID = v.model.id;

                this.showChildView('params', new parametersView({ collection: new Backbone.Collection(p), dbase: this.options.dbase }));

                this.ui.run.show();
            } else {

                if (this.getRegion('params').hasView()) this.getChildView('params').collection.reset();

                this.ui.run.hide();
            }
        },

        onChildviewAuthorizeEnd: function onChildviewAuthorizeEnd() {

            //this.getChildView('authorise').$el.hide();

            //if (this.getRegion('authorise').hasView())
            //    $.ajaxSettings.headers.key = $.mergeUrlParam($.ajaxSettings.url, { db: 'db' + this.getChildView('authorise').collection.at(0).id });

            //this.getChildView('tree').$el.showIndicator();
            //this.getChildView('tree').collection.fetch({ reset: true });
            //this.ui.main.show();

            //this.triggerMethod('authorise:end');

        }

    });
});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
